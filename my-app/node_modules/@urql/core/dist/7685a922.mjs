import { GraphQLError as e } from "graphql/error/GraphQLError.mjs";

import { Kind as r } from "graphql/language/kinds.mjs";

import { parse as t } from "graphql/language/parser.mjs";

import { print as n } from "graphql/language/printer.mjs";

import { make as o } from "wonka";

function rehydrateGraphQlError(r) {
  if ("string" == typeof r) {
    return new e(r);
  } else if ("object" == typeof r && r.message) {
    return new e(r.message, r.nodes, r.source, r.positions, r.path, r, r.extensions || {});
  } else {
    return r;
  }
}

var i = function(e) {
  function CombinedError(r) {
    var t = r.networkError;
    var n = r.response;
    var o = (r.graphQLErrors || []).map(rehydrateGraphQlError);
    var i = function generateErrorMessage(e, r) {
      var t = "";
      if (void 0 !== e) {
        return t = "[Network] " + e.message;
      }
      if (void 0 !== r) {
        r.forEach((function(e) {
          t += "[GraphQL] " + e.message + "\n";
        }));
      }
      return t.trim();
    }(t, o);
    e.call(this, i);
    this.name = "CombinedError";
    this.message = i;
    this.graphQLErrors = o;
    this.networkError = t;
    this.response = n;
  }
  if (e) {
    CombinedError.__proto__ = e;
  }
  (CombinedError.prototype = Object.create(e && e.prototype)).constructor = CombinedError;
  CombinedError.prototype.toString = function toString() {
    return this.message;
  };
  return CombinedError;
}(Error);

function phash(e, r) {
  e |= 0;
  for (var t = 0, n = 0 | r.length; t < n; t++) {
    e = (e << 5) + e + r.charCodeAt(t);
  }
  return e;
}

function hash(e) {
  return phash(5381, e) >>> 0;
}

var a = new Set;

var s = new WeakMap;

function stringify(e) {
  if (null === e || a.has(e)) {
    return "null";
  } else if ("object" != typeof e) {
    return JSON.stringify(e) || "";
  } else if (e.toJSON) {
    return stringify(e.toJSON());
  } else if (Array.isArray(e)) {
    var r = "[";
    for (var t = 0, n = e.length; t < n; t++) {
      if (t > 0) {
        r += ",";
      }
      var o = stringify(e[t]);
      r += o.length > 0 ? o : "null";
    }
    return r += "]";
  }
  var i = Object.keys(e).sort();
  if (!i.length && e.constructor && e.constructor !== Object) {
    var u = s.get(e) || Math.random().toString(36).slice(2);
    s.set(e, u);
    return '{"__key":"' + u + '"}';
  }
  a.add(e);
  var f = "{";
  for (var c = 0, l = i.length; c < l; c++) {
    var p = i[c];
    var h = stringify(e[p]);
    if (h) {
      if (f.length > 1) {
        f += ",";
      }
      f += stringify(p) + ":" + h;
    }
  }
  a.delete(e);
  return f += "}";
}

function stringifyVariables(e) {
  a.clear();
  return stringify(e);
}

function stringifyDocument(e) {
  var r = ("string" != typeof e ? e.loc && e.loc.source.body || n(e) : e).replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
  if ("string" != typeof e) {
    var t = "definitions" in e && getOperationName(e);
    if (t) {
      r = "# " + t + "\n" + r;
    }
    if (!e.loc) {
      e.loc = {
        start: 0,
        end: r.length,
        source: {
          body: r,
          name: "gql",
          locationOffset: {
            line: 1,
            column: 1
          }
        }
      };
    }
  }
  return r;
}

var u = new Map;

function keyDocument(e) {
  var r;
  var n;
  if ("string" == typeof e) {
    r = hash(stringifyDocument(e));
    n = u.get(r) || t(e, {
      noLocation: !0
    });
  } else {
    r = e.__key || hash(stringifyDocument(e));
    n = u.get(r) || e;
  }
  if (!n.loc) {
    stringifyDocument(n);
  }
  n.__key = r;
  u.set(r, n);
  return n;
}

function createRequest(e, r) {
  if (!r) {
    r = {};
  }
  var t = keyDocument(e);
  return {
    key: phash(t.__key, stringifyVariables(r)) >>> 0,
    query: t,
    variables: r
  };
}

function getOperationName(e) {
  for (var t = 0, n = e.definitions.length; t < n; t++) {
    var o = e.definitions[t];
    if (o.kind === r.OPERATION_DEFINITION && o.name) {
      return o.name.value;
    }
  }
}

function makeResult(e, r, t) {
  return {
    operation: e,
    data: r.data,
    error: Array.isArray(r.errors) ? new i({
      graphQLErrors: r.errors,
      response: t
    }) : void 0,
    extensions: "object" == typeof r.extensions && r.extensions || void 0
  };
}

function makeErrorResult(e, r, t) {
  return {
    operation: e,
    data: void 0,
    error: new i({
      networkError: r,
      response: t
    }),
    extensions: void 0
  };
}

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = arguments[r];
      for (var n in t) {
        if (Object.prototype.hasOwnProperty.call(t, n)) {
          e[n] = t[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

function shouldUseGet(e) {
  return "query" === e.kind && !!e.context.preferGetMethod;
}

function makeFetchBody(e) {
  return {
    query: n(e.query),
    operationName: getOperationName(e.query),
    variables: e.variables || void 0,
    extensions: void 0
  };
}

function makeFetchURL(e, r) {
  var t = shouldUseGet(e);
  var n = e.context.url;
  if (!t || !r) {
    return n;
  }
  var o = [];
  if (r.operationName) {
    o.push("operationName=" + encodeURIComponent(r.operationName));
  }
  if (r.query) {
    o.push("query=" + encodeURIComponent(r.query.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()));
  }
  if (r.variables) {
    o.push("variables=" + encodeURIComponent(stringifyVariables(r.variables)));
  }
  if (r.extensions) {
    o.push("extensions=" + encodeURIComponent(stringifyVariables(r.extensions)));
  }
  return n + "?" + o.join("&");
}

function makeFetchOptions(e, r) {
  var t = shouldUseGet(e);
  var n = "function" == typeof e.context.fetchOptions ? e.context.fetchOptions() : e.context.fetchOptions || {};
  return _extends({}, n, {
    body: !t && r ? JSON.stringify(r) : void 0,
    method: t ? "GET" : "POST",
    headers: t ? n.headers : _extends({}, {
      "content-type": "application/json"
    }, n.headers)
  });
}

function makeFetchSource(e, r, t) {
  return o((function(n) {
    var o = n.next;
    var i = n.complete;
    var a = "undefined" != typeof AbortController ? new AbortController : null;
    var s = !1;
    Promise.resolve().then((function() {
      if (s) {
        return;
      } else if (a) {
        t.signal = a.signal;
      }
      return function executeFetch(e, r, t) {
        var n = !1;
        var o;
        return (e.context.fetch || fetch)(r, t).then((function(e) {
          o = e;
          n = e.status < 200 || e.status >= ("manual" === t.redirect ? 400 : 300);
          return e.json();
        })).then((function(r) {
          if (!("data" in r) && !("errors" in r)) {
            throw new Error("No Content");
          }
          return makeResult(e, r, o);
        })).catch((function(r) {
          if ("AbortError" !== r.name) {
            return makeErrorResult(e, n ? new Error(o.statusText) : r, o);
          }
        }));
      }(e, r, t);
    })).then((function(e) {
      if (!s) {
        s = !0;
        if (e) {
          o(e);
        }
        i();
      }
    }));
    return function() {
      s = !0;
      if (a) {
        a.abort();
      }
    };
  }));
}

export { i as C, _extends as _, makeErrorResult as a, makeFetchBody as b, makeFetchURL as c, makeFetchOptions as d, makeFetchSource as e, createRequest as f, stringifyVariables as g, getOperationName as h, keyDocument as k, makeResult as m, stringifyDocument as s };
//# sourceMappingURL=7685a922.mjs.map
