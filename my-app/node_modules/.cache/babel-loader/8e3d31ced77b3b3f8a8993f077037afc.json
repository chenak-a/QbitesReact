{"ast":null,"code":"import * as React from 'react';\nimport { getRawValueLabeled } from '../utils/valueUtil';\nimport { formatStrategyKeys } from '../utils/strategyUtil';\n/** Return  */\n\nexport default function useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n      getEntityByValue = _ref.getEntityByValue,\n      getEntityByKey = _ref.getEntityByKey,\n      treeConduction = _ref.treeConduction,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      conductKeyEntities = _ref.conductKeyEntities,\n      getLabelProp = _ref.getLabelProp;\n  return React.useMemo(function () {\n    var mergedRawValues = rawValues;\n\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}","map":{"version":3,"names":["React","getRawValueLabeled","formatStrategyKeys","useSelectValues","rawValues","_ref","value","getEntityByValue","getEntityByKey","treeConduction","showCheckedStrategy","conductKeyEntities","getLabelProp","useMemo","mergedRawValues","rawKeys","map","val","entity","key","data"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/rc-tree-select/es/hooks/useSelectValues.js"],"sourcesContent":["import * as React from 'react';\nimport { getRawValueLabeled } from '../utils/valueUtil';\nimport { formatStrategyKeys } from '../utils/strategyUtil';\n/** Return  */\n\nexport default function useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n      getEntityByValue = _ref.getEntityByValue,\n      getEntityByKey = _ref.getEntityByKey,\n      treeConduction = _ref.treeConduction,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      conductKeyEntities = _ref.conductKeyEntities,\n      getLabelProp = _ref.getLabelProp;\n  return React.useMemo(function () {\n    var mergedRawValues = rawValues;\n\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA;;AAEA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,IAApC,EAA0C;EACvD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;EAAA,IACIC,gBAAgB,GAAGF,IAAI,CAACE,gBAD5B;EAAA,IAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;EAAA,IAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;EAAA,IAIIC,mBAAmB,GAAGL,IAAI,CAACK,mBAJ/B;EAAA,IAKIC,kBAAkB,GAAGN,IAAI,CAACM,kBAL9B;EAAA,IAMIC,YAAY,GAAGP,IAAI,CAACO,YANxB;EAOA,OAAOZ,KAAK,CAACa,OAAN,CAAc,YAAY;IAC/B,IAAIC,eAAe,GAAGV,SAAtB;;IAEA,IAAIK,cAAJ,EAAoB;MAClB,IAAIM,OAAO,GAAGb,kBAAkB,CAACE,SAAS,CAACY,GAAV,CAAc,UAAUC,GAAV,EAAe;QAC5D,IAAIC,MAAM,GAAGX,gBAAgB,CAACU,GAAD,CAA7B;QACA,OAAOC,MAAM,GAAGA,MAAM,CAACC,GAAV,GAAgBF,GAA7B;MACD,CAHgC,CAAD,EAG5BP,mBAH4B,EAGPC,kBAHO,CAAhC;MAIAG,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAY,UAAUG,GAAV,EAAe;QAC3C,IAAID,MAAM,GAAGV,cAAc,CAACW,GAAD,CAA3B;QACA,OAAOD,MAAM,GAAGA,MAAM,CAACE,IAAP,CAAYd,KAAf,GAAuBa,GAApC;MACD,CAHiB,CAAlB;IAID;;IAED,OAAOlB,kBAAkB,CAACa,eAAD,EAAkBR,KAAlB,EAAyBC,gBAAzB,EAA2CK,YAA3C,CAAzB;EACD,CAfM,EAeJ,CAACR,SAAD,EAAYE,KAAZ,EAAmBG,cAAnB,EAAmCC,mBAAnC,EAAwDH,gBAAxD,CAfI,CAAP;AAgBD"},"metadata":{},"sourceType":"module"}