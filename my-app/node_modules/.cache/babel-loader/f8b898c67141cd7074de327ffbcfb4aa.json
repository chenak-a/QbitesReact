{"ast":null,"code":"// copied from https://github.com/d3fc/d3fc-rebind/blob/master/src/rebind.js\nfunction createReboundMethod(target, source, name) {\n  var method = source[name];\n\n  if (typeof method !== \"function\") {\n    throw new Error(\"Attempt to rebind \" + name + \" which isn't a function on the source object\");\n  }\n\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var value = method.apply(source, args);\n    return value === source ? target : value;\n  };\n}\n\nexport default function rebind(target, source) {\n  for (var _len2 = arguments.length, names = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    names[_key2 - 2] = arguments[_key2];\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var name = _step.value;\n      target[name] = createReboundMethod(target, source, name);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return target;\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,mBAAT,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,IAA7C,EAAmD;EAClD,IAAMC,SAASF,OAAOC,IAAPD,CAAf;;EACA,IAAI,OAAOE,MAAP,KAAkB,UAAtB,EAAkC;IACjC,MAAM,IAAIC,KAAJ,wBAA+BF,IAA/B,kDAAN;EACA;;EACD,OAAO,YAAa;IAAA,kCAATG,IAAS;MAATA,IAAS,MAATA,GAASC,eAATD;IAAS;;IACnB,IAAME,QAAQJ,OAAOK,KAAPL,CAAaF,MAAbE,EAAqBE,IAArBF,CAAd;IACA,OAAOI,UAAUN,MAAVM,GAAmBP,MAAnBO,GAA4BA,KAAnC;EAFD;AAIA;;AAED,eAAe,SAASE,MAAT,CAAgBT,MAAhB,EAAwBC,MAAxB,EAA0C;EAAA,mCAAPS,KAAO;IAAPA,KAAO,WAAPA,GAAOJ,gBAAPI;EAAO;;EAAA;EAAA;EAAA;;EAAA;IACxD,qBAAmBA,KAAnB,iBAAmBA,EAAnB,2GAA0B;MAAA,IAAfR,IAAe;MACzBF,OAAOE,IAAPF,IAAeD,oBAAoBC,MAApBD,EAA4BE,MAA5BF,EAAoCG,IAApCH,CAAfC;IACA;EAHuD;IAAAW;IAAAC;EAAA;IAAA;MAAA;QAAAC;MAAA;IAAA;MAAA;QAAA;MAAA;IAAA;EAAA;;EAIxD,OAAOb,MAAP;AACA","names":["createReboundMethod","target","source","name","method","Error","args","arguments","value","apply","rebind","names","_didIteratorError","_iteratorError","_iterator"],"sources":["../../../../src/lib/utils/rebind.js"],"sourcesContent":["// copied from https://github.com/d3fc/d3fc-rebind/blob/master/src/rebind.js\n\nfunction createReboundMethod(target, source, name) {\n\tconst method = source[name];\n\tif (typeof method !== \"function\") {\n\t\tthrow new Error(`Attempt to rebind ${name} which isn't a function on the source object`);\n\t}\n\treturn (...args) => {\n\t\tconst value = method.apply(source, args);\n\t\treturn value === source ? target : value;\n\t};\n}\n\nexport default function rebind(target, source, ...names) {\n\tfor (const name of names) {\n\t\ttarget[name] = createReboundMethod(target, source, name);\n\t}\n\treturn target;\n}\n"]},"metadata":{},"sourceType":"module"}