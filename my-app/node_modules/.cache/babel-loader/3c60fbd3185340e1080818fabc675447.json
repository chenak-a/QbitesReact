{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.ATR;\n\n  var source = function source(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  };\n\n  function calculator(data) {\n    var _options = options,\n        windowSize = _options.windowSize;\n    var trueRangeAlgorithm = (0, _utils.slidingWindow)().windowSize(2).source(source).undefinedValue(function (d) {\n      return d.high - d.low;\n    }) // the first TR value is simply the High minus the Low\n    .accumulator(function (values) {\n      var prev = values[0];\n      var d = values[1];\n      return Math.max(d.high - d.low, d.high - prev.close, d.low - prev.close);\n    });\n    var prevATR = void 0;\n    var atrAlgorithm = (0, _utils.slidingWindow)().skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\n    .windowSize(windowSize).accumulator(function (values) {\n      var tr = (0, _utils.last)(values);\n      var atr = (0, _utils.isDefined)(prevATR) ? (prevATR * (windowSize - 1) + tr) / windowSize : (0, _d3Array.sum)(values) / windowSize;\n      prevATR = atr;\n      return atr;\n    });\n    var newData = atrAlgorithm(trueRangeAlgorithm(data));\n    return newData;\n  }\n\n  calculator.undefinedLength = function () {\n    var _options2 = options,\n        windowSize = _options2.windowSize;\n    return windowSize - 1;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.ATR, x);\n    return calculator;\n  };\n\n  calculator.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n\n    source = x;\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _d3Array = require(\"d3-array\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nvar _utils = require(\"../utils\");","map":{"version":3,"sources":["../../../src/lib/calculator/atr.js"],"names":["options","source","open","d","high","low","close","windowSize","trueRangeAlgorithm","prev","values","Math","prevATR","atrAlgorithm","tr","atr","newData","calculator","arguments"],"mappings":"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","sourcesContent":["\n\nimport { sum } from \"d3-array\";\n\nimport { ATR as defaultOptions } from \"./defaultOptionsForComputation\";\nimport { slidingWindow, last, isDefined } from \"../utils\";\n\nexport default function() {\n\n\tlet options = defaultOptions;\n\tlet source = d => ({ open: d.open, high: d.high, low: d.low, close: d.close });\n\n\tfunction calculator(data) {\n\t\tconst { windowSize } = options;\n\n\t\tconst trueRangeAlgorithm = slidingWindow()\n\t\t\t.windowSize(2)\n\t\t\t.source(source)\n\t\t\t.undefinedValue(d => d.high - d.low) // the first TR value is simply the High minus the Low\n\t\t\t.accumulator(values => {\n\t\t\t\tconst prev = values[0];\n\t\t\t\tconst d = values[1];\n\t\t\t\treturn Math.max(d.high - d.low,\n\t\t\t\t\td.high - prev.close,\n\t\t\t\t\td.low - prev.close);\n\t\t\t});\n\n\t\tlet prevATR;\n\n\t\tconst atrAlgorithm = slidingWindow()\n\t\t\t.skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\n\t\t\t.windowSize(windowSize)\n\t\t\t.accumulator(values => {\n\t\t\t\tconst tr = last(values);\n\t\t\t\tconst atr = isDefined(prevATR)\n\t\t\t\t\t? ((prevATR * (windowSize - 1)) + tr) / windowSize\n\t\t\t\t\t: sum(values) / windowSize;\n\n\t\t\t\tprevATR = atr;\n\t\t\t\treturn atr;\n\t\t\t});\n\n\t\tconst newData = atrAlgorithm(trueRangeAlgorithm(data));\n\n\t\treturn newData;\n\t}\n\tcalculator.undefinedLength = function() {\n\t\tconst { windowSize } = options;\n\t\treturn windowSize - 1;\n\t};\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\n\tcalculator.source = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn source;\n\t\t}\n\t\tsource = x;\n\t\treturn calculator;\n\t};\n\n\treturn calculator;\n}\n"]},"metadata":{},"sourceType":"script"}