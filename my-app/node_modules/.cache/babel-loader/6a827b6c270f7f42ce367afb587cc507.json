{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return /*#__PURE__*/React.createElement(BodyRow, _extends({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/rc-table/es/Body/BodyRow.js"],"names":["_extends","_objectSpread","_slicedToArray","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","rowKey","getRowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","fixHeader","fixColumn","horizonScroll","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","additionalProps","onClick","event","_additionalProps","_len","arguments","length","args","Array","_key","apply","concat","computeRowClassName","columnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","nestRowNode","subRecord","subIndex","subKey","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport Cell from '../Cell';\r\nimport TableContext from '../context/TableContext';\r\nimport BodyContext from '../context/BodyContext';\r\nimport { getColumnsKey } from '../utils/valueUtil';\r\nimport ExpandedRow from './ExpandedRow';\r\n\r\nfunction BodyRow(props) {\r\n  var className = props.className,\r\n      style = props.style,\r\n      record = props.record,\r\n      index = props.index,\r\n      rowKey = props.rowKey,\r\n      getRowKey = props.getRowKey,\r\n      rowExpandable = props.rowExpandable,\r\n      expandedKeys = props.expandedKeys,\r\n      onRow = props.onRow,\r\n      _props$indent = props.indent,\r\n      indent = _props$indent === void 0 ? 0 : _props$indent,\r\n      RowComponent = props.rowComponent,\r\n      cellComponent = props.cellComponent,\r\n      childrenColumnName = props.childrenColumnName;\r\n\r\n  var _React$useContext = React.useContext(TableContext),\r\n      prefixCls = _React$useContext.prefixCls,\r\n      fixedInfoList = _React$useContext.fixedInfoList;\r\n\r\n  var _React$useContext2 = React.useContext(BodyContext),\r\n      fixHeader = _React$useContext2.fixHeader,\r\n      fixColumn = _React$useContext2.fixColumn,\r\n      horizonScroll = _React$useContext2.horizonScroll,\r\n      componentWidth = _React$useContext2.componentWidth,\r\n      flattenColumns = _React$useContext2.flattenColumns,\r\n      expandableType = _React$useContext2.expandableType,\r\n      expandRowByClick = _React$useContext2.expandRowByClick,\r\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\r\n      rowClassName = _React$useContext2.rowClassName,\r\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\r\n      indentSize = _React$useContext2.indentSize,\r\n      expandIcon = _React$useContext2.expandIcon,\r\n      expandedRowRender = _React$useContext2.expandedRowRender,\r\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\r\n\r\n  var _React$useState = React.useState(false),\r\n      _React$useState2 = _slicedToArray(_React$useState, 2),\r\n      expandRended = _React$useState2[0],\r\n      setExpandRended = _React$useState2[1];\r\n\r\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\r\n  React.useEffect(function () {\r\n    if (expanded) {\r\n      setExpandRended(true);\r\n    }\r\n  }, [expanded]);\r\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\r\n\r\n  var nestExpandable = expandableType === 'nest';\r\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\r\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\r\n\r\n  var additionalProps;\r\n\r\n  if (onRow) {\r\n    additionalProps = onRow(record, index);\r\n  }\r\n\r\n  var onClick = function onClick(event) {\r\n    if (expandRowByClick && mergedExpandable) {\r\n      onTriggerExpand(record, event);\r\n    }\r\n\r\n    if (additionalProps && additionalProps.onClick) {\r\n      var _additionalProps;\r\n\r\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\r\n    }\r\n  }; // ======================== Base tr row ========================\r\n\r\n\r\n  var computeRowClassName;\r\n\r\n  if (typeof rowClassName === 'string') {\r\n    computeRowClassName = rowClassName;\r\n  } else if (typeof rowClassName === 'function') {\r\n    computeRowClassName = rowClassName(record, index, indent);\r\n  }\r\n\r\n  var columnsKey = getColumnsKey(flattenColumns);\r\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\r\n    \"data-row-key\": rowKey,\r\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\r\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\r\n    onClick: onClick\r\n  }), flattenColumns.map(function (column, colIndex) {\r\n    var render = column.render,\r\n        dataIndex = column.dataIndex,\r\n        columnClassName = column.className;\r\n    var key = columnsKey[colIndex];\r\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\r\n\r\n    var appendCellNode;\r\n\r\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\r\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\r\n        style: {\r\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\r\n        },\r\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\r\n      }), expandIcon({\r\n        prefixCls: prefixCls,\r\n        expanded: expanded,\r\n        expandable: hasNestChildren,\r\n        record: record,\r\n        onExpand: onTriggerExpand\r\n      }));\r\n    }\r\n\r\n    var additionalCellProps;\r\n\r\n    if (column.onCell) {\r\n      additionalCellProps = column.onCell(record, index);\r\n    }\r\n\r\n    return /*#__PURE__*/React.createElement(Cell, _extends({\r\n      className: columnClassName,\r\n      ellipsis: column.ellipsis,\r\n      align: column.align,\r\n      component: cellComponent,\r\n      prefixCls: prefixCls,\r\n      key: key,\r\n      record: record,\r\n      index: index,\r\n      dataIndex: dataIndex,\r\n      render: render,\r\n      shouldCellUpdate: column.shouldCellUpdate\r\n    }, fixedInfo, {\r\n      appendNode: appendCellNode,\r\n      additionalProps: additionalCellProps\r\n    }));\r\n  })); // ======================== Expand Row =========================\r\n\r\n  var expandRowNode;\r\n\r\n  if (rowSupportExpand && (expandRended || expanded)) {\r\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\r\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\r\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\r\n      expanded: expanded,\r\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\r\n      prefixCls: prefixCls,\r\n      fixHeader: fixHeader,\r\n      fixColumn: fixColumn,\r\n      horizonScroll: horizonScroll,\r\n      component: RowComponent,\r\n      componentWidth: componentWidth,\r\n      cellComponent: cellComponent,\r\n      colSpan: flattenColumns.length\r\n    }, expandContent);\r\n  } // ========================= Nest Row ==========================\r\n\r\n\r\n  var nestRowNode;\r\n\r\n  if (hasNestChildren && expanded) {\r\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\r\n      var subKey = getRowKey(subRecord, subIndex);\r\n      return /*#__PURE__*/React.createElement(BodyRow, _extends({}, props, {\r\n        key: subKey,\r\n        rowKey: subKey,\r\n        record: subRecord,\r\n        recordKey: subKey,\r\n        index: subIndex,\r\n        indent: indent + 1\r\n      }));\r\n    });\r\n  }\r\n\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\r\n}\r\n\r\nBodyRow.displayName = 'BodyRow';\r\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}