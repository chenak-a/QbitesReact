{"ast":null,"code":"import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n\n  do node.height = height; while ((node = node.parent) && node.height < ++height);\n}\nexport function Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};","map":{"version":3,"names":["node_count","node_each","node_eachBefore","node_eachAfter","node_find","node_sum","node_sort","node_path","node_ancestors","node_descendants","node_leaves","node_links","node_iterator","hierarchy","data","children","Map","undefined","mapChildren","objectChildren","root","Node","node","nodes","child","childs","i","n","pop","Array","from","length","push","parent","depth","eachBefore","computeHeight","node_copy","copyData","d","isArray","value","height","prototype","constructor","count","each","eachAfter","find","sum","sort","path","ancestors","descendants","leaves","links","copy","Symbol","iterator"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/d3-hierarchy/src/hierarchy/index.js"],"sourcesContent":["import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}