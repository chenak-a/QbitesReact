{"ast":null,"code":"import { InternMap } from \"internmap\";\nexport default function (values, valueof) {\n  const counts = new InternMap();\n\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n\n  let modeValue;\n  let modeCount = 0;\n\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n\n  return modeValue;\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/d3-array/src/mode.js"],"names":["InternMap","values","valueof","counts","undefined","value","set","get","index","modeValue","modeCount","count"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;AAEA,eAAe,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACvC,QAAMC,MAAM,GAAG,IAAIH,SAAJ,EAAf;;AACA,MAAIE,OAAO,KAAKE,SAAhB,EAA2B;AACzB,SAAK,IAAIC,KAAT,IAAkBJ,MAAlB,EAA0B;AACxB,UAAII,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAIA,KAA9B,EAAqC;AACnCF,QAAAA,MAAM,CAACG,GAAP,CAAWD,KAAX,EAAkB,CAACF,MAAM,CAACI,GAAP,CAAWF,KAAX,KAAqB,CAAtB,IAA2B,CAA7C;AACD;AACF;AACF,GAND,MAMO;AACL,QAAIG,KAAK,GAAG,CAAC,CAAb;;AACA,SAAK,IAAIH,KAAT,IAAkBJ,MAAlB,EAA0B;AACxB,UAAI,CAACI,KAAK,GAAGH,OAAO,CAACG,KAAD,EAAQ,EAAEG,KAAV,EAAiBP,MAAjB,CAAhB,KAA6C,IAA7C,IAAqDI,KAAK,IAAIA,KAAlE,EAAyE;AACvEF,QAAAA,MAAM,CAACG,GAAP,CAAWD,KAAX,EAAkB,CAACF,MAAM,CAACI,GAAP,CAAWF,KAAX,KAAqB,CAAtB,IAA2B,CAA7C;AACD;AACF;AACF;;AACD,MAAII,SAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,MAAM,CAACL,KAAD,EAAQM,KAAR,CAAX,IAA6BR,MAA7B,EAAqC;AACnC,QAAIQ,KAAK,GAAGD,SAAZ,EAAuB;AACrBA,MAAAA,SAAS,GAAGC,KAAZ;AACAF,MAAAA,SAAS,GAAGJ,KAAZ;AACD;AACF;;AACD,SAAOI,SAAP;AACD","sourcesContent":["import {InternMap} from \"internmap\";\r\n\r\nexport default function(values, valueof) {\r\n  const counts = new InternMap();\r\n  if (valueof === undefined) {\r\n    for (let value of values) {\r\n      if (value != null && value >= value) {\r\n        counts.set(value, (counts.get(value) || 0) + 1);\r\n      }\r\n    }\r\n  } else {\r\n    let index = -1;\r\n    for (let value of values) {\r\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\r\n        counts.set(value, (counts.get(value) || 0) + 1);\r\n      }\r\n    }\r\n  }\r\n  let modeValue;\r\n  let modeCount = 0;\r\n  for (const [value, count] of counts) {\r\n    if (count > modeCount) {\r\n      modeCount = count;\r\n      modeValue = value;\r\n    }\r\n  }\r\n  return modeValue;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}