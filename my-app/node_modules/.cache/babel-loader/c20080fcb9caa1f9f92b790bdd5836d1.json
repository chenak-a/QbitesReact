{"ast":null,"code":"const EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\nimport { orient2d } from 'robust-predicates';\nexport default class Delaunator {\n  static from(points, getX = defaultGetX, getY = defaultGetY) {\n    const n = points.length;\n    const coords = new Float64Array(n * 2);\n\n    for (let i = 0; i < n; i++) {\n      const p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n\n    return new Delaunator(coords);\n  }\n\n  constructor(coords) {\n    const n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords; // arrays that will store the triangulation graph\n\n    const maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n\n    this._hullNext = new Uint32Array(n); // edge to next edge\n\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n    // temporary arrays for sorting points\n\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n\n  update() {\n    const {\n      coords,\n      _hullPrev: hullPrev,\n      _hullNext: hullNext,\n      _hullTri: hullTri,\n      _hullHash: hullHash\n    } = this;\n    const n = coords.length >> 1; // populate an array of point indices; calculate input data bbox\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0; i < n; i++) {\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      this._ids[i] = i;\n    }\n\n    const cx = (minX + maxX) / 2;\n    const cy = (minY + maxY) / 2;\n    let minDist = Infinity;\n    let i0, i1, i2; // pick a seed point close to the center\n\n    for (let i = 0; i < n; i++) {\n      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n\n      if (d < minDist) {\n        i0 = i;\n        minDist = d;\n      }\n    }\n\n    const i0x = coords[2 * i0];\n    const i0y = coords[2 * i0 + 1];\n    minDist = Infinity; // find the point closest to the seed\n\n    for (let i = 0; i < n; i++) {\n      if (i === i0) continue;\n      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n\n      if (d < minDist && d > 0) {\n        i1 = i;\n        minDist = d;\n      }\n    }\n\n    let i1x = coords[2 * i1];\n    let i1y = coords[2 * i1 + 1];\n    let minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n    for (let i = 0; i < n; i++) {\n      if (i === i0 || i === i1) continue;\n      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n\n      if (r < minRadius) {\n        i2 = i;\n        minRadius = r;\n      }\n    }\n\n    let i2x = coords[2 * i2];\n    let i2y = coords[2 * i2 + 1];\n\n    if (minRadius === Infinity) {\n      // order collinear points by dx (or dy if all x are identical)\n      // and return the list as a hull\n      for (let i = 0; i < n; i++) {\n        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n      }\n\n      quicksort(this._ids, this._dists, 0, n - 1);\n      const hull = new Uint32Array(n);\n      let j = 0;\n\n      for (let i = 0, d0 = -Infinity; i < n; i++) {\n        const id = this._ids[i];\n\n        if (this._dists[id] > d0) {\n          hull[j++] = id;\n          d0 = this._dists[id];\n        }\n      }\n\n      this.hull = hull.subarray(0, j);\n      this.triangles = new Uint32Array(0);\n      this.halfedges = new Uint32Array(0);\n      return;\n    } // swap the order of the seed points for counter-clockwise orientation\n\n\n    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n      const i = i1;\n      const x = i1x;\n      const y = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i;\n      i2x = x;\n      i2y = y;\n    }\n\n    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y;\n\n    for (let i = 0; i < n; i++) {\n      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n    } // sort the points by distance from the seed triangle circumcenter\n\n\n    quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull\n\n    this._hullStart = i0;\n    let hullSize = 3;\n    hullNext[i0] = hullPrev[i2] = i1;\n    hullNext[i1] = hullPrev[i0] = i2;\n    hullNext[i2] = hullPrev[i1] = i0;\n    hullTri[i0] = 0;\n    hullTri[i1] = 1;\n    hullTri[i2] = 2;\n    hullHash.fill(-1);\n    hullHash[this._hashKey(i0x, i0y)] = i0;\n    hullHash[this._hashKey(i1x, i1y)] = i1;\n    hullHash[this._hashKey(i2x, i2y)] = i2;\n    this.trianglesLen = 0;\n\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n    for (let k = 0, xp, yp; k < this._ids.length; k++) {\n      const i = this._ids[k];\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1]; // skip near-duplicate points\n\n      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n      xp = x;\n      yp = y; // skip seed triangle points\n\n      if (i === i0 || i === i1 || i === i2) continue; // find a visible edge on the convex hull using edge hash\n\n      let start = 0;\n\n      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n        start = hullHash[(key + j) % this._hashSize];\n        if (start !== -1 && start !== hullNext[start]) break;\n      }\n\n      start = hullPrev[start];\n      let e = start,\n          q;\n\n      while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n        e = q;\n\n        if (e === start) {\n          e = -1;\n          break;\n        }\n      }\n\n      if (e === -1) continue; // likely a near-duplicate point; skip it\n      // add the first triangle from the point\n\n      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n\n      hullTri[i] = this._legalize(t + 2);\n      hullTri[e] = t; // keep track of boundary triangles on the hull\n\n      hullSize++; // walk forward through the hull, adding more triangles and flipping recursively\n\n      let n = hullNext[e];\n\n      while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n        t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n        hullTri[i] = this._legalize(t + 2);\n        hullNext[n] = n; // mark as removed\n\n        hullSize--;\n        n = q;\n      } // walk backward from the other side, adding more triangles and flipping\n\n\n      if (e === start) {\n        while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n\n          this._legalize(t + 2);\n\n          hullTri[q] = t;\n          hullNext[e] = e; // mark as removed\n\n          hullSize--;\n          e = q;\n        }\n      } // update the hull indices\n\n\n      this._hullStart = hullPrev[i] = e;\n      hullNext[e] = hullPrev[n] = i;\n      hullNext[i] = n; // save the two new edges in the hash table\n\n      hullHash[this._hashKey(x, y)] = i;\n      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n    }\n\n    this.hull = new Uint32Array(hullSize);\n\n    for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n      this.hull[i] = e;\n      e = hullNext[e];\n    } // trim typed triangle mesh arrays\n\n\n    this.triangles = this._triangles.subarray(0, this.trianglesLen);\n    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n  }\n\n  _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  }\n\n  _legalize(a) {\n    const {\n      _triangles: triangles,\n      _halfedges: halfedges,\n      coords\n    } = this;\n    let i = 0;\n    let ar = 0; // recursion eliminated with a fixed-size stack\n\n    while (true) {\n      const b = halfedges[a];\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\r\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\r\n       * then do the same check/flip recursively for the new pair of triangles\r\n       *\r\n       *           pl                    pl\r\n       *          /||\\                  /  \\\r\n       *       al/ || \\bl            al/    \\a\r\n       *        /  ||  \\              /      \\\r\n       *       /  a||b  \\    flip    /___ar___\\\r\n       *     p0\\   ||   /p1   =>   p0\\---bl---/p1\r\n       *        \\  ||  /              \\      /\r\n       *       ar\\ || /br             b\\    /br\r\n       *          \\||/                  \\  /\r\n       *           pr                    pr\r\n       */\n\n      const a0 = a - a % 3;\n      ar = a0 + (a + 2) % 3;\n\n      if (b === -1) {\n        // convex hull edge\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n        continue;\n      }\n\n      const b0 = b - b % 3;\n      const al = a0 + (a + 1) % 3;\n      const bl = b0 + (b + 2) % 3;\n      const p0 = triangles[ar];\n      const pr = triangles[a];\n      const pl = triangles[al];\n      const p1 = triangles[bl];\n      const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        const hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n        if (hbl === -1) {\n          let e = this._hullStart;\n\n          do {\n            if (this._hullTri[e] === bl) {\n              this._hullTri[e] = a;\n              break;\n            }\n\n            e = this._hullPrev[e];\n          } while (e !== this._hullStart);\n        }\n\n        this._link(a, hbl);\n\n        this._link(b, halfedges[ar]);\n\n        this._link(ar, bl);\n\n        const br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input\n\n        if (i < EDGE_STACK.length) {\n          EDGE_STACK[i++] = br;\n        }\n      } else {\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n      }\n    }\n\n    return ar;\n  }\n\n  _link(a, b) {\n    this._halfedges[a] = b;\n    if (b !== -1) this._halfedges[b] = a;\n  } // add a new triangle given vertex indices and adjacent half-edge ids\n\n\n  _addTriangle(i0, i1, i2, a, b, c) {\n    const t = this.trianglesLen;\n    this._triangles[t] = i0;\n    this._triangles[t + 1] = i1;\n    this._triangles[t + 2] = i2;\n\n    this._link(t, a);\n\n    this._link(t + 1, b);\n\n    this._link(t + 2, c);\n\n    this.trianglesLen += 3;\n    return t;\n  }\n\n} // monotonically increases with real angle, but doesn't need expensive trigonometry\n\nfunction pseudoAngle(dx, dy) {\n  const p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  const dx = ax - bx;\n  const dy = ay - by;\n  return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = (ey * bl - dy * cl) * d;\n  const y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = ax + (ey * bl - dy * cl) * d;\n  const y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x,\n    y\n  };\n}\n\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = ids[i];\n      const tempDist = dists[temp];\n      let j = i - 1;\n\n      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    const median = left + right >> 1;\n    let i = left + 1;\n    let j = right;\n    swap(ids, median, i);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n    const temp = ids[i];\n    const tempDist = dists[temp];\n\n    while (true) {\n      do i++; while (dists[ids[i]] < tempDist);\n\n      do j--; while (dists[ids[j]] > tempDist);\n\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, dists, i, right);\n      quicksort(ids, dists, left, j - 1);\n    } else {\n      quicksort(ids, dists, left, j - 1);\n      quicksort(ids, dists, i, right);\n    }\n  }\n}\n\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/delaunator/index.js"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","orient2d","Delaunator","from","points","getX","defaultGetX","getY","defaultGetY","n","length","coords","Float64Array","i","p","constructor","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","center","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","xp","yp","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","px","py","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","arr","tmp"],"mappings":"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","sourcesContent":["\r\nconst EPSILON = Math.pow(2, -52);\r\nconst EDGE_STACK = new Uint32Array(512);\r\n\r\nimport {orient2d} from 'robust-predicates';\r\n\r\nexport default class Delaunator {\r\n\r\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\r\n        const n = points.length;\r\n        const coords = new Float64Array(n * 2);\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const p = points[i];\r\n            coords[2 * i] = getX(p);\r\n            coords[2 * i + 1] = getY(p);\r\n        }\r\n\r\n        return new Delaunator(coords);\r\n    }\r\n\r\n    constructor(coords) {\r\n        const n = coords.length >> 1;\r\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\r\n\r\n        this.coords = coords;\r\n\r\n        // arrays that will store the triangulation graph\r\n        const maxTriangles = Math.max(2 * n - 5, 0);\r\n        this._triangles = new Uint32Array(maxTriangles * 3);\r\n        this._halfedges = new Int32Array(maxTriangles * 3);\r\n\r\n        // temporary arrays for tracking the edges of the advancing convex hull\r\n        this._hashSize = Math.ceil(Math.sqrt(n));\r\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\r\n        this._hullNext = new Uint32Array(n); // edge to next edge\r\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\r\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\r\n\r\n        // temporary arrays for sorting points\r\n        this._ids = new Uint32Array(n);\r\n        this._dists = new Float64Array(n);\r\n\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\r\n        const n = coords.length >> 1;\r\n\r\n        // populate an array of point indices; calculate input data bbox\r\n        let minX = Infinity;\r\n        let minY = Infinity;\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n            this._ids[i] = i;\r\n        }\r\n        const cx = (minX + maxX) / 2;\r\n        const cy = (minY + maxY) / 2;\r\n\r\n        let minDist = Infinity;\r\n        let i0, i1, i2;\r\n\r\n        // pick a seed point close to the center\r\n        for (let i = 0; i < n; i++) {\r\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist) {\r\n                i0 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        const i0x = coords[2 * i0];\r\n        const i0y = coords[2 * i0 + 1];\r\n\r\n        minDist = Infinity;\r\n\r\n        // find the point closest to the seed\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0) continue;\r\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist && d > 0) {\r\n                i1 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        let i1x = coords[2 * i1];\r\n        let i1y = coords[2 * i1 + 1];\r\n\r\n        let minRadius = Infinity;\r\n\r\n        // find the third point which forms the smallest circumcircle with the first two\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0 || i === i1) continue;\r\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\r\n            if (r < minRadius) {\r\n                i2 = i;\r\n                minRadius = r;\r\n            }\r\n        }\r\n        let i2x = coords[2 * i2];\r\n        let i2y = coords[2 * i2 + 1];\r\n\r\n        if (minRadius === Infinity) {\r\n            // order collinear points by dx (or dy if all x are identical)\r\n            // and return the list as a hull\r\n            for (let i = 0; i < n; i++) {\r\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\r\n            }\r\n            quicksort(this._ids, this._dists, 0, n - 1);\r\n            const hull = new Uint32Array(n);\r\n            let j = 0;\r\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\r\n                const id = this._ids[i];\r\n                if (this._dists[id] > d0) {\r\n                    hull[j++] = id;\r\n                    d0 = this._dists[id];\r\n                }\r\n            }\r\n            this.hull = hull.subarray(0, j);\r\n            this.triangles = new Uint32Array(0);\r\n            this.halfedges = new Uint32Array(0);\r\n            return;\r\n        }\r\n\r\n        // swap the order of the seed points for counter-clockwise orientation\r\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\r\n            const i = i1;\r\n            const x = i1x;\r\n            const y = i1y;\r\n            i1 = i2;\r\n            i1x = i2x;\r\n            i1y = i2y;\r\n            i2 = i;\r\n            i2x = x;\r\n            i2y = y;\r\n        }\r\n\r\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\r\n        this._cx = center.x;\r\n        this._cy = center.y;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\r\n        }\r\n\r\n        // sort the points by distance from the seed triangle circumcenter\r\n        quicksort(this._ids, this._dists, 0, n - 1);\r\n\r\n        // set up the seed triangle as the starting hull\r\n        this._hullStart = i0;\r\n        let hullSize = 3;\r\n\r\n        hullNext[i0] = hullPrev[i2] = i1;\r\n        hullNext[i1] = hullPrev[i0] = i2;\r\n        hullNext[i2] = hullPrev[i1] = i0;\r\n\r\n        hullTri[i0] = 0;\r\n        hullTri[i1] = 1;\r\n        hullTri[i2] = 2;\r\n\r\n        hullHash.fill(-1);\r\n        hullHash[this._hashKey(i0x, i0y)] = i0;\r\n        hullHash[this._hashKey(i1x, i1y)] = i1;\r\n        hullHash[this._hashKey(i2x, i2y)] = i2;\r\n\r\n        this.trianglesLen = 0;\r\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\r\n\r\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\r\n            const i = this._ids[k];\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n\r\n            // skip near-duplicate points\r\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\r\n            xp = x;\r\n            yp = y;\r\n\r\n            // skip seed triangle points\r\n            if (i === i0 || i === i1 || i === i2) continue;\r\n\r\n            // find a visible edge on the convex hull using edge hash\r\n            let start = 0;\r\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\r\n                start = hullHash[(key + j) % this._hashSize];\r\n                if (start !== -1 && start !== hullNext[start]) break;\r\n            }\r\n\r\n            start = hullPrev[start];\r\n            let e = start, q;\r\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\r\n                e = q;\r\n                if (e === start) {\r\n                    e = -1;\r\n                    break;\r\n                }\r\n            }\r\n            if (e === -1) continue; // likely a near-duplicate point; skip it\r\n\r\n            // add the first triangle from the point\r\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\r\n\r\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\r\n            hullTri[i] = this._legalize(t + 2);\r\n            hullTri[e] = t; // keep track of boundary triangles on the hull\r\n            hullSize++;\r\n\r\n            // walk forward through the hull, adding more triangles and flipping recursively\r\n            let n = hullNext[e];\r\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\r\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\r\n                hullTri[i] = this._legalize(t + 2);\r\n                hullNext[n] = n; // mark as removed\r\n                hullSize--;\r\n                n = q;\r\n            }\r\n\r\n            // walk backward from the other side, adding more triangles and flipping\r\n            if (e === start) {\r\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\r\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\r\n                    this._legalize(t + 2);\r\n                    hullTri[q] = t;\r\n                    hullNext[e] = e; // mark as removed\r\n                    hullSize--;\r\n                    e = q;\r\n                }\r\n            }\r\n\r\n            // update the hull indices\r\n            this._hullStart = hullPrev[i] = e;\r\n            hullNext[e] = hullPrev[n] = i;\r\n            hullNext[i] = n;\r\n\r\n            // save the two new edges in the hash table\r\n            hullHash[this._hashKey(x, y)] = i;\r\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\r\n        }\r\n\r\n        this.hull = new Uint32Array(hullSize);\r\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\r\n            this.hull[i] = e;\r\n            e = hullNext[e];\r\n        }\r\n\r\n        // trim typed triangle mesh arrays\r\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\r\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\r\n    }\r\n\r\n    _hashKey(x, y) {\r\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\r\n    }\r\n\r\n    _legalize(a) {\r\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\r\n\r\n        let i = 0;\r\n        let ar = 0;\r\n\r\n        // recursion eliminated with a fixed-size stack\r\n        while (true) {\r\n            const b = halfedges[a];\r\n\r\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\r\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\r\n             * then do the same check/flip recursively for the new pair of triangles\r\n             *\r\n             *           pl                    pl\r\n             *          /||\\                  /  \\\r\n             *       al/ || \\bl            al/    \\a\r\n             *        /  ||  \\              /      \\\r\n             *       /  a||b  \\    flip    /___ar___\\\r\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\r\n             *        \\  ||  /              \\      /\r\n             *       ar\\ || /br             b\\    /br\r\n             *          \\||/                  \\  /\r\n             *           pr                    pr\r\n             */\r\n            const a0 = a - a % 3;\r\n            ar = a0 + (a + 2) % 3;\r\n\r\n            if (b === -1) { // convex hull edge\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n                continue;\r\n            }\r\n\r\n            const b0 = b - b % 3;\r\n            const al = a0 + (a + 1) % 3;\r\n            const bl = b0 + (b + 2) % 3;\r\n\r\n            const p0 = triangles[ar];\r\n            const pr = triangles[a];\r\n            const pl = triangles[al];\r\n            const p1 = triangles[bl];\r\n\r\n            const illegal = inCircle(\r\n                coords[2 * p0], coords[2 * p0 + 1],\r\n                coords[2 * pr], coords[2 * pr + 1],\r\n                coords[2 * pl], coords[2 * pl + 1],\r\n                coords[2 * p1], coords[2 * p1 + 1]);\r\n\r\n            if (illegal) {\r\n                triangles[a] = p1;\r\n                triangles[b] = p0;\r\n\r\n                const hbl = halfedges[bl];\r\n\r\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\r\n                if (hbl === -1) {\r\n                    let e = this._hullStart;\r\n                    do {\r\n                        if (this._hullTri[e] === bl) {\r\n                            this._hullTri[e] = a;\r\n                            break;\r\n                        }\r\n                        e = this._hullPrev[e];\r\n                    } while (e !== this._hullStart);\r\n                }\r\n                this._link(a, hbl);\r\n                this._link(b, halfedges[ar]);\r\n                this._link(ar, bl);\r\n\r\n                const br = b0 + (b + 1) % 3;\r\n\r\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\r\n                if (i < EDGE_STACK.length) {\r\n                    EDGE_STACK[i++] = br;\r\n                }\r\n            } else {\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n            }\r\n        }\r\n\r\n        return ar;\r\n    }\r\n\r\n    _link(a, b) {\r\n        this._halfedges[a] = b;\r\n        if (b !== -1) this._halfedges[b] = a;\r\n    }\r\n\r\n    // add a new triangle given vertex indices and adjacent half-edge ids\r\n    _addTriangle(i0, i1, i2, a, b, c) {\r\n        const t = this.trianglesLen;\r\n\r\n        this._triangles[t] = i0;\r\n        this._triangles[t + 1] = i1;\r\n        this._triangles[t + 2] = i2;\r\n\r\n        this._link(t, a);\r\n        this._link(t + 1, b);\r\n        this._link(t + 2, c);\r\n\r\n        this.trianglesLen += 3;\r\n\r\n        return t;\r\n    }\r\n}\r\n\r\n// monotonically increases with real angle, but doesn't need expensive trigonometry\r\nfunction pseudoAngle(dx, dy) {\r\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\r\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\r\n}\r\n\r\nfunction dist(ax, ay, bx, by) {\r\n    const dx = ax - bx;\r\n    const dy = ay - by;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\r\n    const dx = ax - px;\r\n    const dy = ay - py;\r\n    const ex = bx - px;\r\n    const ey = by - py;\r\n    const fx = cx - px;\r\n    const fy = cy - py;\r\n\r\n    const ap = dx * dx + dy * dy;\r\n    const bp = ex * ex + ey * ey;\r\n    const cp = fx * fx + fy * fy;\r\n\r\n    return dx * (ey * cp - bp * fy) -\r\n           dy * (ex * cp - bp * fx) +\r\n           ap * (ex * fy - ey * fx) < 0;\r\n}\r\n\r\nfunction circumradius(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = (ey * bl - dy * cl) * d;\r\n    const y = (dx * cl - ex * bl) * d;\r\n\r\n    return x * x + y * y;\r\n}\r\n\r\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = ax + (ey * bl - dy * cl) * d;\r\n    const y = ay + (dx * cl - ex * bl) * d;\r\n\r\n    return {x, y};\r\n}\r\n\r\nfunction quicksort(ids, dists, left, right) {\r\n    if (right - left <= 20) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            const temp = ids[i];\r\n            const tempDist = dists[temp];\r\n            let j = i - 1;\r\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\r\n            ids[j + 1] = temp;\r\n        }\r\n    } else {\r\n        const median = (left + right) >> 1;\r\n        let i = left + 1;\r\n        let j = right;\r\n        swap(ids, median, i);\r\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\r\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\r\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\r\n\r\n        const temp = ids[i];\r\n        const tempDist = dists[temp];\r\n        while (true) {\r\n            do i++; while (dists[ids[i]] < tempDist);\r\n            do j--; while (dists[ids[j]] > tempDist);\r\n            if (j < i) break;\r\n            swap(ids, i, j);\r\n        }\r\n        ids[left + 1] = ids[j];\r\n        ids[j] = temp;\r\n\r\n        if (right - i + 1 >= j - left) {\r\n            quicksort(ids, dists, i, right);\r\n            quicksort(ids, dists, left, j - 1);\r\n        } else {\r\n            quicksort(ids, dists, left, j - 1);\r\n            quicksort(ids, dists, i, right);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    const tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultGetX(p) {\r\n    return p[0];\r\n}\r\nfunction defaultGetY(p) {\r\n    return p[1];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}