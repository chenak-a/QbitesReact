{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { extent as d3Extent, min, max } from \"d3-array\";\nimport { head, last, isDefined, isNotDefined, clearCanvas, shallowEqual, identity, noop, functor, getLogger } from \"./utils\";\n/* eslint-disable no-unused-vars */\n\nimport { mouseBasedZoomAnchor, lastVisibleItemBasedZoomAnchor, rightDomainBasedZoomAnchor } from \"./utils/zoomBehavior\";\n/* eslint-enable no-unused-vars */\n\nimport { getNewChartConfig, getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem } from \"./utils/ChartDataUtil\";\nimport EventCapture from \"./EventCapture\";\nimport CanvasContainer from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\nvar log = getLogger(\"ChartCanvas\");\nvar CANDIDATES_FOR_RESET = [\"seriesName\"];\n\nfunction shouldResetChart(thisProps, nextProps) {\n  return !CANDIDATES_FOR_RESET.every(function (key) {\n    var result = shallowEqual(thisProps[key], nextProps[key]); // console.log(key, result);\n\n    return result;\n  });\n}\n\nfunction getCursorStyle() {\n  var tooltipStyle = \"\\n\\t.react-stockcharts-grabbing-cursor {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: -moz-grabbing;\\n\\t\\tcursor: -webkit-grabbing;\\n\\t\\tcursor: grabbing;\\n\\t}\\n\\t.react-stockcharts-crosshair-cursor {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: crosshair;\\n\\t}\\n\\t.react-stockcharts-tooltip-hover {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-avoid-interaction {\\n\\t\\tpointer-events: none;\\n\\t}\\n\\t.react-stockcharts-enable-interaction {\\n\\t\\tpointer-events: all;\\n\\t}\\n\\t.react-stockcharts-tooltip {\\n\\t\\tpointer-events: all;\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-default-cursor {\\n\\t\\tcursor: default;\\n\\t}\\n\\t.react-stockcharts-move-cursor {\\n\\t\\tcursor: move;\\n\\t}\\n\\t.react-stockcharts-pointer-cursor {\\n\\t\\tcursor: pointer;\\n\\t}\\n\\t.react-stockcharts-ns-resize-cursor {\\n\\t\\tcursor: ns-resize;\\n\\t}\\n\\t.react-stockcharts-ew-resize-cursor {\\n\\t\\tcursor: ew-resize;\\n\\t}\";\n  return React.createElement(\"style\", {\n    type: \"text/css\"\n  }, tooltipStyle);\n}\n\nfunction getDimensions(props) {\n  return {\n    height: props.height - props.margin.top - props.margin.bottom,\n    width: props.width - props.margin.left - props.margin.right\n  };\n}\n\nfunction getXScaleDirection(flipXScale) {\n  return flipXScale ? -1 : 1;\n}\n\nfunction calculateFullData(props) {\n  var fullData = props.data,\n      plotFull = props.plotFull,\n      xScale = props.xScale,\n      clamp = props.clamp,\n      pointsPerPxThreshold = props.pointsPerPxThreshold,\n      flipXScale = props.flipXScale;\n  var xAccessor = props.xAccessor,\n      displayXAccessor = props.displayXAccessor,\n      minPointsPerPxThreshold = props.minPointsPerPxThreshold;\n  var useWholeData = isDefined(plotFull) ? plotFull : xAccessor === identity;\n\n  var _evaluator = evaluator({\n    xScale: xScale,\n    useWholeData: useWholeData,\n    clamp: clamp,\n    pointsPerPxThreshold: pointsPerPxThreshold,\n    minPointsPerPxThreshold: minPointsPerPxThreshold,\n    flipXScale: flipXScale\n  }),\n      filterData = _evaluator.filterData;\n\n  return {\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor || xAccessor,\n    xScale: xScale.copy(),\n    fullData: fullData,\n    filterData: filterData\n  };\n}\n\nfunction resetChart(props) {\n  var firstCalculation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!firstCalculation) log(\"CHART RESET\");\n  }\n\n  var state = calculateState(props);\n  var xAccessor = state.xAccessor,\n      displayXAccessor = state.displayXAccessor,\n      fullData = state.fullData;\n  var initialPlotData = state.plotData,\n      xScale = state.xScale;\n  var postCalculator = props.postCalculator,\n      children = props.children;\n  var plotData = postCalculator(initialPlotData);\n  var dimensions = getDimensions(props);\n  var chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children), {\n    plotData: plotData,\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData\n  }, xScale.domain());\n  return _extends({}, state, {\n    xScale: xScale,\n    plotData: plotData,\n    chartConfig: chartConfig\n  });\n}\n\nfunction updateChart(newState, initialXScale, props, lastItemWasVisible, initialChartConfig) {\n  var fullData = newState.fullData,\n      xScale = newState.xScale,\n      xAccessor = newState.xAccessor,\n      displayXAccessor = newState.displayXAccessor,\n      filterData = newState.filterData;\n  var lastItem = last(fullData);\n\n  var _initialXScale$domain = initialXScale.domain(),\n      _initialXScale$domain2 = _slicedToArray(_initialXScale$domain, 2),\n      start = _initialXScale$domain2[0],\n      end = _initialXScale$domain2[1];\n\n  if (process.env.NODE_ENV !== \"production\") {\n    log(\"TRIVIAL CHANGE\");\n  }\n\n  var postCalculator = props.postCalculator,\n      children = props.children,\n      padding = props.padding,\n      flipXScale = props.flipXScale;\n  var maintainPointsPerPixelOnResize = props.maintainPointsPerPixelOnResize;\n  var direction = getXScaleDirection(flipXScale);\n  var dimensions = getDimensions(props);\n  var updatedXScale = setXRange(xScale, dimensions, padding, direction); // console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n\n  var initialPlotData = void 0;\n\n  if (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n    // resize comes here...\n    var _initialXScale$range = initialXScale.range(),\n        _initialXScale$range2 = _slicedToArray(_initialXScale$range, 2),\n        rangeStart = _initialXScale$range2[0],\n        rangeEnd = _initialXScale$range2[1];\n\n    var _updatedXScale$range = updatedXScale.range(),\n        _updatedXScale$range2 = _slicedToArray(_updatedXScale$range, 2),\n        newRangeStart = _updatedXScale$range2[0],\n        newRangeEnd = _updatedXScale$range2[1];\n\n    var newDomainExtent = (newRangeEnd - newRangeStart) / (rangeEnd - rangeStart) * (end - start);\n    var newStart = maintainPointsPerPixelOnResize ? end - newDomainExtent : start;\n    var lastItemX = initialXScale(xAccessor(lastItem)); // console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n\n    var response = filterData(fullData, [newStart, end], xAccessor, updatedXScale, {\n      fallbackStart: start,\n      fallbackEnd: {\n        lastItem: lastItem,\n        lastItemX: lastItemX\n      }\n    });\n    initialPlotData = response.plotData;\n    updatedXScale.domain(response.domain); // console.log(\"HERE!!!!!\", start, end);\n  } else if (lastItemWasVisible && end < xAccessor(lastItem)) {\n    // this is when a new item is added and last item was visible\n    // so slide over and show the new item also\n    // get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n    var dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n\n    var _initialXScale$range$ = initialXScale.range().map(function (x) {\n      return x + dx;\n    }).map(initialXScale.invert),\n        _initialXScale$range$2 = _slicedToArray(_initialXScale$range$, 2),\n        _newStart = _initialXScale$range$2[0],\n        newEnd = _initialXScale$range$2[1];\n\n    var _response = filterData(fullData, [_newStart, newEnd], xAccessor, updatedXScale);\n\n    initialPlotData = _response.plotData;\n    updatedXScale.domain(_response.domain); // if last item was visible, then shift\n  } // plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n\n\n  var plotData = postCalculator(initialPlotData);\n  var chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children, initialChartConfig), {\n    plotData: plotData,\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData\n  }, updatedXScale.domain());\n  return {\n    xScale: updatedXScale,\n    xAccessor: xAccessor,\n    chartConfig: chartConfig,\n    plotData: plotData,\n    fullData: fullData,\n    filterData: filterData\n  };\n}\n\nfunction calculateState(props) {\n  var inputXAccesor = props.xAccessor,\n      xExtentsProp = props.xExtents,\n      data = props.data,\n      padding = props.padding,\n      flipXScale = props.flipXScale;\n\n  if (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n    for (var i = 1; i < data.length; i++) {\n      var prev = data[i - 1];\n      var curr = data[i];\n\n      if (inputXAccesor(prev) > inputXAccesor(curr)) {\n        throw new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n      }\n    }\n  }\n\n  var direction = getXScaleDirection(flipXScale);\n  var dimensions = getDimensions(props);\n  var extent = typeof xExtentsProp === \"function\" ? xExtentsProp(data) : d3Extent(xExtentsProp.map(function (d) {\n    return functor(d);\n  }).map(function (each) {\n    return each(data, inputXAccesor);\n  }));\n\n  var _calculateFullData = calculateFullData(props),\n      xAccessor = _calculateFullData.xAccessor,\n      displayXAccessor = _calculateFullData.displayXAccessor,\n      xScale = _calculateFullData.xScale,\n      fullData = _calculateFullData.fullData,\n      filterData = _calculateFullData.filterData;\n\n  var updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n  var _filterData = filterData(fullData, extent, inputXAccesor, updatedXScale),\n      plotData = _filterData.plotData,\n      domain = _filterData.domain;\n\n  if (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n    throw new Error(\"Showing \" + plotData.length + \" datapoints, review the 'xExtents' prop of ChartCanvas\");\n  }\n\n  return {\n    plotData: plotData,\n    xScale: updatedXScale.domain(domain),\n    xAccessor: xAccessor,\n    displayXAccessor: displayXAccessor,\n    fullData: fullData,\n    filterData: filterData\n  };\n}\n\nfunction setXRange(xScale, dimensions, padding) {\n  var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  if (xScale.rangeRoundPoints) {\n    if (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n    xScale.rangeRoundPoints([0, dimensions.width], padding);\n  } else if (xScale.padding) {\n    if (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n    xScale.range([0, dimensions.width]);\n    xScale.padding(padding / 2);\n  } else {\n    var _ref = isNaN(padding) ? padding : {\n      left: padding,\n      right: padding\n    },\n        left = _ref.left,\n        right = _ref.right;\n\n    if (direction > 0) {\n      xScale.range([left, dimensions.width - right]);\n    } else {\n      xScale.range([dimensions.width - right, left]);\n    }\n  }\n\n  return xScale;\n}\n\nfunction pinchCoordinates(pinch) {\n  var touch1Pos = pinch.touch1Pos,\n      touch2Pos = pinch.touch2Pos;\n  return {\n    topLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n    bottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])]\n  };\n}\n\nvar ChartCanvas = function (_Component) {\n  _inherits(ChartCanvas, _Component);\n\n  function ChartCanvas() {\n    _classCallCheck(this, ChartCanvas);\n\n    var _this = _possibleConstructorReturn(this, (ChartCanvas.__proto__ || Object.getPrototypeOf(ChartCanvas)).call(this));\n\n    _this.getDataInfo = _this.getDataInfo.bind(_this);\n    _this.getCanvasContexts = _this.getCanvasContexts.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleZoom = _this.handleZoom.bind(_this);\n    _this.handlePinchZoom = _this.handlePinchZoom.bind(_this);\n    _this.handlePinchZoomEnd = _this.handlePinchZoomEnd.bind(_this);\n    _this.handlePan = _this.handlePan.bind(_this);\n    _this.handlePanEnd = _this.handlePanEnd.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleDoubleClick = _this.handleDoubleClick.bind(_this);\n    _this.handleContextMenu = _this.handleContextMenu.bind(_this);\n    _this.handleDragStart = _this.handleDragStart.bind(_this);\n    _this.handleDrag = _this.handleDrag.bind(_this);\n    _this.handleDragEnd = _this.handleDragEnd.bind(_this);\n    _this.panHelper = _this.panHelper.bind(_this);\n    _this.pinchZoomHelper = _this.pinchZoomHelper.bind(_this);\n    _this.xAxisZoom = _this.xAxisZoom.bind(_this);\n    _this.yAxisZoom = _this.yAxisZoom.bind(_this);\n    _this.resetYDomain = _this.resetYDomain.bind(_this);\n    _this.calculateStateForDomain = _this.calculateStateForDomain.bind(_this);\n    _this.generateSubscriptionId = _this.generateSubscriptionId.bind(_this);\n    _this.draw = _this.draw.bind(_this);\n    _this.redraw = _this.redraw.bind(_this);\n    _this.getAllPanConditions = _this.getAllPanConditions.bind(_this);\n    _this.subscriptions = [];\n    _this.subscribe = _this.subscribe.bind(_this);\n    _this.unsubscribe = _this.unsubscribe.bind(_this);\n    _this.amIOnTop = _this.amIOnTop.bind(_this);\n    _this.saveEventCaptureNode = _this.saveEventCaptureNode.bind(_this);\n    _this.saveCanvasContainerNode = _this.saveCanvasContainerNode.bind(_this);\n    _this.setCursorClass = _this.setCursorClass.bind(_this);\n    _this.getMutableState = _this.getMutableState.bind(_this); // this.canvasDrawCallbackList = [];\n\n    _this.interactiveState = [];\n    _this.panInProgress = false;\n    _this.state = {};\n    _this.mutableState = {};\n    _this.lastSubscriptionId = 0;\n    return _this;\n  }\n\n  _createClass(ChartCanvas, [{\n    key: \"saveEventCaptureNode\",\n    value: function saveEventCaptureNode(node) {\n      this.eventCaptureNode = node;\n    }\n  }, {\n    key: \"saveCanvasContainerNode\",\n    value: function saveCanvasContainerNode(node) {\n      this.canvasContainerNode = node;\n    }\n  }, {\n    key: \"getMutableState\",\n    value: function getMutableState() {\n      return this.mutableState;\n    }\n  }, {\n    key: \"getDataInfo\",\n    value: function getDataInfo() {\n      return _extends({}, this.state, {\n        fullData: this.fullData\n      });\n    }\n  }, {\n    key: \"getCanvasContexts\",\n    value: function getCanvasContexts() {\n      if (this.canvasContainerNode) {\n        return this.canvasContainerNode.getCanvasContexts();\n      }\n    }\n  }, {\n    key: \"generateSubscriptionId\",\n    value: function generateSubscriptionId() {\n      this.lastSubscriptionId++;\n      return this.lastSubscriptionId;\n    }\n  }, {\n    key: \"clearBothCanvas\",\n    value: function clearBothCanvas() {\n      var canvases = this.getCanvasContexts();\n\n      if (canvases && canvases.axes) {\n        clearCanvas([canvases.axes, // canvases.hover,\n        canvases.mouseCoord], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"clearMouseCanvas\",\n    value: function clearMouseCanvas() {\n      var canvases = this.getCanvasContexts();\n\n      if (canvases && canvases.mouseCoord) {\n        clearCanvas([canvases.mouseCoord], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"clearThreeCanvas\",\n    value: function clearThreeCanvas() {\n      var canvases = this.getCanvasContexts();\n\n      if (canvases && canvases.axes) {\n        clearCanvas([canvases.axes, // canvases.hover,\n        canvases.mouseCoord, canvases.bg], this.props.ratio);\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, rest) {\n      var _rest$getPanCondition = rest.getPanConditions,\n          getPanConditions = _rest$getPanCondition === undefined ? functor({\n        draggable: false,\n        panEnabled: true\n      }) : _rest$getPanCondition;\n      this.subscriptions = this.subscriptions.concat(_extends({\n        id: id\n      }, rest, {\n        getPanConditions: getPanConditions\n      }));\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      this.subscriptions = this.subscriptions.filter(function (each) {\n        return each.id !== id;\n      });\n    }\n  }, {\n    key: \"getAllPanConditions\",\n    value: function getAllPanConditions() {\n      return this.subscriptions.map(function (each) {\n        return each.getPanConditions();\n      });\n    }\n  }, {\n    key: \"setCursorClass\",\n    value: function setCursorClass(className) {\n      if (this.eventCaptureNode != null) {\n        this.eventCaptureNode.setCursorClass(className);\n      }\n    }\n  }, {\n    key: \"amIOnTop\",\n    value: function amIOnTop(id) {\n      var dragableComponents = this.subscriptions.filter(function (each) {\n        return each.getPanConditions().draggable;\n      });\n      return dragableComponents.length > 0 && last(dragableComponents).id === id;\n    }\n  }, {\n    key: \"handleContextMenu\",\n    value: function handleContextMenu(mouseXY, e) {\n      var _state = this.state,\n          xAccessor = _state.xAccessor,\n          chartConfig = _state.chartConfig,\n          plotData = _state.plotData,\n          xScale = _state.xScale;\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      this.triggerEvent(\"contextmenu\", {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      }, e);\n    }\n  }, {\n    key: \"calculateStateForDomain\",\n    value: function calculateStateForDomain(newDomain) {\n      var _state2 = this.state,\n          xAccessor = _state2.xAccessor,\n          displayXAccessor = _state2.displayXAccessor,\n          initialXScale = _state2.xScale,\n          initialChartConfig = _state2.chartConfig,\n          initialPlotData = _state2.plotData;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator;\n\n      var _filterData2 = filterData(fullData, newDomain, xAccessor, initialXScale, {\n        currentPlotData: initialPlotData,\n        currentDomain: initialXScale.domain()\n      }),\n          beforePlotData = _filterData2.plotData,\n          domain = _filterData2.domain;\n\n      var plotData = postCalculator(beforePlotData);\n      var updatedScale = initialXScale.copy().domain(domain);\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain());\n      return {\n        xScale: updatedScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      };\n    }\n  }, {\n    key: \"pinchZoomHelper\",\n    value: function pinchZoomHelper(initialPinch, finalPinch) {\n      var initialPinchXScale = initialPinch.xScale;\n      var _state3 = this.state,\n          initialXScale = _state3.xScale,\n          initialChartConfig = _state3.chartConfig,\n          initialPlotData = _state3.plotData,\n          xAccessor = _state3.xAccessor,\n          displayXAccessor = _state3.displayXAccessor;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator;\n\n      var _pinchCoordinates = pinchCoordinates(initialPinch),\n          iTL = _pinchCoordinates.topLeft,\n          iBR = _pinchCoordinates.bottomRight;\n\n      var _pinchCoordinates2 = pinchCoordinates(finalPinch),\n          fTL = _pinchCoordinates2.topLeft,\n          fBR = _pinchCoordinates2.bottomRight;\n\n      var e = initialPinchXScale.range()[1];\n      var xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n      var yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / (e - iTL[0] - (e - iBR[0])));\n      var x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n      var y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n      var newDomain = [x, y].map(initialPinchXScale.invert); // var domainR = initial.right + right;\n\n      var _filterData3 = filterData(fullData, newDomain, xAccessor, initialPinchXScale, {\n        currentPlotData: initialPlotData,\n        currentDomain: initialXScale.domain()\n      }),\n          beforePlotData = _filterData3.plotData,\n          domain = _filterData3.domain;\n\n      var plotData = postCalculator(beforePlotData);\n      var updatedScale = initialXScale.copy().domain(domain);\n      var mouseXY = finalPinch.touch1Pos;\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain());\n      var currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n      return {\n        chartConfig: chartConfig,\n        xScale: updatedScale,\n        plotData: plotData,\n        mouseXY: mouseXY,\n        currentItem: currentItem\n      };\n    }\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      this.eventCaptureNode.cancelDrag();\n      this.triggerEvent(\"dragcancel\");\n    }\n  }, {\n    key: \"handlePinchZoom\",\n    value: function handlePinchZoom(initialPinch, finalPinch, e) {\n      var _this2 = this;\n\n      if (!this.waitingForPinchZoomAnimationFrame) {\n        this.waitingForPinchZoomAnimationFrame = true;\n        var state = this.pinchZoomHelper(initialPinch, finalPinch);\n        this.triggerEvent(\"pinchzoom\", state, e);\n        this.finalPinch = finalPinch;\n        requestAnimationFrame(function () {\n          _this2.clearBothCanvas();\n\n          _this2.draw({\n            trigger: \"pinchzoom\"\n          });\n\n          _this2.waitingForPinchZoomAnimationFrame = false;\n        });\n      }\n    }\n  }, {\n    key: \"handlePinchZoomEnd\",\n    value: function handlePinchZoomEnd(initialPinch, e) {\n      var xAccessor = this.state.xAccessor;\n\n      if (this.finalPinch) {\n        var state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n        var xScale = state.xScale;\n        this.triggerEvent(\"pinchzoom\", state, e);\n        this.finalPinch = null;\n        this.clearThreeCanvas();\n        var fullData = this.fullData;\n        var firstItem = head(fullData);\n        var start = head(xScale.domain());\n        var end = xAccessor(firstItem);\n        var onLoadMore = this.props.onLoadMore;\n        this.setState(state, function () {\n          if (start < end) {\n            onLoadMore(start, end);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"handleZoom\",\n    value: function handleZoom(zoomDirection, mouseXY, e) {\n      if (this.panInProgress) return; // console.log(\"zoomDirection \", zoomDirection, \" mouseXY \", mouseXY);\n\n      var _state4 = this.state,\n          xAccessor = _state4.xAccessor,\n          initialXScale = _state4.xScale,\n          initialPlotData = _state4.plotData;\n      var _props = this.props,\n          zoomMultiplier = _props.zoomMultiplier,\n          zoomAnchor = _props.zoomAnchor;\n      var fullData = this.fullData;\n      var item = zoomAnchor({\n        xScale: initialXScale,\n        xAccessor: xAccessor,\n        mouseXY: mouseXY,\n        plotData: initialPlotData,\n        fullData: fullData\n      });\n      var cx = initialXScale(item);\n      var c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n      var newDomain = initialXScale.range().map(function (x) {\n        return cx + (x - cx) * c;\n      }).map(initialXScale.invert);\n\n      var _calculateStateForDom = this.calculateStateForDomain(newDomain),\n          xScale = _calculateStateForDom.xScale,\n          plotData = _calculateStateForDom.plotData,\n          chartConfig = _calculateStateForDom.chartConfig;\n\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      this.clearThreeCanvas();\n      var firstItem = head(fullData);\n      var start = head(xScale.domain());\n      var end = xAccessor(firstItem);\n      var onLoadMore = this.props.onLoadMore;\n      this.mutableState = {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      };\n      this.triggerEvent(\"zoom\", {\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        mouseXY: mouseXY,\n        currentCharts: currentCharts,\n        currentItem: currentItem,\n        show: true\n      }, e);\n      this.setState({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      }, function () {\n        if (start < end) {\n          onLoadMore(start, end);\n        }\n      });\n    }\n  }, {\n    key: \"xAxisZoom\",\n    value: function xAxisZoom(newDomain) {\n      var _calculateStateForDom2 = this.calculateStateForDomain(newDomain),\n          xScale = _calculateStateForDom2.xScale,\n          plotData = _calculateStateForDom2.plotData,\n          chartConfig = _calculateStateForDom2.chartConfig;\n\n      this.clearThreeCanvas();\n      var xAccessor = this.state.xAccessor;\n      var fullData = this.fullData;\n      var firstItem = head(fullData);\n      var start = head(xScale.domain());\n      var end = xAccessor(firstItem);\n      var onLoadMore = this.props.onLoadMore;\n      this.setState({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      }, function () {\n        if (start < end) onLoadMore(start, end);\n      });\n    }\n  }, {\n    key: \"yAxisZoom\",\n    value: function yAxisZoom(chartId, newDomain) {\n      this.clearThreeCanvas();\n      var initialChartConfig = this.state.chartConfig;\n      var chartConfig = initialChartConfig.map(function (each) {\n        if (each.id === chartId) {\n          var yScale = each.yScale;\n          return _extends({}, each, {\n            yScale: yScale.copy().domain(newDomain),\n            yPanEnabled: true\n          });\n        } else {\n          return each;\n        }\n      });\n      this.setState({\n        chartConfig: chartConfig\n      });\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(type, props, e) {\n      var _this3 = this; // console.log(\"triggering ->\", type);\n\n\n      this.subscriptions.forEach(function (each) {\n        var state = _extends({}, _this3.state, {\n          fullData: _this3.fullData,\n          subscriptions: _this3.subscriptions\n        });\n\n        each.listener(type, props, state, e);\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(props) {\n      this.subscriptions.forEach(function (each) {\n        if (isDefined(each.draw)) each.draw(props);\n      });\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clearThreeCanvas();\n      this.draw({\n        force: true\n      });\n    }\n  }, {\n    key: \"panHelper\",\n    value: function panHelper(mouseXY, initialXScale, _ref2, chartsToPan) {\n      var dx = _ref2.dx,\n          dy = _ref2.dy;\n      var _state5 = this.state,\n          xAccessor = _state5.xAccessor,\n          displayXAccessor = _state5.displayXAccessor,\n          initialChartConfig = _state5.chartConfig;\n      var filterData = this.state.filterData;\n      var fullData = this.fullData;\n      var postCalculator = this.props.postCalculator; // console.log(dx, dy);\n\n      if (isNotDefined(initialXScale.invert)) throw new Error(\"xScale provided does not have an invert() method.\" + \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n      var newDomain = initialXScale.range().map(function (x) {\n        return x - dx;\n      }).map(initialXScale.invert);\n\n      var _filterData4 = filterData(fullData, newDomain, xAccessor, initialXScale, {\n        currentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n        currentDomain: this.hackyWayToStopPanBeyondBounds__domain\n      }),\n          beforePlotData = _filterData4.plotData,\n          domain = _filterData4.domain;\n\n      var updatedScale = initialXScale.copy().domain(domain);\n      var plotData = postCalculator(beforePlotData); // console.log(last(plotData));\n\n      var currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n      var chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n        plotData: plotData,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        fullData: fullData\n      }, updatedScale.domain(), dy, chartsToPan);\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY); // console.log(initialXScale.domain(), newDomain, updatedScale.domain());\n\n      return {\n        xScale: updatedScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        mouseXY: mouseXY,\n        currentCharts: currentCharts,\n        currentItem: currentItem\n      };\n    }\n  }, {\n    key: \"handlePan\",\n    value: function handlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n      var _this4 = this;\n\n      if (!this.waitingForPanAnimationFrame) {\n        this.waitingForPanAnimationFrame = true;\n        this.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n        this.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n        var state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n        this.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n        this.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n        this.panInProgress = true; // console.log(panStartXScale.domain(), state.xScale.domain());\n\n        this.triggerEvent(\"pan\", state, e);\n        this.mutableState = {\n          mouseXY: state.mouseXY,\n          currentItem: state.currentItem,\n          currentCharts: state.currentCharts\n        };\n        requestAnimationFrame(function () {\n          _this4.waitingForPanAnimationFrame = false;\n\n          _this4.clearBothCanvas();\n\n          _this4.draw({\n            trigger: \"pan\"\n          });\n        });\n      }\n    }\n  }, {\n    key: \"handlePanEnd\",\n    value: function handlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n      var _this5 = this;\n\n      var state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan); // console.log(this.canvasDrawCallbackList.map(d => d.type));\n\n      this.hackyWayToStopPanBeyondBounds__plotData = null;\n      this.hackyWayToStopPanBeyondBounds__domain = null;\n      this.panInProgress = false; // console.log(\"PANEND\", panEnd++);\n\n      var xScale = state.xScale,\n          plotData = state.plotData,\n          chartConfig = state.chartConfig;\n      this.triggerEvent(\"panend\", state, e);\n      requestAnimationFrame(function () {\n        var xAccessor = _this5.state.xAccessor;\n        var fullData = _this5.fullData;\n        var firstItem = head(fullData);\n        var start = head(xScale.domain());\n        var end = xAccessor(firstItem); // console.log(start, end, start < end ? \"Load more\" : \"I have it\");\n\n        var onLoadMore = _this5.props.onLoadMore;\n\n        _this5.clearThreeCanvas();\n\n        _this5.setState({\n          xScale: xScale,\n          plotData: plotData,\n          chartConfig: chartConfig\n        }, function () {\n          if (start < end) onLoadMore(start, end);\n        });\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(mousePosition, currentCharts, e) {\n      this.triggerEvent(\"mousedown\", this.mutableState, e);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(e) {\n      this.triggerEvent(\"mouseenter\", {\n        show: true\n      }, e);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(mouseXY, inputType, e) {\n      var _this6 = this;\n\n      if (!this.waitingForMouseMoveAnimationFrame) {\n        this.waitingForMouseMoveAnimationFrame = true;\n        var _state6 = this.state,\n            chartConfig = _state6.chartConfig,\n            plotData = _state6.plotData,\n            xScale = _state6.xScale,\n            xAccessor = _state6.xAccessor;\n        var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n        this.triggerEvent(\"mousemove\", {\n          show: true,\n          mouseXY: mouseXY,\n          // prevMouseXY is used in interactive components\n          prevMouseXY: this.prevMouseXY,\n          currentItem: currentItem,\n          currentCharts: currentCharts\n        }, e);\n        this.prevMouseXY = mouseXY;\n        this.mutableState = {\n          mouseXY: mouseXY,\n          currentItem: currentItem,\n          currentCharts: currentCharts\n        };\n        requestAnimationFrame(function () {\n          _this6.clearMouseCanvas();\n\n          _this6.draw({\n            trigger: \"mousemove\"\n          });\n\n          _this6.waitingForMouseMoveAnimationFrame = false;\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(e) {\n      this.triggerEvent(\"mouseleave\", {\n        show: false\n      }, e);\n      this.clearMouseCanvas();\n      this.draw({\n        trigger: \"mouseleave\"\n      });\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart(_ref3, e) {\n      var startPos = _ref3.startPos;\n      this.triggerEvent(\"dragstart\", {\n        startPos: startPos\n      }, e);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(_ref4, e) {\n      var _this7 = this;\n\n      var startPos = _ref4.startPos,\n          mouseXY = _ref4.mouseXY;\n      var _state7 = this.state,\n          chartConfig = _state7.chartConfig,\n          plotData = _state7.plotData,\n          xScale = _state7.xScale,\n          xAccessor = _state7.xAccessor;\n      var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      this.triggerEvent(\"drag\", {\n        startPos: startPos,\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      }, e);\n      this.mutableState = {\n        mouseXY: mouseXY,\n        currentItem: currentItem,\n        currentCharts: currentCharts\n      };\n      requestAnimationFrame(function () {\n        _this7.clearMouseCanvas();\n\n        _this7.draw({\n          trigger: \"drag\"\n        });\n      });\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd(_ref5, e) {\n      var _this8 = this;\n\n      var mouseXY = _ref5.mouseXY;\n      this.triggerEvent(\"dragend\", {\n        mouseXY: mouseXY\n      }, e);\n      requestAnimationFrame(function () {\n        _this8.clearMouseCanvas();\n\n        _this8.draw({\n          trigger: \"dragend\"\n        });\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(mousePosition, e) {\n      var _this9 = this;\n\n      this.triggerEvent(\"click\", this.mutableState, e);\n      requestAnimationFrame(function () {\n        _this9.clearMouseCanvas();\n\n        _this9.draw({\n          trigger: \"click\"\n        });\n      });\n    }\n  }, {\n    key: \"handleDoubleClick\",\n    value: function handleDoubleClick(mousePosition, e) {\n      this.triggerEvent(\"dblclick\", {}, e);\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var dimensions = getDimensions(this.props);\n      return {\n        fullData: this.fullData,\n        plotData: this.state.plotData,\n        width: dimensions.width,\n        height: dimensions.height,\n        chartConfig: this.state.chartConfig,\n        xScale: this.state.xScale,\n        xAccessor: this.state.xAccessor,\n        displayXAccessor: this.state.displayXAccessor,\n        chartCanvasType: this.props.type,\n        margin: this.props.margin,\n        ratio: this.props.ratio,\n        xAxisZoom: this.xAxisZoom,\n        yAxisZoom: this.yAxisZoom,\n        getCanvasContexts: this.getCanvasContexts,\n        redraw: this.redraw,\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe,\n        generateSubscriptionId: this.generateSubscriptionId,\n        getMutableState: this.getMutableState,\n        amIOnTop: this.amIOnTop,\n        setCursorClass: this.setCursorClass\n      };\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _resetChart = resetChart(this.props, true),\n          fullData = _resetChart.fullData,\n          state = _objectWithoutProperties(_resetChart, [\"fullData\"]);\n\n      this.setState(state);\n      this.fullData = fullData;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var reset = shouldResetChart(this.props, nextProps);\n      var interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n      var initialChartConfig = this.state.chartConfig;\n      var newState = void 0;\n\n      if (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n        if (process.env.NODE_ENV !== \"production\") {\n          if (!interaction) log(\"RESET CHART, changes to a non interactive chart\");else if (reset) log(\"RESET CHART, one or more of these props changed\", CANDIDATES_FOR_RESET);else log(\"xExtents changed\");\n        } // do reset\n\n\n        newState = resetChart(nextProps);\n        this.mutableState = {};\n      } else {\n        var _state$xScale$domain = this.state.xScale.domain(),\n            _state$xScale$domain2 = _slicedToArray(_state$xScale$domain, 2),\n            start = _state$xScale$domain2[0],\n            end = _state$xScale$domain2[1];\n\n        var prevLastItem = last(this.fullData);\n        var calculatedState = calculateFullData(nextProps);\n        var xAccessor = calculatedState.xAccessor;\n        var lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n\n        if (process.env.NODE_ENV !== \"production\") {\n          if (this.props.data !== nextProps.data) log(\"data is changed but seriesName did not, change the seriesName if you wish to reset the chart and lastItemWasVisible = \", lastItemWasVisible);else log(\"Trivial change, may be width/height or type changed, but that does not matter\");\n        }\n\n        newState = updateChart(calculatedState, this.state.xScale, nextProps, lastItemWasVisible, initialChartConfig);\n      }\n\n      var _newState = newState,\n          fullData = _newState.fullData,\n          state = _objectWithoutProperties(_newState, [\"fullData\"]);\n\n      if (this.panInProgress) {\n        if (process.env.NODE_ENV !== \"production\") {\n          log(\"Pan is in progress\");\n        }\n      } else {\n        /*\n        if (!reset) {\n        \tstate.chartConfig\n        \t\t.forEach((each) => {\n        \t\t\t// const sourceChartConfig = initialChartConfig.filter(d => d.id === each.id);\n        \t\t\tconst prevChartConfig = find(initialChartConfig, d => d.id === each.id);\n        \t\t\tif (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n        \t\t\t\teach.yScale.domain(prevChartConfig.yScale.domain());\n        \t\t\t\teach.yPanEnabled = prevChartConfig.yPanEnabled;\n        \t\t\t}\n        \t\t});\n        }\n        */\n        this.clearThreeCanvas();\n        this.setState(state);\n      }\n\n      this.fullData = fullData;\n    }\n    /*\n    componentDidUpdate(prevProps, prevState) {\n    \tconsole.error(this.state.chartConfig, this.state.chartConfig.map(d => d.yScale.domain()));\n    }\n    */\n\n  }, {\n    key: \"resetYDomain\",\n    value: function resetYDomain(chartId) {\n      var chartConfig = this.state.chartConfig;\n      var changed = false;\n      var newChartConfig = chartConfig.map(function (each) {\n        if ((isNotDefined(chartId) || each.id === chartId) && !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n          changed = true;\n          return _extends({}, each, {\n            yScale: each.yScale.domain(each.realYDomain),\n            yPanEnabled: false\n          });\n        }\n\n        return each;\n      });\n\n      if (changed) {\n        this.clearThreeCanvas();\n        this.setState({\n          chartConfig: newChartConfig\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      // console.log(\"Happneing.....\", !this.panInProgress)\n      return !this.panInProgress;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          type = _props2.type,\n          height = _props2.height,\n          width = _props2.width,\n          margin = _props2.margin,\n          className = _props2.className,\n          zIndex = _props2.zIndex,\n          defaultFocus = _props2.defaultFocus,\n          ratio = _props2.ratio,\n          mouseMoveEvent = _props2.mouseMoveEvent,\n          panEvent = _props2.panEvent,\n          zoomEvent = _props2.zoomEvent;\n      var _props3 = this.props,\n          useCrossHairStyleCursor = _props3.useCrossHairStyleCursor,\n          onSelect = _props3.onSelect;\n      var _state8 = this.state,\n          plotData = _state8.plotData,\n          xScale = _state8.xScale,\n          xAccessor = _state8.xAccessor,\n          chartConfig = _state8.chartConfig;\n      var dimensions = getDimensions(this.props);\n      var interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n      var cursorStyle = useCrossHairStyleCursor && interaction;\n      var cursor = getCursorStyle();\n      return React.createElement(\"div\", {\n        style: {\n          position: \"relative\",\n          width: width,\n          height: height\n        },\n        className: className,\n        onClick: onSelect\n      }, React.createElement(CanvasContainer, {\n        ref: this.saveCanvasContainerNode,\n        type: type,\n        ratio: ratio,\n        width: width,\n        height: height,\n        zIndex: zIndex\n      }), React.createElement(\"svg\", {\n        className: className,\n        width: width,\n        height: height,\n        style: {\n          position: \"absolute\",\n          zIndex: zIndex + 5\n        }\n      }, cursor, React.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n        id: \"chart-area-clip\"\n      }, React.createElement(\"rect\", {\n        x: \"0\",\n        y: \"0\",\n        width: dimensions.width,\n        height: dimensions.height\n      })), chartConfig.map(function (each, idx) {\n        return React.createElement(\"clipPath\", {\n          key: idx,\n          id: \"chart-area-clip-\" + each.id\n        }, React.createElement(\"rect\", {\n          x: \"0\",\n          y: \"0\",\n          width: each.width,\n          height: each.height\n        }));\n      })), React.createElement(\"g\", {\n        transform: \"translate(\" + (margin.left + 0.5) + \", \" + (margin.top + 0.5) + \")\"\n      }, React.createElement(EventCapture, {\n        ref: this.saveEventCaptureNode,\n        useCrossHairStyleCursor: cursorStyle,\n        mouseMove: mouseMoveEvent && interaction,\n        zoom: zoomEvent && interaction,\n        pan: panEvent && interaction,\n        width: dimensions.width,\n        height: dimensions.height,\n        chartConfig: chartConfig,\n        xScale: xScale,\n        xAccessor: xAccessor,\n        focus: defaultFocus,\n        disableInteraction: this.props.disableInteraction,\n        getAllPanConditions: this.getAllPanConditions,\n        onContextMenu: this.handleContextMenu,\n        onClick: this.handleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseLeave: this.handleMouseLeave,\n        onDragStart: this.handleDragStart,\n        onDrag: this.handleDrag,\n        onDragComplete: this.handleDragEnd,\n        onZoom: this.handleZoom,\n        onPinchZoom: this.handlePinchZoom,\n        onPinchZoomEnd: this.handlePinchZoomEnd,\n        onPan: this.handlePan,\n        onPanEnd: this.handlePanEnd\n      }), React.createElement(\"g\", {\n        className: \"react-stockcharts-avoid-interaction\"\n      }, this.props.children))));\n    }\n  }]);\n\n  return ChartCanvas;\n}(Component);\n\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n  var interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n  return interaction;\n}\n\nChartCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.object,\n  ratio: PropTypes.number.isRequired,\n  // interval: PropTypes.oneOf([\"D\", \"W\", \"M\"]), // ,\"m1\", \"m5\", \"m15\", \"W\", \"M\"\n  type: PropTypes.oneOf([\"svg\", \"hybrid\"]),\n  pointsPerPxThreshold: PropTypes.number,\n  minPointsPerPxThreshold: PropTypes.number,\n  data: PropTypes.array.isRequired,\n  // initialDisplay: PropTypes.number,\n  xAccessor: PropTypes.func,\n  xExtents: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n  zoomAnchor: PropTypes.func,\n  className: PropTypes.string,\n  seriesName: PropTypes.string.isRequired,\n  zIndex: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  xScale: PropTypes.func.isRequired,\n  postCalculator: PropTypes.func,\n  flipXScale: PropTypes.bool,\n  useCrossHairStyleCursor: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    left: PropTypes.number,\n    right: PropTypes.number\n  })]),\n  defaultFocus: PropTypes.bool,\n  zoomMultiplier: PropTypes.number,\n  onLoadMore: PropTypes.func,\n  displayXAccessor: function displayXAccessor(props, propName\n  /* , componentName */\n  ) {\n    if (isNotDefined(props[propName])) {\n      console.warn(\"`displayXAccessor` is not defined,\" + \" will use the value from `xAccessor` as `displayXAccessor`.\" + \" This might be ok if you do not use a discontinuous scale\" + \" but if you do, provide a `displayXAccessor` prop to `ChartCanvas`\");\n    } else if (typeof props[propName] !== \"function\") {\n      return new Error(\"displayXAccessor has to be a function\");\n    }\n  },\n  mouseMoveEvent: PropTypes.bool,\n  panEvent: PropTypes.bool,\n  clamp: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  zoomEvent: PropTypes.bool,\n  onSelect: PropTypes.func,\n  maintainPointsPerPixelOnResize: PropTypes.bool,\n  disableInteraction: PropTypes.bool\n};\nChartCanvas.defaultProps = {\n  margin: {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 80\n  },\n  type: \"hybrid\",\n  pointsPerPxThreshold: 2,\n  minPointsPerPxThreshold: 1 / 100,\n  className: \"react-stockchart\",\n  zIndex: 1,\n  xExtents: [min, max],\n  postCalculator: identity,\n  padding: 0,\n  xAccessor: identity,\n  flipXScale: false,\n  useCrossHairStyleCursor: true,\n  defaultFocus: true,\n  onLoadMore: noop,\n  onSelect: noop,\n  mouseMoveEvent: true,\n  panEvent: true,\n  zoomEvent: true,\n  zoomMultiplier: 1.1,\n  clamp: false,\n  zoomAnchor: mouseBasedZoomAnchor,\n  maintainPointsPerPixelOnResize: true,\n  // ratio: 2,\n  disableInteraction: false\n};\nChartCanvas.childContextTypes = {\n  plotData: PropTypes.array,\n  fullData: PropTypes.array,\n  chartConfig: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    origin: PropTypes.arrayOf(PropTypes.number).isRequired,\n    padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number\n    })]),\n    yExtents: PropTypes.arrayOf(PropTypes.func),\n    yExtentsProvider: PropTypes.func,\n    yScale: PropTypes.func.isRequired,\n    mouseCoordinates: PropTypes.shape({\n      at: PropTypes.string,\n      format: PropTypes.func\n    }),\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  })).isRequired,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  displayXAccessor: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  chartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired,\n  getCanvasContexts: PropTypes.func,\n  xAxisZoom: PropTypes.func,\n  yAxisZoom: PropTypes.func,\n  amIOnTop: PropTypes.func,\n  redraw: PropTypes.func,\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n  setCursorClass: PropTypes.func,\n  generateSubscriptionId: PropTypes.func,\n  getMutableState: PropTypes.func\n};\n\nChartCanvas.ohlcv = function (d) {\n  return {\n    date: d.date,\n    open: d.open,\n    high: d.high,\n    low: d.low,\n    close: d.close,\n    volume: d.volume\n  };\n};\n\nexport default ChartCanvas;","map":{"version":3,"sources":["../../../src/lib/ChartCanvas.js"],"names":["extent","log","getLogger","CANDIDATES_FOR_RESET","result","shallowEqual","thisProps","nextProps","tooltipStyle","height","props","width","right","flipXScale","fullData","plotFull","xScale","clamp","pointsPerPxThreshold","xAccessor","displayXAccessor","minPointsPerPxThreshold","useWholeData","isDefined","filterData","firstCalculation","process","state","calculateState","initialPlotData","postCalculator","children","plotData","dimensions","getDimensions","chartConfig","getChartConfigWithUpdatedYScales","getNewChartConfig","newState","lastItem","last","start","end","initialXScale","padding","maintainPointsPerPixelOnResize","direction","getXScaleDirection","updatedXScale","setXRange","rangeStart","rangeEnd","newRangeStart","newRangeEnd","newDomainExtent","newStart","lastItemX","response","fallbackStart","fallbackEnd","lastItemWasVisible","dx","newEnd","x","inputXAccesor","xExtentsProp","data","i","prev","curr","functor","each","calculateFullData","domain","isNaN","left","touch1Pos","touch2Pos","pinch","topLeft","Math","bottomRight","ChartCanvas","Component","node","canvases","clearCanvas","id","rest","getPanConditions","draggable","panEnabled","className","dragableComponents","mouseXY","e","currentCharts","getCurrentCharts","currentItem","getCurrentItem","newDomain","initialChartConfig","beforePlotData","currentPlotData","currentDomain","updatedScale","initialPinch","finalPinch","initialPinchXScale","iTL","iBR","pinchCoordinates","fTL","fBR","xDash","yDash","y","requestAnimationFrame","trigger","firstItem","head","onLoadMore","zoomDirection","zoomMultiplier","zoomAnchor","item","cx","c","show","chartId","yScale","yPanEnabled","type","subscriptions","force","dy","chartsToPan","isNotDefined","hackyWayToStopPanBeyondBounds__domain","mousePosition","panStartXScale","dxdy","inputType","prevMouseXY","startPos","chartCanvasType","margin","ratio","xAxisZoom","yAxisZoom","getCanvasContexts","redraw","subscribe","unsubscribe","generateSubscriptionId","getMutableState","amIOnTop","setCursorClass","resetChart","reset","shouldResetChart","interaction","isInteractionEnabled","prevLastItem","calculatedState","updateChart","changed","newChartConfig","zIndex","defaultFocus","mouseMoveEvent","panEvent","zoomEvent","useCrossHairStyleCursor","onSelect","cursorStyle","cursor","getCursorStyle","position","handlePanEnd","PropTypes","xExtents","seriesName","number","console","disableInteraction","bool","top","bottom","origin","yExtents","yExtentsProvider","mouseCoordinates","at","format","func","isRequired","date","d","open","high","low","close","volume"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { extent as d3Extent, min, max } from \"d3-array\";\n\nimport {\n\thead,\n\tlast,\n\tisDefined,\n\tisNotDefined,\n\tclearCanvas,\n\tshallowEqual,\n\tidentity,\n\tnoop,\n\tfunctor,\n\tgetLogger,\n} from \"./utils\";\n\n/* eslint-disable no-unused-vars */\nimport {\n\tmouseBasedZoomAnchor,\n\tlastVisibleItemBasedZoomAnchor,\n\trightDomainBasedZoomAnchor,\n} from \"./utils/zoomBehavior\";\n/* eslint-enable no-unused-vars */\n\nimport { getNewChartConfig, getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem } from \"./utils/ChartDataUtil\";\n\nimport EventCapture from \"./EventCapture\";\n\nimport CanvasContainer from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\n\nconst log = getLogger(\"ChartCanvas\");\n\nconst CANDIDATES_FOR_RESET = [\n\t\"seriesName\",\n\t/* \"data\",*/\n\t/* \"xAccessor\",*/\n];\n\nfunction shouldResetChart(thisProps, nextProps) {\n\treturn !CANDIDATES_FOR_RESET.every(key => {\n\t\tconst result = shallowEqual(thisProps[key], nextProps[key]);\n\t\t// console.log(key, result);\n\t\treturn result;\n\t});\n}\n\nfunction getCursorStyle() {\n\tconst tooltipStyle = `\n\t.react-stockcharts-grabbing-cursor {\n\t\tpointer-events: all;\n\t\tcursor: -moz-grabbing;\n\t\tcursor: -webkit-grabbing;\n\t\tcursor: grabbing;\n\t}\n\t.react-stockcharts-crosshair-cursor {\n\t\tpointer-events: all;\n\t\tcursor: crosshair;\n\t}\n\t.react-stockcharts-tooltip-hover {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-avoid-interaction {\n\t\tpointer-events: none;\n\t}\n\t.react-stockcharts-enable-interaction {\n\t\tpointer-events: all;\n\t}\n\t.react-stockcharts-tooltip {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-default-cursor {\n\t\tcursor: default;\n\t}\n\t.react-stockcharts-move-cursor {\n\t\tcursor: move;\n\t}\n\t.react-stockcharts-pointer-cursor {\n\t\tcursor: pointer;\n\t}\n\t.react-stockcharts-ns-resize-cursor {\n\t\tcursor: ns-resize;\n\t}\n\t.react-stockcharts-ew-resize-cursor {\n\t\tcursor: ew-resize;\n\t}`;\n\treturn (<style type=\"text/css\">{tooltipStyle}</style>);\n}\n\nfunction getDimensions(props) {\n\treturn {\n\t\theight: props.height - props.margin.top - props.margin.bottom,\n\t\twidth: props.width - props.margin.left - props.margin.right,\n\t};\n}\n\nfunction getXScaleDirection(flipXScale) {\n\treturn flipXScale ? -1 : 1;\n}\n\nfunction calculateFullData(props) {\n\tconst { data: fullData, plotFull, xScale, clamp, pointsPerPxThreshold, flipXScale } = props;\n\tconst { xAccessor, displayXAccessor, minPointsPerPxThreshold } = props;\n\n\tconst useWholeData = isDefined(plotFull)\n\t\t? plotFull\n\t\t: xAccessor === identity;\n\n\tconst { filterData } = evaluator({\n\t\txScale,\n\t\tuseWholeData,\n\t\tclamp,\n\t\tpointsPerPxThreshold,\n\t\tminPointsPerPxThreshold,\n\t\tflipXScale,\n\t});\n\n\treturn {\n\t\txAccessor,\n\t\tdisplayXAccessor: displayXAccessor || xAccessor,\n\t\txScale: xScale.copy(),\n\t\tfullData,\n\t\tfilterData\n\t};\n}\nfunction resetChart(props, firstCalculation = false) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (!firstCalculation) log(\"CHART RESET\");\n\t}\n\n\tconst state = calculateState(props);\n\tconst { xAccessor, displayXAccessor, fullData } = state;\n\tconst { plotData: initialPlotData, xScale } = state;\n\tconst { postCalculator, children } = props;\n\n\tconst plotData = postCalculator(initialPlotData);\n\n\tconst dimensions = getDimensions(props);\n\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\tgetNewChartConfig(dimensions, children),\n\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\txScale.domain()\n\t);\n\n\treturn {\n\t\t...state,\n\t\txScale,\n\t\tplotData,\n\t\tchartConfig,\n\t};\n}\n\nfunction updateChart(\n\tnewState,\n\tinitialXScale,\n\tprops,\n\tlastItemWasVisible,\n\tinitialChartConfig,\n) {\n\n\tconst { fullData, xScale, xAccessor, displayXAccessor, filterData } = newState;\n\n\tconst lastItem = last(fullData);\n\tconst [start, end] = initialXScale.domain();\n\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tlog(\"TRIVIAL CHANGE\");\n\t}\n\n\tconst { postCalculator, children, padding, flipXScale } = props;\n\tconst { maintainPointsPerPixelOnResize } = props;\n\tconst direction = getXScaleDirection(flipXScale);\n\tconst dimensions = getDimensions(props);\n\n\tconst updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n\t// console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n\tlet initialPlotData;\n\tif (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n\t\t// resize comes here...\n\t\t// get plotData between [start, end] and do not change the domain\n\t\tconst [rangeStart, rangeEnd] = initialXScale.range();\n\t\tconst [newRangeStart, newRangeEnd] = updatedXScale.range();\n\t\tconst newDomainExtent = ((newRangeEnd - newRangeStart) / (rangeEnd - rangeStart)) * (end - start);\n\t\tconst newStart = maintainPointsPerPixelOnResize\n\t\t\t? end - newDomainExtent\n\t\t\t: start;\n\n\t\tconst lastItemX = initialXScale(xAccessor(lastItem));\n\t\t// console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n\t\tconst response = filterData(\n\t\t\tfullData, [newStart, end], xAccessor, updatedXScale,\n\t\t\t{ fallbackStart: start, fallbackEnd: { lastItem, lastItemX } }\n\t\t);\n\t\tinitialPlotData = response.plotData;\n\t\tupdatedXScale.domain(response.domain);\n\t\t// console.log(\"HERE!!!!!\", start, end);\n\t} else if (lastItemWasVisible\n\t\t\t&& end < xAccessor(lastItem)) {\n\t\t// this is when a new item is added and last item was visible\n\t\t// so slide over and show the new item also\n\n\t\t// get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n\t\tconst dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n\t\tconst [newStart, newEnd] = initialXScale.range().map(x => x + dx).map(initialXScale.invert);\n\n\n\t\tconst response = filterData(fullData, [newStart, newEnd], xAccessor, updatedXScale);\n\t\tinitialPlotData = response.plotData;\n\t\tupdatedXScale.domain(response.domain);\t\t// if last item was visible, then shift\n\t}\n\t// plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n\tconst plotData = postCalculator(initialPlotData);\n\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\tgetNewChartConfig(dimensions, children, initialChartConfig),\n\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\tupdatedXScale.domain()\n\t);\n\n\treturn {\n\t\txScale: updatedXScale,\n\t\txAccessor,\n\t\tchartConfig,\n\t\tplotData,\n\t\tfullData,\n\t\tfilterData,\n\t};\n}\n\nfunction calculateState(props) {\n\n\tconst {\n\t\txAccessor: inputXAccesor, xExtents: xExtentsProp, data, padding, flipXScale\n\t} = props;\n\n\tif (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n\t\tfor (let i = 1; i < data.length; i++) {\n\t\t\tconst prev = data[i - 1];\n\t\t\tconst curr = data[i];\n\t\t\tif (inputXAccesor(prev) > inputXAccesor(curr)) {\n\t\t\t\tthrow new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n\t\t\t}\n\t\t}\n\t}\n\n\tconst direction = getXScaleDirection(flipXScale);\n\tconst dimensions = getDimensions(props);\n\n\tconst extent = typeof xExtentsProp === \"function\"\n\t\t? xExtentsProp(data)\n\t\t: d3Extent(xExtentsProp.map(d => functor(d)).map(each => each(data, inputXAccesor)));\n\n\tconst { xAccessor, displayXAccessor, xScale, fullData, filterData } = calculateFullData(props);\n\tconst updatedXScale = setXRange(xScale, dimensions, padding, direction);\n\n\tconst { plotData, domain } = filterData(fullData, extent, inputXAccesor, updatedXScale);\n\n\tif (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n\t\tthrow new Error(`Showing ${plotData.length} datapoints, review the 'xExtents' prop of ChartCanvas`);\n\t}\n\treturn {\n\t\tplotData,\n\t\txScale: updatedXScale.domain(domain),\n\t\txAccessor,\n\t\tdisplayXAccessor,\n\t\tfullData,\n\t\tfilterData,\n\t};\n}\n\nfunction setXRange(xScale, dimensions, padding, direction = 1) {\n\tif (xScale.rangeRoundPoints) {\n\t\tif (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n\t\txScale.rangeRoundPoints([0, dimensions.width], padding);\n\t} else if (xScale.padding) {\n\t\tif (isNaN(padding)) throw new Error(\"padding has to be a number for ordinal scale\");\n\t\txScale.range([0, dimensions.width]);\n\t\txScale.padding(padding / 2);\n\t} else {\n\t\tconst { left, right } = isNaN(padding)\n\t\t\t? padding\n\t\t\t: { left: padding, right: padding };\n\t\tif (direction > 0) {\n\t\t\txScale.range([left, dimensions.width - right]);\n\t\t} else {\n\t\t\txScale.range([dimensions.width - right, left]);\n\t\t}\n\t}\n\treturn xScale;\n}\n\nfunction pinchCoordinates(pinch) {\n\tconst { touch1Pos, touch2Pos } = pinch;\n\n\treturn {\n\t\ttopLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n\t\tbottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])]\n\t};\n}\n\n\nclass ChartCanvas extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.getDataInfo = this.getDataInfo.bind(this);\n\t\tthis.getCanvasContexts = this.getCanvasContexts.bind(this);\n\n\t\tthis.handleMouseMove = this.handleMouseMove.bind(this);\n\t\tthis.handleMouseEnter = this.handleMouseEnter.bind(this);\n\t\tthis.handleMouseLeave = this.handleMouseLeave.bind(this);\n\t\tthis.handleZoom = this.handleZoom.bind(this);\n\t\tthis.handlePinchZoom = this.handlePinchZoom.bind(this);\n\t\tthis.handlePinchZoomEnd = this.handlePinchZoomEnd.bind(this);\n\t\tthis.handlePan = this.handlePan.bind(this);\n\t\tthis.handlePanEnd = this.handlePanEnd.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.handleMouseDown = this.handleMouseDown.bind(this);\n\t\tthis.handleDoubleClick = this.handleDoubleClick.bind(this);\n\t\tthis.handleContextMenu = this.handleContextMenu.bind(this);\n\t\tthis.handleDragStart = this.handleDragStart.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragEnd = this.handleDragEnd.bind(this);\n\n\t\tthis.panHelper = this.panHelper.bind(this);\n\t\tthis.pinchZoomHelper = this.pinchZoomHelper.bind(this);\n\t\tthis.xAxisZoom = this.xAxisZoom.bind(this);\n\t\tthis.yAxisZoom = this.yAxisZoom.bind(this);\n\t\tthis.resetYDomain = this.resetYDomain.bind(this);\n\t\tthis.calculateStateForDomain = this.calculateStateForDomain.bind(this);\n\t\tthis.generateSubscriptionId = this.generateSubscriptionId.bind(this);\n\t\tthis.draw = this.draw.bind(this);\n\t\tthis.redraw = this.redraw.bind(this);\n\t\tthis.getAllPanConditions = this.getAllPanConditions.bind(this);\n\n\t\tthis.subscriptions = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t\tthis.unsubscribe = this.unsubscribe.bind(this);\n\t\tthis.amIOnTop = this.amIOnTop.bind(this);\n\t\tthis.saveEventCaptureNode = this.saveEventCaptureNode.bind(this);\n\t\tthis.saveCanvasContainerNode = this.saveCanvasContainerNode.bind(this);\n\t\tthis.setCursorClass = this.setCursorClass.bind(this);\n\t\tthis.getMutableState = this.getMutableState.bind(this);\n\t\t// this.canvasDrawCallbackList = [];\n\t\tthis.interactiveState = [];\n\t\tthis.panInProgress = false;\n\n\t\tthis.state = {};\n\t\tthis.mutableState = {};\n\t\tthis.lastSubscriptionId = 0;\n\t}\n\tsaveEventCaptureNode(node) {\n\t\tthis.eventCaptureNode = node;\n\t}\n\tsaveCanvasContainerNode(node) {\n\t\tthis.canvasContainerNode = node;\n\t}\n\tgetMutableState() {\n\t\treturn this.mutableState;\n\t}\n\tgetDataInfo() {\n\t\treturn {\n\t\t\t...this.state,\n\t\t\tfullData: this.fullData,\n\t\t};\n\t}\n\tgetCanvasContexts() {\n\t\tif (this.canvasContainerNode) {\n\t\t\treturn this.canvasContainerNode.getCanvasContexts();\n\t\t}\n\t}\n\tgenerateSubscriptionId() {\n\t\tthis.lastSubscriptionId++;\n\t\treturn this.lastSubscriptionId;\n\t}\n\tclearBothCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.axes) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.axes,\n\t\t\t\t// canvases.hover,\n\t\t\t\tcanvases.mouseCoord\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tclearMouseCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.mouseCoord) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.mouseCoord,\n\t\t\t\t// canvases.hover,\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tclearThreeCanvas() {\n\t\tconst canvases = this.getCanvasContexts();\n\t\tif (canvases && canvases.axes) {\n\t\t\tclearCanvas([\n\t\t\t\tcanvases.axes,\n\t\t\t\t// canvases.hover,\n\t\t\t\tcanvases.mouseCoord,\n\t\t\t\tcanvases.bg\n\t\t\t], this.props.ratio);\n\t\t}\n\t}\n\tsubscribe(id, rest) {\n\t\tconst { getPanConditions = functor({\n\t\t\tdraggable: false,\n\t\t\tpanEnabled: true,\n\t\t}) } = rest;\n\t\tthis.subscriptions = this.subscriptions.concat({\n\t\t\tid,\n\t\t\t...rest,\n\t\t\tgetPanConditions,\n\t\t});\n\t}\n\tunsubscribe(id) {\n\t\tthis.subscriptions = this.subscriptions.filter(each => each.id !== id);\n\t}\n\tgetAllPanConditions() {\n\t\treturn this.subscriptions\n\t\t\t.map(each => each.getPanConditions());\n\t}\n\tsetCursorClass(className) {\n\t\tif (this.eventCaptureNode != null) {\n\t\t\tthis.eventCaptureNode.setCursorClass(className);\n\t\t}\n\t}\n\tamIOnTop(id) {\n\t\tconst dragableComponents = this.subscriptions\n\t\t\t.filter(each => each.getPanConditions().draggable);\n\n\t\treturn dragableComponents.length > 0\n\t\t\t&& last(dragableComponents).id === id;\n\t}\n\thandleContextMenu(mouseXY, e) {\n\t\tconst { xAccessor, chartConfig, plotData, xScale } = this.state;\n\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\n\t\tthis.triggerEvent(\"contextmenu\", {\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t}, e);\n\t}\n\tcalculateStateForDomain(newDomain) {\n\t\tconst {\n\t\t\txAccessor,\n\t\t\tdisplayXAccessor,\n\t\t\txScale: initialXScale,\n\t\t\tchartConfig: initialChartConfig,\n\t\t\tplotData: initialPlotData\n\t\t} = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: initialPlotData,\n\t\t\t\tcurrentDomain: initialXScale.domain()\n\t\t\t}\n\t\t);\n\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain()\n\t\t);\n\n\t\treturn {\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t};\n\t}\n\tpinchZoomHelper(initialPinch, finalPinch) {\n\t\tconst { xScale: initialPinchXScale } = initialPinch;\n\n\t\tconst {\n\t\t\txScale: initialXScale,\n\t\t\tchartConfig: initialChartConfig,\n\t\t\tplotData: initialPlotData,\n\t\t\txAccessor,\n\t\t\tdisplayXAccessor,\n\t\t} = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\tconst { topLeft: iTL, bottomRight: iBR } = pinchCoordinates(initialPinch);\n\t\tconst { topLeft: fTL, bottomRight: fBR } = pinchCoordinates(finalPinch);\n\n\t\tconst e = initialPinchXScale.range()[1];\n\n\t\tconst xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n\t\tconst yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / ((e - iTL[0]) - (e - iBR[0])));\n\n\t\tconst x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n\t\tconst y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n\n\t\tconst newDomain = [x, y].map(initialPinchXScale.invert);\n\t\t// var domainR = initial.right + right;\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialPinchXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: initialPlotData,\n\t\t\t\tcurrentDomain: initialXScale.domain()\n\t\t\t}\n\t\t);\n\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\n\t\tconst mouseXY = finalPinch.touch1Pos;\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain()\n\t\t);\n\t\tconst currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n\n\t\treturn {\n\t\t\tchartConfig,\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t};\n\t}\n\tcancelDrag() {\n\t\tthis.eventCaptureNode.cancelDrag();\n\t\tthis.triggerEvent(\"dragcancel\");\n\t}\n\thandlePinchZoom(initialPinch, finalPinch, e) {\n\t\tif (!this.waitingForPinchZoomAnimationFrame) {\n\t\t\tthis.waitingForPinchZoomAnimationFrame = true;\n\t\t\tconst state = this.pinchZoomHelper(initialPinch, finalPinch);\n\n\t\t\tthis.triggerEvent(\"pinchzoom\", state, e);\n\n\t\t\tthis.finalPinch = finalPinch;\n\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.clearBothCanvas();\n\t\t\t\tthis.draw({ trigger: \"pinchzoom\" });\n\t\t\t\tthis.waitingForPinchZoomAnimationFrame = false;\n\t\t\t});\n\t\t}\n\t}\n\thandlePinchZoomEnd(initialPinch, e) {\n\t\tconst { xAccessor } = this.state;\n\n\t\tif (this.finalPinch) {\n\t\t\tconst state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n\t\t\tconst { xScale } = state;\n\t\t\tthis.triggerEvent(\"pinchzoom\", state, e);\n\n\t\t\tthis.finalPinch = null;\n\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tconst { fullData } = this;\n\t\t\tconst firstItem = head(fullData);\n\n\t\t\tconst start = head(xScale.domain());\n\t\t\tconst end = xAccessor(firstItem);\n\t\t\tconst { onLoadMore } = this.props;\n\n\t\t\tthis.setState(state, () => {\n\t\t\t\tif (start < end) {\n\t\t\t\t\tonLoadMore(start, end);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleZoom(zoomDirection, mouseXY, e) {\n\t\tif (this.panInProgress)\n\t\t\treturn;\n\t\t// console.log(\"zoomDirection \", zoomDirection, \" mouseXY \", mouseXY);\n\t\tconst { xAccessor, xScale: initialXScale, plotData: initialPlotData } = this.state;\n\t\tconst { zoomMultiplier, zoomAnchor } = this.props;\n\t\tconst { fullData } = this;\n\t\tconst item = zoomAnchor({\n\t\t\txScale: initialXScale,\n\t\t\txAccessor,\n\t\t\tmouseXY,\n\t\t\tplotData: initialPlotData,\n\t\t\tfullData,\n\t\t});\n\n\t\tconst cx = initialXScale(item);\n\t\tconst c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n\t\tconst newDomain = initialXScale.range().map(x => cx + (x - cx) * c).map(initialXScale.invert);\n\n\t\tconst { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n\t\tthis.clearThreeCanvas();\n\n\t\tconst firstItem = head(fullData);\n\n\t\tconst start = head(xScale.domain());\n\t\tconst end = xAccessor(firstItem);\n\t\tconst { onLoadMore } = this.props;\n\n\t\tthis.mutableState = {\n\t\t\tmouseXY: mouseXY,\n\t\t\tcurrentItem: currentItem,\n\t\t\tcurrentCharts: currentCharts,\n\t\t};\n\n\t\tthis.triggerEvent(\"zoom\", {\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t\tmouseXY,\n\t\t\tcurrentCharts,\n\t\t\tcurrentItem,\n\t\t\tshow: true,\n\t\t}, e);\n\n\t\tthis.setState({\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t}, () => {\n\t\t\tif (start < end) {\n\t\t\t\tonLoadMore(start, end);\n\t\t\t}\n\t\t});\n\t}\n\txAxisZoom(newDomain) {\n\t\tconst { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n\t\tthis.clearThreeCanvas();\n\n\t\tconst { xAccessor } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst firstItem = head(fullData);\n\t\tconst start = head(xScale.domain());\n\t\tconst end = xAccessor(firstItem);\n\t\tconst { onLoadMore } = this.props;\n\n\t\tthis.setState({\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t}, () => {\n\t\t\tif (start < end) onLoadMore(start, end);\n\t\t});\n\t}\n\tyAxisZoom(chartId, newDomain) {\n\t\tthis.clearThreeCanvas();\n\t\tconst { chartConfig: initialChartConfig } = this.state;\n\t\tconst chartConfig = initialChartConfig\n\t\t\t.map(each => {\n\t\t\t\tif (each.id === chartId) {\n\t\t\t\t\tconst { yScale } = each;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tyScale: yScale.copy().domain(newDomain),\n\t\t\t\t\t\tyPanEnabled: true,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn each;\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.setState({\n\t\t\tchartConfig,\n\t\t});\n\t}\n\ttriggerEvent(type, props, e) {\n\t\t// console.log(\"triggering ->\", type);\n\n\t\tthis.subscriptions.forEach(each => {\n\t\t\tconst state = {\n\t\t\t\t...this.state,\n\t\t\t\tfullData: this.fullData,\n\t\t\t\tsubscriptions: this.subscriptions,\n\t\t\t};\n\t\t\teach.listener(type, props, state, e);\n\t\t});\n\t}\n\tdraw(props) {\n\t\tthis.subscriptions.forEach(each => {\n\t\t\tif (isDefined(each.draw))\n\t\t\t\teach.draw(props);\n\t\t});\n\t}\n\tredraw() {\n\t\tthis.clearThreeCanvas();\n\t\tthis.draw({ force: true });\n\t}\n\tpanHelper(mouseXY, initialXScale, { dx, dy }, chartsToPan) {\n\t\tconst { xAccessor, displayXAccessor, chartConfig: initialChartConfig } = this.state;\n\t\tconst { filterData } = this.state;\n\t\tconst { fullData } = this;\n\t\tconst { postCalculator } = this.props;\n\n\t\t// console.log(dx, dy);\n\t\tif (isNotDefined(initialXScale.invert))\n\t\t\tthrow new Error(\"xScale provided does not have an invert() method.\"\n\t\t\t\t+ \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n\n\t\tconst newDomain = initialXScale.range().map(x => x - dx).map(initialXScale.invert);\n\n\t\tconst { plotData: beforePlotData, domain } = filterData(\n\t\t\tfullData,\n\t\t\tnewDomain,\n\t\t\txAccessor,\n\t\t\tinitialXScale,\n\t\t\t{\n\t\t\t\tcurrentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n\t\t\t\tcurrentDomain: this.hackyWayToStopPanBeyondBounds__domain\n\t\t\t}\n\t\t);\n\n\t\tconst updatedScale = initialXScale.copy().domain(domain);\n\t\tconst plotData = postCalculator(beforePlotData);\n\t\t// console.log(last(plotData));\n\n\t\tconst currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n\t\tconst chartConfig = getChartConfigWithUpdatedYScales(\n\t\t\tinitialChartConfig,\n\t\t\t{ plotData, xAccessor, displayXAccessor, fullData },\n\t\t\tupdatedScale.domain(),\n\t\t\tdy,\n\t\t\tchartsToPan\n\t\t);\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n\t\t// console.log(initialXScale.domain(), newDomain, updatedScale.domain());\n\t\treturn {\n\t\t\txScale: updatedScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t\tmouseXY,\n\t\t\tcurrentCharts,\n\t\t\tcurrentItem,\n\t\t};\n\t}\n\thandlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n\t\tif (!this.waitingForPanAnimationFrame) {\n\t\t\tthis.waitingForPanAnimationFrame = true;\n\n\t\t\tthis.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n\t\t\tthis.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n\n\t\t\tconst state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n\n\t\t\tthis.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n\t\t\tthis.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n\n\t\t\tthis.panInProgress = true;\n\t\t\t// console.log(panStartXScale.domain(), state.xScale.domain());\n\n\t\t\tthis.triggerEvent(\"pan\", state, e);\n\n\t\t\tthis.mutableState = {\n\t\t\t\tmouseXY: state.mouseXY,\n\t\t\t\tcurrentItem: state.currentItem,\n\t\t\t\tcurrentCharts: state.currentCharts,\n\t\t\t};\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.waitingForPanAnimationFrame = false;\n\t\t\t\tthis.clearBothCanvas();\n\t\t\t\tthis.draw({ trigger: \"pan\" });\n\t\t\t});\n\t\t}\n\t}\n\thandlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n\t\tconst state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n\t\t// console.log(this.canvasDrawCallbackList.map(d => d.type));\n\t\tthis.hackyWayToStopPanBeyondBounds__plotData = null;\n\t\tthis.hackyWayToStopPanBeyondBounds__domain = null;\n\n\t\tthis.panInProgress = false;\n\n\t\t// console.log(\"PANEND\", panEnd++);\n\t\tconst {\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t} = state;\n\n\t\tthis.triggerEvent(\"panend\", state, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tconst { xAccessor } = this.state;\n\t\t\tconst { fullData } = this;\n\n\t\t\tconst firstItem = head(fullData);\n\t\t\tconst start = head(xScale.domain());\n\t\t\tconst end = xAccessor(firstItem);\n\t\t\t// console.log(start, end, start < end ? \"Load more\" : \"I have it\");\n\n\t\t\tconst { onLoadMore } = this.props;\n\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tthis.setState({\n\t\t\t\txScale,\n\t\t\t\tplotData,\n\t\t\t\tchartConfig,\n\t\t\t}, () => {\n\t\t\t\tif (start < end) onLoadMore(start, end);\n\t\t\t});\n\t\t});\n\t}\n\thandleMouseDown(mousePosition, currentCharts, e) {\n\t\tthis.triggerEvent(\"mousedown\", this.mutableState, e);\n\t}\n\thandleMouseEnter(e) {\n\t\tthis.triggerEvent(\"mouseenter\", {\n\t\t\tshow: true,\n\t\t}, e);\n\t}\n\thandleMouseMove(mouseXY, inputType, e) {\n\t\tif (!this.waitingForMouseMoveAnimationFrame) {\n\t\t\tthis.waitingForMouseMoveAnimationFrame = true;\n\n\t\t\tconst { chartConfig, plotData, xScale, xAccessor } = this.state;\n\t\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\t\t\tthis.triggerEvent(\"mousemove\", {\n\t\t\t\tshow: true,\n\t\t\t\tmouseXY,\n\t\t\t\t// prevMouseXY is used in interactive components\n\t\t\t\tprevMouseXY: this.prevMouseXY,\n\t\t\t\tcurrentItem,\n\t\t\t\tcurrentCharts,\n\t\t\t}, e);\n\n\t\t\tthis.prevMouseXY = mouseXY;\n\t\t\tthis.mutableState = {\n\t\t\t\tmouseXY,\n\t\t\t\tcurrentItem,\n\t\t\t\tcurrentCharts,\n\t\t\t};\n\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis.clearMouseCanvas();\n\t\t\t\tthis.draw({ trigger: \"mousemove\" });\n\t\t\t\tthis.waitingForMouseMoveAnimationFrame = false;\n\t\t\t});\n\t\t}\n\t}\n\thandleMouseLeave(e) {\n\t\tthis.triggerEvent(\"mouseleave\", { show: false }, e);\n\t\tthis.clearMouseCanvas();\n\t\tthis.draw({ trigger: \"mouseleave\" });\n\t}\n\thandleDragStart({ startPos }, e) {\n\t\tthis.triggerEvent(\"dragstart\", { startPos }, e);\n\t}\n\thandleDrag({ startPos, mouseXY }, e) {\n\t\tconst { chartConfig, plotData, xScale, xAccessor } = this.state;\n\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\n\t\tthis.triggerEvent(\"drag\", {\n\t\t\tstartPos,\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t}, e);\n\n\t\tthis.mutableState = {\n\t\t\tmouseXY,\n\t\t\tcurrentItem,\n\t\t\tcurrentCharts,\n\t\t};\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"drag\" });\n\t\t});\n\t}\n\thandleDragEnd({ mouseXY }, e) {\n\t\tthis.triggerEvent(\"dragend\", { mouseXY }, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"dragend\" });\n\t\t});\n\t}\n\thandleClick(mousePosition, e) {\n\t\tthis.triggerEvent(\"click\", this.mutableState, e);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.clearMouseCanvas();\n\t\t\tthis.draw({ trigger: \"click\" });\n\t\t});\n\t}\n\thandleDoubleClick(mousePosition, e) {\n\t\tthis.triggerEvent(\"dblclick\", {}, e);\n\t}\n\tgetChildContext() {\n\t\tconst dimensions = getDimensions(this.props);\n\t\treturn {\n\t\t\tfullData: this.fullData,\n\t\t\tplotData: this.state.plotData,\n\t\t\twidth: dimensions.width,\n\t\t\theight: dimensions.height,\n\t\t\tchartConfig: this.state.chartConfig,\n\t\t\txScale: this.state.xScale,\n\t\t\txAccessor: this.state.xAccessor,\n\t\t\tdisplayXAccessor: this.state.displayXAccessor,\n\t\t\tchartCanvasType: this.props.type,\n\t\t\tmargin: this.props.margin,\n\t\t\tratio: this.props.ratio,\n\t\t\txAxisZoom: this.xAxisZoom,\n\t\t\tyAxisZoom: this.yAxisZoom,\n\t\t\tgetCanvasContexts: this.getCanvasContexts,\n\t\t\tredraw: this.redraw,\n\t\t\tsubscribe: this.subscribe,\n\t\t\tunsubscribe: this.unsubscribe,\n\t\t\tgenerateSubscriptionId: this.generateSubscriptionId,\n\t\t\tgetMutableState: this.getMutableState,\n\t\t\tamIOnTop: this.amIOnTop,\n\t\t\tsetCursorClass: this.setCursorClass,\n\t\t};\n\t}\n\tcomponentWillMount() {\n\t\tconst { fullData, ...state } = resetChart(this.props, true);\n\t\tthis.setState(state);\n\t\tthis.fullData = fullData;\n\t}\n\tcomponentWillReceiveProps(nextProps) {\n\t\tconst reset = shouldResetChart(this.props, nextProps);\n\n\t\tconst interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n\t\tconst { chartConfig: initialChartConfig } = this.state;\n\n\t\tlet newState;\n\t\tif (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tif (!interaction)\n\t\t\t\t\tlog(\"RESET CHART, changes to a non interactive chart\");\n\t\t\t\telse if (reset)\n\t\t\t\t\tlog(\"RESET CHART, one or more of these props changed\", CANDIDATES_FOR_RESET);\n\t\t\t\telse\n\t\t\t\t\tlog(\"xExtents changed\");\n\t\t\t}\n\t\t\t// do reset\n\t\t\tnewState = resetChart(nextProps);\n\t\t\tthis.mutableState = {};\n\t\t} else {\n\n\t\t\tconst [start, end] = this.state.xScale.domain();\n\t\t\tconst prevLastItem = last(this.fullData);\n\n\t\t\tconst calculatedState = calculateFullData(nextProps);\n\t\t\tconst { xAccessor } = calculatedState;\n\t\t\tconst lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tif (this.props.data !== nextProps.data)\n\t\t\t\t\tlog(\"data is changed but seriesName did not, change the seriesName if you wish to reset the chart and lastItemWasVisible = \", lastItemWasVisible);\n\t\t\t\telse\n\t\t\t\t\tlog(\"Trivial change, may be width/height or type changed, but that does not matter\");\n\t\t\t}\n\n\t\t\tnewState = updateChart(\n\t\t\t\tcalculatedState,\n\t\t\t\tthis.state.xScale,\n\t\t\t\tnextProps,\n\t\t\t\tlastItemWasVisible,\n\t\t\t\tinitialChartConfig,\n\t\t\t);\n\t\t}\n\n\t\tconst { fullData, ...state } = newState;\n\n\t\tif (this.panInProgress) {\n\t\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\t\tlog(\"Pan is in progress\");\n\t\t\t}\n\t\t} else {\n\t\t\t/*\n\t\t\tif (!reset) {\n\t\t\t\tstate.chartConfig\n\t\t\t\t\t.forEach((each) => {\n\t\t\t\t\t\t// const sourceChartConfig = initialChartConfig.filter(d => d.id === each.id);\n\t\t\t\t\t\tconst prevChartConfig = find(initialChartConfig, d => d.id === each.id);\n\t\t\t\t\t\tif (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n\t\t\t\t\t\t\teach.yScale.domain(prevChartConfig.yScale.domain());\n\t\t\t\t\t\t\teach.yPanEnabled = prevChartConfig.yPanEnabled;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t\t*/\n\t\t\tthis.clearThreeCanvas();\n\n\t\t\tthis.setState(state);\n\t\t}\n\t\tthis.fullData = fullData;\n\t}\n\t/*\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconsole.error(this.state.chartConfig, this.state.chartConfig.map(d => d.yScale.domain()));\n\t}\n\t*/\n\tresetYDomain(chartId) {\n\t\tconst { chartConfig } = this.state;\n\t\tlet changed = false;\n\t\tconst newChartConfig = chartConfig\n\t\t\t.map(each => {\n\t\t\t\tif ((isNotDefined(chartId) || each.id === chartId)\n\t\t\t\t\t\t&& !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tyScale: each.yScale.domain(each.realYDomain),\n\t\t\t\t\t\tyPanEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn each;\n\t\t\t});\n\n\t\tif (changed) {\n\t\t\tthis.clearThreeCanvas();\n\t\t\tthis.setState({\n\t\t\t\tchartConfig: newChartConfig\n\t\t\t});\n\t\t}\n\t}\n\tshouldComponentUpdate() {\n\t\t// console.log(\"Happneing.....\", !this.panInProgress)\n\t\treturn !this.panInProgress;\n\t}\n\trender() {\n\n\t\tconst { type, height, width, margin, className, zIndex, defaultFocus, ratio, mouseMoveEvent, panEvent, zoomEvent } = this.props;\n\t\tconst { useCrossHairStyleCursor, onSelect } = this.props;\n\n\t\tconst { plotData, xScale, xAccessor, chartConfig } = this.state;\n\t\tconst dimensions = getDimensions(this.props);\n\n\t\tconst interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n\n\t\tconst cursorStyle = useCrossHairStyleCursor && interaction;\n\t\tconst cursor = getCursorStyle();\n\t\treturn (\n\t\t\t<div style={{ position: \"relative\", width, height }} className={className} onClick={onSelect}>\n\t\t\t\t<CanvasContainer ref={this.saveCanvasContainerNode}\n\t\t\t\t\ttype={type}\n\t\t\t\t\tratio={ratio}\n\t\t\t\t\twidth={width} height={height} zIndex={zIndex}/>\n\t\t\t\t<svg className={className} width={width} height={height} style={{ position: \"absolute\", zIndex: (zIndex + 5) }}>\n\t\t\t\t\t{cursor}\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<clipPath id=\"chart-area-clip\">\n\t\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width={dimensions.width} height={dimensions.height} />\n\t\t\t\t\t\t</clipPath>\n\t\t\t\t\t\t{chartConfig\n\t\t\t\t\t\t\t.map((each, idx) => <clipPath key={idx} id={`chart-area-clip-${each.id}`}>\n\t\t\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width={each.width} height={each.height} />\n\t\t\t\t\t\t\t</clipPath>)}\n\t\t\t\t\t</defs>\n\t\t\t\t\t<g transform={`translate(${margin.left + 0.5}, ${margin.top + 0.5})`}>\n\t\t\t\t\t\t<EventCapture\n\t\t\t\t\t\t\tref={this.saveEventCaptureNode}\n\t\t\t\t\t\t\tuseCrossHairStyleCursor={cursorStyle}\n\t\t\t\t\t\t\tmouseMove={mouseMoveEvent && interaction}\n\t\t\t\t\t\t\tzoom={zoomEvent && interaction}\n\t\t\t\t\t\t\tpan={panEvent && interaction}\n\n\t\t\t\t\t\t\twidth={dimensions.width}\n\t\t\t\t\t\t\theight={dimensions.height}\n\t\t\t\t\t\t\tchartConfig={chartConfig}\n\t\t\t\t\t\t\txScale={xScale}\n\t\t\t\t\t\t\txAccessor={xAccessor}\n\t\t\t\t\t\t\tfocus={defaultFocus}\n\t\t\t\t\t\t\tdisableInteraction={this.props.disableInteraction}\n\n\t\t\t\t\t\t\tgetAllPanConditions={this.getAllPanConditions}\n\t\t\t\t\t\t\tonContextMenu={this.handleContextMenu}\n\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t\tonDoubleClick={this.handleDoubleClick}\n\t\t\t\t\t\t\tonMouseDown={this.handleMouseDown}\n\t\t\t\t\t\t\tonMouseMove={this.handleMouseMove}\n\t\t\t\t\t\t\tonMouseEnter={this.handleMouseEnter}\n\t\t\t\t\t\t\tonMouseLeave={this.handleMouseLeave}\n\n\t\t\t\t\t\t\tonDragStart={this.handleDragStart}\n\t\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\t\tonDragComplete={this.handleDragEnd}\n\n\t\t\t\t\t\t\tonZoom={this.handleZoom}\n\t\t\t\t\t\t\tonPinchZoom={this.handlePinchZoom}\n\t\t\t\t\t\t\tonPinchZoomEnd={this.handlePinchZoomEnd}\n\t\t\t\t\t\t\tonPan={this.handlePan}\n\t\t\t\t\t\t\tonPanEnd={this.handlePanEnd}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<g className=\"react-stockcharts-avoid-interaction\">\n\t\t\t\t\t\t\t{this.props.children}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n\tconst interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n\treturn interaction;\n}\n\nChartCanvas.propTypes = {\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tmargin: PropTypes.object,\n\tratio: PropTypes.number.isRequired,\n\t// interval: PropTypes.oneOf([\"D\", \"W\", \"M\"]), // ,\"m1\", \"m5\", \"m15\", \"W\", \"M\"\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]),\n\tpointsPerPxThreshold: PropTypes.number,\n\tminPointsPerPxThreshold: PropTypes.number,\n\tdata: PropTypes.array.isRequired,\n\t// initialDisplay: PropTypes.number,\n\txAccessor: PropTypes.func,\n\txExtents: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.func\n\t]),\n\tzoomAnchor: PropTypes.func,\n\n\tclassName: PropTypes.string,\n\tseriesName: PropTypes.string.isRequired,\n\tzIndex: PropTypes.number,\n\tchildren: PropTypes.node.isRequired,\n\txScale: PropTypes.func.isRequired,\n\tpostCalculator: PropTypes.func,\n\tflipXScale: PropTypes.bool,\n\tuseCrossHairStyleCursor: PropTypes.bool,\n\tpadding: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.shape({\n\t\t\tleft: PropTypes.number,\n\t\t\tright: PropTypes.number,\n\t\t})\n\t]),\n\tdefaultFocus: PropTypes.bool,\n\tzoomMultiplier: PropTypes.number,\n\tonLoadMore: PropTypes.func,\n\tdisplayXAccessor: function(props, propName/* , componentName */) {\n\t\tif (isNotDefined(props[propName])) {\n\t\t\tconsole.warn(\"`displayXAccessor` is not defined,\"\n\t\t\t\t+ \" will use the value from `xAccessor` as `displayXAccessor`.\"\n\t\t\t\t+ \" This might be ok if you do not use a discontinuous scale\"\n\t\t\t\t+ \" but if you do, provide a `displayXAccessor` prop to `ChartCanvas`\");\n\t\t} else if (typeof props[propName] !== \"function\") {\n\t\t\treturn new Error(\"displayXAccessor has to be a function\");\n\t\t}\n\t},\n\tmouseMoveEvent: PropTypes.bool,\n\tpanEvent: PropTypes.bool,\n\tclamp: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n\tzoomEvent: PropTypes.bool,\n\tonSelect: PropTypes.func,\n\tmaintainPointsPerPixelOnResize: PropTypes.bool,\n\tdisableInteraction: PropTypes.bool,\n};\n\nChartCanvas.defaultProps = {\n\tmargin: { top: 20, right: 30, bottom: 30, left: 80 },\n\ttype: \"hybrid\",\n\tpointsPerPxThreshold: 2,\n\tminPointsPerPxThreshold: 1 / 100,\n\tclassName: \"react-stockchart\",\n\tzIndex: 1,\n\txExtents: [min, max],\n\tpostCalculator: identity,\n\tpadding: 0,\n\txAccessor: identity,\n\tflipXScale: false,\n\tuseCrossHairStyleCursor: true,\n\tdefaultFocus: true,\n\tonLoadMore: noop,\n\tonSelect: noop,\n\tmouseMoveEvent: true,\n\tpanEvent: true,\n\tzoomEvent: true,\n\tzoomMultiplier: 1.1,\n\tclamp: false,\n\tzoomAnchor: mouseBasedZoomAnchor,\n\tmaintainPointsPerPixelOnResize: true,\n\t// ratio: 2,\n\tdisableInteraction: false,\n};\n\nChartCanvas.childContextTypes = {\n\tplotData: PropTypes.array,\n\tfullData: PropTypes.array,\n\tchartConfig: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\t\t\torigin: PropTypes.arrayOf(PropTypes.number).isRequired,\n\t\t\tpadding: PropTypes.oneOfType([\n\t\t\t\tPropTypes.number,\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\ttop: PropTypes.number,\n\t\t\t\t\tbottom: PropTypes.number,\n\t\t\t\t})\n\t\t\t]),\n\t\t\tyExtents: PropTypes.arrayOf(PropTypes.func),\n\t\t\tyExtentsProvider: PropTypes.func,\n\t\t\tyScale: PropTypes.func.isRequired,\n\t\t\tmouseCoordinates: PropTypes.shape({\n\t\t\t\tat: PropTypes.string,\n\t\t\t\tformat: PropTypes.func\n\t\t\t}),\n\t\t\twidth: PropTypes.number.isRequired,\n\t\t\theight: PropTypes.number.isRequired,\n\t\t})\n\t).isRequired,\n\txScale: PropTypes.func.isRequired,\n\txAccessor: PropTypes.func.isRequired,\n\tdisplayXAccessor: PropTypes.func.isRequired,\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tchartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n\tmargin: PropTypes.object.isRequired,\n\tratio: PropTypes.number.isRequired,\n\tgetCanvasContexts: PropTypes.func,\n\txAxisZoom: PropTypes.func,\n\tyAxisZoom: PropTypes.func,\n\tamIOnTop: PropTypes.func,\n\tredraw: PropTypes.func,\n\tsubscribe: PropTypes.func,\n\tunsubscribe: PropTypes.func,\n\tsetCursorClass: PropTypes.func,\n\tgenerateSubscriptionId: PropTypes.func,\n\tgetMutableState: PropTypes.func,\n};\n\nChartCanvas.ohlcv = d => ({ date: d.date, open: d.open, high: d.high, low: d.low, close: d.close, volume: d.volume });\n\nexport default ChartCanvas;\n"]},"metadata":{},"sourceType":"module"}