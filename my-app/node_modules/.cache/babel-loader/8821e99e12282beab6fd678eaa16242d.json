{"ast":null,"code":"/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","map":{"version":3,"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","startLine","isBlank","endLine","join","str","value","_commonIndent","isFirstLine","isEmptyLine","indent","charCodeAt","printBlockString","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","result","replace"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/graphql/language/blockString.mjs"],"sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}