{"ast":null,"code":"import ascending from \"./ascending.js\";\nexport default function least(values, compare = ascending) {\n  let min;\n  let defined = false;\n\n  if (compare.length === 1) {\n    let minValue;\n\n    for (const element of values) {\n      const value = compare(element);\n\n      if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n\n  return min;\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/d3-array/src/least.js"],"names":["ascending","least","values","compare","min","defined","length","minValue","element","value"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,KAAT,CAAeC,MAAf,EAAuBC,OAAO,GAAGH,SAAjC,EAA4C;AACzD,MAAII,GAAJ;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB,QAAIC,QAAJ;;AACA,SAAK,MAAMC,OAAX,IAAsBN,MAAtB,EAA8B;AAC5B,YAAMO,KAAK,GAAGN,OAAO,CAACK,OAAD,CAArB;;AACA,UAAIH,OAAO,GACLL,SAAS,CAACS,KAAD,EAAQF,QAAR,CAAT,GAA6B,CADxB,GAELP,SAAS,CAACS,KAAD,EAAQA,KAAR,CAAT,KAA4B,CAFlC,EAEqC;AACnCL,QAAAA,GAAG,GAAGI,OAAN;AACAD,QAAAA,QAAQ,GAAGE,KAAX;AACAJ,QAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF,GAZD,MAYO;AACL,SAAK,MAAMI,KAAX,IAAoBP,MAApB,EAA4B;AAC1B,UAAIG,OAAO,GACLF,OAAO,CAACM,KAAD,EAAQL,GAAR,CAAP,GAAsB,CADjB,GAELD,OAAO,CAACM,KAAD,EAAQA,KAAR,CAAP,KAA0B,CAFhC,EAEmC;AACjCL,QAAAA,GAAG,GAAGK,KAAN;AACAJ,QAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF;;AACD,SAAOD,GAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\r\n\r\nexport default function least(values, compare = ascending) {\r\n  let min;\r\n  let defined = false;\r\n  if (compare.length === 1) {\r\n    let minValue;\r\n    for (const element of values) {\r\n      const value = compare(element);\r\n      if (defined\r\n          ? ascending(value, minValue) < 0\r\n          : ascending(value, value) === 0) {\r\n        min = element;\r\n        minValue = value;\r\n        defined = true;\r\n      }\r\n    }\r\n  } else {\r\n    for (const value of values) {\r\n      if (defined\r\n          ? compare(value, min) < 0\r\n          : compare(value, value) === 0) {\r\n        min = value;\r\n        defined = true;\r\n      }\r\n    }\r\n  }\r\n  return min;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}