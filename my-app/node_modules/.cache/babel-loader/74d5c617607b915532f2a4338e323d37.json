{"ast":null,"code":"export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon; // fast_expansion_sum_zeroelim routine from oritinal code\n\nexport function sum(elen, e, flen, f, h) {\n  let Q, Qnew, hh, bvirt;\n  let enow = e[0];\n  let fnow = f[0];\n  let eindex = 0;\n  let findex = 0;\n\n  if (fnow > enow === fnow > -enow) {\n    Q = enow;\n    enow = e[++eindex];\n  } else {\n    Q = fnow;\n    fnow = f[++findex];\n  }\n\n  let hindex = 0;\n\n  if (eindex < elen && findex < flen) {\n    if (fnow > enow === fnow > -enow) {\n      Qnew = enow + Q;\n      hh = Q - (Qnew - enow);\n      enow = e[++eindex];\n    } else {\n      Qnew = fnow + Q;\n      hh = Q - (Qnew - fnow);\n      fnow = f[++findex];\n    }\n\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n\n    while (eindex < elen && findex < flen) {\n      if (fnow > enow === fnow > -enow) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n      } else {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n      }\n\n      Q = Qnew;\n\n      if (hh !== 0) {\n        h[hindex++] = hh;\n      }\n    }\n  }\n\n  while (eindex < elen) {\n    Qnew = Q + enow;\n    bvirt = Qnew - Q;\n    hh = Q - (Qnew - bvirt) + (enow - bvirt);\n    enow = e[++eindex];\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  while (findex < flen) {\n    Qnew = Q + fnow;\n    bvirt = Qnew - Q;\n    hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n    fnow = f[++findex];\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  if (Q !== 0 || hindex === 0) {\n    h[hindex++] = Q;\n  }\n\n  return hindex;\n}\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n  return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n} // scale_expansion_zeroelim routine from oritinal code\n\nexport function scale(elen, e, b, h) {\n  let Q, sum, hh, product1, product0;\n  let bvirt, c, ahi, alo, bhi, blo;\n  c = splitter * b;\n  bhi = c - (c - b);\n  blo = b - bhi;\n  let enow = e[0];\n  Q = enow * b;\n  c = splitter * enow;\n  ahi = c - (c - enow);\n  alo = enow - ahi;\n  hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n  let hindex = 0;\n\n  if (hh !== 0) {\n    h[hindex++] = hh;\n  }\n\n  for (let i = 1; i < elen; i++) {\n    enow = e[i];\n    product1 = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n    sum = Q + product0;\n    bvirt = sum - Q;\n    hh = Q - (sum - bvirt) + (product0 - bvirt);\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n\n    Q = product1 + sum;\n    hh = sum - (Q - product1);\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  if (Q !== 0 || hindex === 0) {\n    h[hindex++] = Q;\n  }\n\n  return hindex;\n}\nexport function negate(elen, e) {\n  for (let i = 0; i < elen; i++) e[i] = -e[i];\n\n  return elen;\n}\nexport function estimate(elen, e) {\n  let Q = e[0];\n\n  for (let i = 1; i < elen; i++) Q += e[i];\n\n  return Q;\n}\nexport function vec(n) {\n  return new Float64Array(n);\n}","map":{"version":3,"names":["epsilon","splitter","resulterrbound","sum","elen","e","flen","f","h","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","sum_three","alen","a","blen","b","clen","c","tmp","out","scale","product1","product0","ahi","alo","bhi","blo","i","negate","estimate","vec","n","Float64Array"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/robust-predicates/esm/util.js"],"sourcesContent":["export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}