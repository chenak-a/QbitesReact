{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../../GenericComponent\");\n\nvar _utils = require(\"../../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar InteractiveText = function (_Component) {\n  _inherits(InteractiveText, _Component);\n\n  function InteractiveText(props) {\n    _classCallCheck(this, InteractiveText);\n\n    var _this = _possibleConstructorReturn(this, (InteractiveText.__proto__ || Object.getPrototypeOf(InteractiveText)).call(this, props));\n\n    _this.calculateTextWidth = true;\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    return _this;\n  }\n\n  _createClass(InteractiveText, [{\n    key: \"isHover\",\n    value: function isHover(moreProps) {\n      var onHover = this.props.onHover;\n\n      if ((0, _utils.isDefined)(onHover) && (0, _utils.isDefined)(this.textWidth) && !this.calculateTextWidth) {\n        var _helper = helper(this.props, moreProps, this.textWidth),\n            rect = _helper.rect;\n\n        var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n            x = _moreProps$mouseXY[0],\n            y = _moreProps$mouseXY[1];\n\n        if (x >= rect.x && y >= rect.y && x <= rect.x + rect.width && y <= rect.y + rect.height) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.calculateTextWidth = nextProps.text !== this.props.text || nextProps.fontStyle !== this.props.fontStyle || nextProps.fontWeight !== this.props.fontWeight || nextProps.fontSize !== this.props.fontSize || nextProps.fontFamily !== this.props.fontFamily;\n    }\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var _props = this.props,\n          bgFill = _props.bgFill,\n          bgOpacity = _props.bgOpacity,\n          bgStrokeWidth = _props.bgStrokeWidth,\n          bgStroke = _props.bgStroke,\n          textFill = _props.textFill,\n          fontFamily = _props.fontFamily,\n          fontSize = _props.fontSize,\n          fontStyle = _props.fontStyle,\n          fontWeight = _props.fontWeight,\n          text = _props.text;\n\n      if (this.calculateTextWidth) {\n        ctx.font = fontStyle + \" \" + fontWeight + \" \" + fontSize + \"px \" + fontFamily;\n\n        var _ctx$measureText = ctx.measureText(text),\n            width = _ctx$measureText.width;\n\n        this.textWidth = width;\n        this.calculateTextWidth = false;\n      }\n\n      var selected = this.props.selected;\n\n      var _helper2 = helper(this.props, moreProps, this.textWidth),\n          x = _helper2.x,\n          y = _helper2.y,\n          rect = _helper2.rect;\n\n      ctx.fillStyle = (0, _utils.hexToRGBA)(bgFill, bgOpacity);\n      ctx.beginPath();\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n\n      if (selected) {\n        ctx.strokeStyle = bgStroke;\n        ctx.lineWidth = bgStrokeWidth;\n        ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n      }\n\n      ctx.fillStyle = textFill;\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"center\";\n      ctx.font = fontStyle + \" \" + fontWeight + \" \" + fontSize + \"px \" + fontFamily;\n      ctx.beginPath();\n      ctx.fillText(text, x, y);\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG() {\n      throw new Error(\"svg not implemented\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          selected = _props2.selected,\n          interactiveCursorClass = _props2.interactiveCursorClass;\n      var _props3 = this.props,\n          onHover = _props3.onHover,\n          onUnHover = _props3.onUnHover;\n      var _props4 = this.props,\n          onDragStart = _props4.onDragStart,\n          onDrag = _props4.onDrag,\n          onDragComplete = _props4.onDragComplete;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        isHover: this.isHover,\n        svgDraw: this.renderSVG,\n        canvasToDraw: _GenericComponent.getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return InteractiveText;\n}(_react.Component);\n\nfunction helper(props, moreProps, textWidth) {\n  var position = props.position,\n      fontSize = props.fontSize;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale;\n\n  var _position = _slicedToArray(position, 2),\n      xValue = _position[0],\n      yValue = _position[1];\n\n  var x = xScale(xValue);\n  var y = yScale(yValue);\n  var rect = {\n    x: x - textWidth / 2 - fontSize,\n    y: y - fontSize,\n    width: textWidth + fontSize * 2,\n    height: fontSize * 2\n  };\n  return {\n    x: x,\n    y: y,\n    rect: rect\n  };\n}\n\nInteractiveText.propTypes = {\n  bgFill: _propTypes2.default.string.isRequired,\n  bgOpacity: _propTypes2.default.number.isRequired,\n  bgStrokeWidth: _propTypes2.default.number.isRequired,\n  bgStroke: _propTypes2.default.string.isRequired,\n  textFill: _propTypes2.default.string.isRequired,\n  fontFamily: _propTypes2.default.string.isRequired,\n  fontSize: _propTypes2.default.number.isRequired,\n  fontWeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,\n  fontStyle: _propTypes2.default.string.isRequired,\n  text: _propTypes2.default.string.isRequired,\n  onDragStart: _propTypes2.default.func.isRequired,\n  onDrag: _propTypes2.default.func.isRequired,\n  onDragComplete: _propTypes2.default.func.isRequired,\n  onHover: _propTypes2.default.func,\n  onUnHover: _propTypes2.default.func,\n  defaultClassName: _propTypes2.default.string,\n  interactiveCursorClass: _propTypes2.default.string,\n  tolerance: _propTypes2.default.number.isRequired,\n  selected: _propTypes2.default.bool.isRequired\n};\nInteractiveText.defaultProps = {\n  onDragStart: _utils.noop,\n  onDrag: _utils.noop,\n  onDragComplete: _utils.noop,\n  type: \"SD\",\n  // standard dev\n  fontWeight: \"normal\",\n  // standard dev\n  tolerance: 4,\n  selected: false\n};\nexports.default = InteractiveText;","map":{"version":3,"sources":["../../../../src/lib/interactive/components/InteractiveText.js"],"names":["InteractiveText","moreProps","onHover","rect","helper","x","y","nextProps","ctx","bgFill","bgOpacity","bgStrokeWidth","bgStroke","textFill","fontFamily","fontSize","fontStyle","fontWeight","text","width","selected","interactiveCursorClass","onUnHover","onDragStart","onDrag","onDragComplete","position","props","xScale","yScale","xValue","yValue","textWidth","height","defaultClassName","tolerance","isRequired","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport { isDefined, noop, hexToRGBA } from \"../../utils\";\n\nclass InteractiveText extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.calculateTextWidth = true;\n\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t}\n\tisHover(moreProps) {\n\t\tconst { onHover } = this.props;\n\n\t\tif (\n\t\t\tisDefined(onHover)\n\t\t\t&& isDefined(this.textWidth)\n\t\t\t&& !this.calculateTextWidth\n\t\t) {\n\t\t\tconst { rect } = helper(this.props, moreProps, this.textWidth);\n\t\t\tconst { mouseXY: [x, y] } = moreProps;\n\n\t\t\tif (\n\t\t\t\tx >= rect.x\n\t\t\t\t&& y >= rect.y\n\t\t\t\t&& x <= rect.x + rect.width\n\t\t\t\t&& y <= rect.y + rect.height\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.calculateTextWidth = (\n\t\t\tnextProps.text !== this.props.text\n\t\t\t|| nextProps.fontStyle !== this.props.fontStyle\n\t\t\t|| nextProps.fontWeight !== this.props.fontWeight\n\t\t\t|| nextProps.fontSize !== this.props.fontSize\n\t\t\t|| nextProps.fontFamily !== this.props.fontFamily\n\t\t);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst {\n\t\t\tbgFill,\n\t\t\tbgOpacity,\n\t\t\tbgStrokeWidth,\n\t\t\tbgStroke,\n\t\t\ttextFill,\n\t\t\tfontFamily,\n\t\t\tfontSize,\n\t\t\tfontStyle,\n\t\t\tfontWeight,\n\t\t\ttext,\n\t\t} = this.props;\n\n\t\tif (this.calculateTextWidth) {\n\t\t\tctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\t\t\tconst { width } = ctx.measureText(text);\n\t\t\tthis.textWidth = width;\n\t\t\tthis.calculateTextWidth = false;\n\t\t}\n\n\t\tconst { selected } = this.props;\n\n\t\tconst { x, y, rect } = helper(this.props, moreProps, this.textWidth);\n\n\t\tctx.fillStyle = hexToRGBA(bgFill, bgOpacity);\n\n\t\tctx.beginPath();\n\t\tctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n\n\t\tif (selected) {\n\t\t\tctx.strokeStyle = bgStroke;\n\t\t\tctx.lineWidth = bgStrokeWidth;\n\t\t\tctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n\t\t}\n\n\t\tctx.fillStyle = textFill;\n\t\tctx.textBaseline = \"middle\";\n\t\tctx.textAlign = \"center\";\n\t\tctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n\t\tctx.beginPath();\n\t\tctx.fillText(text, x, y);\n\t}\n\trenderSVG() {\n\t\tthrow new Error(\"svg not implemented\");\n\t}\n\trender() {\n\t\tconst { selected, interactiveCursorClass } = this.props;\n\t\tconst { onHover, onUnHover } = this.props;\n\t\tconst { onDragStart, onDrag, onDragComplete } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tisHover={this.isHover}\n\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\n\t\t\tinteractiveCursorClass={interactiveCursorClass}\n\t\t\tselected={selected}\n\n\t\t\tonDragStart={onDragStart}\n\t\t\tonDrag={onDrag}\n\t\t\tonDragComplete={onDragComplete}\n\t\t\tonHover={onHover}\n\t\t\tonUnHover={onUnHover}\n\n\t\t\tdrawOn={[\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]}\n\t\t/>;\n\t}\n}\n\nfunction helper(props, moreProps, textWidth) {\n\tconst { position, fontSize } = props;\n\n\tconst { xScale, chartConfig: { yScale } } = moreProps;\n\n\tconst [xValue, yValue] = position;\n\tconst x = xScale(xValue);\n\tconst y = yScale(yValue);\n\n\tconst rect = {\n\t\tx: x - textWidth / 2 - fontSize,\n\t\ty: y - fontSize,\n\t\twidth: textWidth + fontSize * 2,\n\t\theight: fontSize * 2,\n\t};\n\n\treturn {\n\t\tx, y, rect\n\t};\n}\n\nInteractiveText.propTypes = {\n\tbgFill: PropTypes.string.isRequired,\n\tbgOpacity: PropTypes.number.isRequired,\n\tbgStrokeWidth: PropTypes.number.isRequired,\n\tbgStroke: PropTypes.string.isRequired,\n\n\ttextFill: PropTypes.string.isRequired,\n\tfontFamily: PropTypes.string.isRequired,\n\tfontSize: PropTypes.number.isRequired,\n\tfontWeight: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t]).isRequired,\n\tfontStyle: PropTypes.string.isRequired,\n\n\ttext: PropTypes.string.isRequired,\n\n\tonDragStart: PropTypes.func.isRequired,\n\tonDrag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\n\tdefaultClassName: PropTypes.string,\n\tinteractiveCursorClass: PropTypes.string,\n\n\ttolerance: PropTypes.number.isRequired,\n\tselected: PropTypes.bool.isRequired,\n};\n\nInteractiveText.defaultProps = {\n\tonDragStart: noop,\n\tonDrag: noop,\n\tonDragComplete: noop,\n\n\ttype: \"SD\", // standard dev\n\tfontWeight: \"normal\", // standard dev\n\n\ttolerance: 4,\n\tselected: false,\n};\n\nexport default InteractiveText;"]},"metadata":{},"sourceType":"script"}