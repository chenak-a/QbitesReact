{"ast":null,"code":"import { InternMap } from \"d3-array\";\nimport { initRange } from \"./init.js\";\nexport const implicit = Symbol(\"implicit\");\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n\n    return range[i % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n  return scale;\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/d3/node_modules/d3-scale/src/ordinal.js"],"names":["InternMap","initRange","implicit","Symbol","ordinal","index","domain","range","unknown","scale","d","i","get","undefined","set","push","length","_","arguments","slice","value","has","Array","from","copy","apply"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,UAAxB;AACA,SAAQC,SAAR,QAAwB,WAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,MAAM,CAAC,UAAD,CAAvB;AAEP,eAAe,SAASC,OAAT,GAAmB;AAChC,MAAIC,KAAK,GAAG,IAAIL,SAAJ,EAAZ;AAAA,MACIM,MAAM,GAAG,EADb;AAAA,MAEIC,KAAK,GAAG,EAFZ;AAAA,MAGIC,OAAO,GAAGN,QAHd;;AAKA,WAASO,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAIC,CAAC,GAAGN,KAAK,CAACO,GAAN,CAAUF,CAAV,CAAR;;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqB;AACnB,UAAIL,OAAO,KAAKN,QAAhB,EAA0B,OAAOM,OAAP;AAC1BH,MAAAA,KAAK,CAACS,GAAN,CAAUJ,CAAV,EAAaC,CAAC,GAAGL,MAAM,CAACS,IAAP,CAAYL,CAAZ,IAAiB,CAAlC;AACD;;AACD,WAAOH,KAAK,CAACI,CAAC,GAAGJ,KAAK,CAACS,MAAX,CAAZ;AACD;;AAEDP,EAAAA,KAAK,CAACH,MAAN,GAAe,UAASW,CAAT,EAAY;AACzB,QAAI,CAACC,SAAS,CAACF,MAAf,EAAuB,OAAOV,MAAM,CAACa,KAAP,EAAP;AACvBb,IAAAA,MAAM,GAAG,EAAT,EAAaD,KAAK,GAAG,IAAIL,SAAJ,EAArB;;AACA,SAAK,MAAMoB,KAAX,IAAoBH,CAApB,EAAuB;AACrB,UAAIZ,KAAK,CAACgB,GAAN,CAAUD,KAAV,CAAJ,EAAsB;AACtBf,MAAAA,KAAK,CAACS,GAAN,CAAUM,KAAV,EAAiBd,MAAM,CAACS,IAAP,CAAYK,KAAZ,IAAqB,CAAtC;AACD;;AACD,WAAOX,KAAP;AACD,GARD;;AAUAA,EAAAA,KAAK,CAACF,KAAN,GAAc,UAASU,CAAT,EAAY;AACxB,WAAOC,SAAS,CAACF,MAAV,IAAoBT,KAAK,GAAGe,KAAK,CAACC,IAAN,CAAWN,CAAX,CAAR,EAAuBR,KAA3C,IAAoDF,KAAK,CAACY,KAAN,EAA3D;AACD,GAFD;;AAIAV,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAASS,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACF,MAAV,IAAoBR,OAAO,GAAGS,CAAV,EAAaR,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAIAC,EAAAA,KAAK,CAACe,IAAN,GAAa,YAAW;AACtB,WAAOpB,OAAO,CAACE,MAAD,EAASC,KAAT,CAAP,CAAuBC,OAAvB,CAA+BA,OAA/B,CAAP;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAACwB,KAAV,CAAgBhB,KAAhB,EAAuBS,SAAvB;AAEA,SAAOT,KAAP;AACD","sourcesContent":["import {InternMap} from \"d3-array\";\r\nimport {initRange} from \"./init.js\";\r\n\r\nexport const implicit = Symbol(\"implicit\");\r\n\r\nexport default function ordinal() {\r\n  var index = new InternMap(),\r\n      domain = [],\r\n      range = [],\r\n      unknown = implicit;\r\n\r\n  function scale(d) {\r\n    let i = index.get(d);\r\n    if (i === undefined) {\r\n      if (unknown !== implicit) return unknown;\r\n      index.set(d, i = domain.push(d) - 1);\r\n    }\r\n    return range[i % range.length];\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    if (!arguments.length) return domain.slice();\r\n    domain = [], index = new InternMap();\r\n    for (const value of _) {\r\n      if (index.has(value)) continue;\r\n      index.set(value, domain.push(value) - 1);\r\n    }\r\n    return scale;\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return ordinal(domain, range).unknown(unknown);\r\n  };\r\n\r\n  initRange.apply(scale, arguments);\r\n\r\n  return scale;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}