{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = zipper;\n\nvar _d3Array = require(\"d3-array\");\n\nvar _identity = require(\"./identity\");\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* an extension to d3.zip so we call a function instead of an array */\n\n\nfunction zipper() {\n  var combine = _identity2.default;\n\n  function zip() {\n    var n = arguments.length;\n    if (!n) return [];\n    var m = (0, _d3Array.min)(arguments, d3_zipLength); // eslint-disable-next-line prefer-const\n\n    var i = void 0,\n        zips = new Array(m);\n\n    for (i = -1; ++i < m;) {\n      for (var j = -1, _zip = zips[i] = new Array(n); ++j < n;) {\n        _zip[j] = arguments[j][i];\n      }\n\n      zips[i] = combine.apply(this, zips[i]);\n    }\n\n    return zips;\n  }\n\n  function d3_zipLength(d) {\n    return d.length;\n  }\n\n  zip.combine = function (x) {\n    if (!arguments.length) {\n      return combine;\n    }\n\n    combine = x;\n    return zip;\n  };\n\n  return zip;\n}","map":{"version":3,"mappings":";;;;;kBAQwBA;;AAJxB;;AAEA;;;;;;;;;AAJA;;;AAMe,SAASA,MAAT,GAAkB;EAChC,IAAIC,4BAAJ;;EAEA,SAASC,GAAT,GAAe;IACd,IAAMC,IAAIC,UAAUC,MAApB;IACA,IAAI,CAACF,CAAL,EAAQ,OAAO,EAAP;IACR,IAAMG,IAAI,kBAAIF,SAAJ,EAAeG,YAAf,CAAV,CAHc,CAKd;;IACA,IAAIC,UAAJ;IAAA,IAAOC,OAAO,IAAIC,KAAJ,CAAUJ,CAAV,CAAd;;IACA,KAAKE,IAAI,CAAC,CAAV,EAAa,EAAEA,CAAF,GAAMF,CAAnB,GAAwB;MACvB,KAAK,IAAIK,IAAI,CAAC,CAAT,EAAYT,OAAMO,KAAKD,CAALC,IAAU,IAAIC,KAAJ,CAAUP,CAAV,CAAjC,EAA+C,EAAEQ,CAAF,GAAMR,CAArD,GAA0D;QACzDD,KAAIS,CAAJT,IAASE,UAAUO,CAAVP,EAAaI,CAAbJ,CAATF;MACA;;MACDO,KAAKD,CAALC,IAAUR,QAAQW,KAARX,CAAc,IAAdA,EAAoBQ,KAAKD,CAALC,CAApBR,CAAVQ;IACA;;IACD,OAAOA,IAAP;EACA;;EACD,SAASF,YAAT,CAAsBM,CAAtB,EAAyB;IACxB,OAAOA,EAAER,MAAT;EACA;;EACDH,IAAID,OAAJC,GAAc,UAASY,CAAT,EAAY;IACzB,IAAI,CAACV,UAAUC,MAAf,EAAuB;MACtB,OAAOJ,OAAP;IACA;;IACDA,UAAUa,CAAVb;IACA,OAAOC,GAAP;EALD;;EAOA,OAAOA,GAAP;AACA","names":["zipper","combine","zip","n","arguments","length","m","d3_zipLength","i","zips","Array","j","apply","d","x"],"sources":["../../../src/lib/utils/zipper.js"],"sourcesContent":["\n\n/* an extension to d3.zip so we call a function instead of an array */\n\nimport { min } from \"d3-array\";\n\nimport identity from \"./identity\";\n\nexport default function zipper() {\n\tlet combine = identity;\n\n\tfunction zip() {\n\t\tconst n = arguments.length;\n\t\tif (!n) return [];\n\t\tconst m = min(arguments, d3_zipLength);\n\n\t\t// eslint-disable-next-line prefer-const\n\t\tlet i, zips = new Array(m);\n\t\tfor (i = -1; ++i < m; ) {\n\t\t\tfor (let j = -1, zip = zips[i] = new Array(n); ++j < n; ) {\n\t\t\t\tzip[j] = arguments[j][i];\n\t\t\t}\n\t\t\tzips[i] = combine.apply(this, zips[i]);\n\t\t}\n\t\treturn zips;\n\t}\n\tfunction d3_zipLength(d) {\n\t\treturn d.length;\n\t}\n\tzip.combine = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn combine;\n\t\t}\n\t\tcombine = x;\n\t\treturn zip;\n\t};\n\treturn zip;\n}\n"]},"metadata":{},"sourceType":"script"}