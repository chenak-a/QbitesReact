{"ast":null,"code":"import * as React from 'react';\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nexport default function useKeyValueMap(flattenOptions) {\n  return React.useMemo(function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}","map":{"version":3,"names":["React","useKeyValueMap","flattenOptions","useMemo","cacheKeyMap","Map","cacheValueMap","forEach","dataNode","set","key","data","value"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/rc-tree-select/es/hooks/useKeyValueMap.js"],"sourcesContent":["import * as React from 'react';\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nexport default function useKeyValueMap(flattenOptions) {\n  return React.useMemo(function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,cAAxB,EAAwC;EACrD,OAAOF,KAAK,CAACG,OAAN,CAAc,YAAY;IAC/B,IAAIC,WAAW,GAAG,IAAIC,GAAJ,EAAlB;IACA,IAAIC,aAAa,GAAG,IAAID,GAAJ,EAApB,CAF+B,CAEA;;IAE/BH,cAAc,CAACK,OAAf,CAAuB,UAAUC,QAAV,EAAoB;MACzCJ,WAAW,CAACK,GAAZ,CAAgBD,QAAQ,CAACE,GAAzB,EAA8BF,QAA9B;MACAF,aAAa,CAACG,GAAd,CAAkBD,QAAQ,CAACG,IAAT,CAAcC,KAAhC,EAAuCJ,QAAvC;IACD,CAHD;IAIA,OAAO,CAACJ,WAAD,EAAcE,aAAd,CAAP;EACD,CATM,EASJ,CAACJ,cAAD,CATI,CAAP;AAUD"},"metadata":{},"sourceType":"module"}