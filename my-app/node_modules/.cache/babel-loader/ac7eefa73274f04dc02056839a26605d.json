{"ast":null,"code":"import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var _this$_options2;\n\n    if (!this.expectOptionalKeyword('implements')) {\n      return [];\n    }\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {\n      var types = []; // Optional leading ampersand\n\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));\n\n      return types;\n    }\n\n    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3; // Legacy support for the SDL?\n\n\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n  ;\n\n  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}","map":{"version":3,"names":["syntaxError","Kind","Location","TokenKind","Source","isSource","DirectiveLocation","Lexer","isPunctuatorTokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","sourceObj","_lexer","_options","_proto","prototype","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","_this","LIST","values","any","BRACKET_R","_this2","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","description","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","_this$_options2","allowLegacySDLImplementsInterfaces","types","AMP","delimitedMany","_this$_options3","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","startToken","_this$_options4","noLocation","lastToken","concat","getTokenKindDesc","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","call","delimiterKind"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var _this$_options2;\n\n    if (!this.expectOptionalKeyword('implements')) {\n      return [];\n    }\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {\n      var types = []; // Optional leading ampersand\n\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));\n\n      return types;\n    }\n\n    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n  ;\n\n  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}