{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.isHovering2 = isHovering2;\nexports.isHovering = isHovering;\nexports.getSlope = getSlope;\nexports.getYIntercept = getYIntercept;\nexports.generateLine = generateLine;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../../GenericComponent\");\n\nvar _utils = require(\"../../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar StraightLine = function (_Component) {\n  _inherits(StraightLine, _Component);\n\n  function StraightLine(props) {\n    _classCallCheck(this, StraightLine);\n\n    var _this = _possibleConstructorReturn(this, (StraightLine.__proto__ || Object.getPrototypeOf(StraightLine)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    return _this;\n  }\n\n  _createClass(StraightLine, [{\n    key: \"isHover\",\n    value: function isHover(moreProps) {\n      var _props = this.props,\n          tolerance = _props.tolerance,\n          onHover = _props.onHover;\n\n      if ((0, _utils.isDefined)(onHover)) {\n        var _props2 = this.props,\n            x1Value = _props2.x1Value,\n            x2Value = _props2.x2Value,\n            y1Value = _props2.y1Value,\n            y2Value = _props2.y2Value,\n            type = _props2.type;\n        var mouseXY = moreProps.mouseXY,\n            xScale = moreProps.xScale;\n        var yScale = moreProps.chartConfig.yScale;\n        var hovering = isHovering({\n          x1Value: x1Value,\n          y1Value: y1Value,\n          x2Value: x2Value,\n          y2Value: y2Value,\n          mouseXY: mouseXY,\n          type: type,\n          tolerance: tolerance,\n          xScale: xScale,\n          yScale: yScale\n        }); // console.log(\"hovering ->\", hovering);\n\n        return hovering;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var _props3 = this.props,\n          stroke = _props3.stroke,\n          strokeWidth = _props3.strokeWidth,\n          strokeOpacity = _props3.strokeOpacity,\n          strokeDasharray = _props3.strokeDasharray;\n\n      var _helper = helper(this.props, moreProps),\n          x1 = _helper.x1,\n          y1 = _helper.y1,\n          x2 = _helper.x2,\n          y2 = _helper.y2;\n\n      ctx.lineWidth = strokeWidth;\n      ctx.strokeStyle = (0, _utils.hexToRGBA)(stroke, strokeOpacity);\n      ctx.setLineDash((0, _utils.getStrokeDasharray)(strokeDasharray).split(\",\"));\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var _props4 = this.props,\n          stroke = _props4.stroke,\n          strokeWidth = _props4.strokeWidth,\n          strokeOpacity = _props4.strokeOpacity,\n          strokeDasharray = _props4.strokeDasharray;\n      var lineWidth = strokeWidth;\n\n      var _helper2 = helper(this.props, moreProps),\n          x1 = _helper2.x1,\n          y1 = _helper2.y1,\n          x2 = _helper2.x2,\n          y2 = _helper2.y2;\n\n      return _react2.default.createElement(\"line\", {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        stroke: stroke,\n        strokeWidth: lineWidth,\n        strokeDasharray: (0, _utils.getStrokeDasharray)(strokeDasharray),\n        strokeOpacity: strokeOpacity\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props5 = this.props,\n          selected = _props5.selected,\n          interactiveCursorClass = _props5.interactiveCursorClass;\n      var _props6 = this.props,\n          onDragStart = _props6.onDragStart,\n          onDrag = _props6.onDrag,\n          onDragComplete = _props6.onDragComplete,\n          onHover = _props6.onHover,\n          onUnHover = _props6.onUnHover;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        isHover: this.isHover,\n        svgDraw: this.renderSVG,\n        canvasToDraw: _GenericComponent.getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return StraightLine;\n}(_react.Component);\n\nfunction isHovering2(start, end, _ref, tolerance) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      mouseX = _ref2[0],\n      mouseY = _ref2[1];\n\n  var m = getSlope(start, end);\n\n  if ((0, _utils.isDefined)(m)) {\n    var b = getYIntercept(m, end);\n    var y = m * mouseX + b;\n    return mouseY < y + tolerance && mouseY > y - tolerance && mouseX > Math.min(start[0], end[0]) - tolerance && mouseX < Math.max(start[0], end[0]) + tolerance;\n  } else {\n    return mouseY >= Math.min(start[1], end[1]) && mouseY <= Math.max(start[1], end[1]) && mouseX < start[0] + tolerance && mouseX > start[0] - tolerance;\n  }\n}\n\nfunction isHovering(_ref3) {\n  var x1Value = _ref3.x1Value,\n      y1Value = _ref3.y1Value,\n      x2Value = _ref3.x2Value,\n      y2Value = _ref3.y2Value,\n      mouseXY = _ref3.mouseXY,\n      type = _ref3.type,\n      tolerance = _ref3.tolerance,\n      xScale = _ref3.xScale,\n      yScale = _ref3.yScale;\n  var line = generateLine({\n    type: type,\n    start: [x1Value, y1Value],\n    end: [x2Value, y2Value],\n    xScale: xScale,\n    yScale: yScale\n  });\n  var start = [xScale(line.x1), yScale(line.y1)];\n  var end = [xScale(line.x2), yScale(line.y2)];\n  var m = getSlope(start, end);\n\n  var _mouseXY = _slicedToArray(mouseXY, 2),\n      mouseX = _mouseXY[0],\n      mouseY = _mouseXY[1];\n\n  if ((0, _utils.isDefined)(m)) {\n    var b = getYIntercept(m, end);\n    var y = m * mouseX + b;\n    return mouseY < y + tolerance && mouseY > y - tolerance && mouseX > Math.min(start[0], end[0]) - tolerance && mouseX < Math.max(start[0], end[0]) + tolerance;\n  } else {\n    return mouseY >= Math.min(start[1], end[1]) && mouseY <= Math.max(start[1], end[1]) && mouseX < start[0] + tolerance && mouseX > start[0] - tolerance;\n  }\n}\n\nfunction helper(props, moreProps) {\n  var x1Value = props.x1Value,\n      x2Value = props.x2Value,\n      y1Value = props.y1Value,\n      y2Value = props.y2Value,\n      type = props.type;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale;\n  var modLine = generateLine({\n    type: type,\n    start: [x1Value, y1Value],\n    end: [x2Value, y2Value],\n    xScale: xScale,\n    yScale: yScale\n  });\n  var x1 = xScale(modLine.x1);\n  var y1 = yScale(modLine.y1);\n  var x2 = xScale(modLine.x2);\n  var y2 = yScale(modLine.y2);\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  };\n}\n\nfunction getSlope(start, end) {\n  var m\n  /* slope */\n  = end[0] === start[0] ? undefined : (end[1] - start[1]) / (end[0] - start[0]);\n  return m;\n}\n\nfunction getYIntercept(m, end) {\n  var b\n  /* y intercept */\n  = -1 * m * end[0] + end[1];\n  return b;\n}\n\nfunction generateLine(_ref4) {\n  var type = _ref4.type,\n      start = _ref4.start,\n      end = _ref4.end,\n      xScale = _ref4.xScale,\n      yScale = _ref4.yScale;\n  var m\n  /* slope */\n  = getSlope(start, end); // console.log(end[0] - start[0], m)\n\n  var b\n  /* y intercept */\n  = getYIntercept(m, start);\n\n  switch (type) {\n    case \"XLINE\":\n      return getXLineCoordinates({\n        type: type,\n        start: start,\n        end: end,\n        xScale: xScale,\n        yScale: yScale,\n        m: m,\n        b: b\n      });\n\n    case \"RAY\":\n      return getRayCoordinates({\n        type: type,\n        start: start,\n        end: end,\n        xScale: xScale,\n        yScale: yScale,\n        m: m,\n        b: b\n      });\n\n    case \"LINE\":\n      return getLineCoordinates({\n        type: type,\n        start: start,\n        end: end,\n        xScale: xScale,\n        yScale: yScale,\n        m: m,\n        b: b\n      });\n  }\n}\n\nfunction getXLineCoordinates(_ref5) {\n  var start = _ref5.start,\n      end = _ref5.end,\n      xScale = _ref5.xScale,\n      yScale = _ref5.yScale,\n      m = _ref5.m,\n      b = _ref5.b;\n\n  var _xScale$domain = xScale.domain(),\n      _xScale$domain2 = _slicedToArray(_xScale$domain, 2),\n      xBegin = _xScale$domain2[0],\n      xFinish = _xScale$domain2[1];\n\n  var _yScale$domain = yScale.domain(),\n      _yScale$domain2 = _slicedToArray(_yScale$domain, 2),\n      yBegin = _yScale$domain2[0],\n      yFinish = _yScale$domain2[1];\n\n  if (end[0] === start[0]) {\n    return {\n      x1: end[0],\n      y1: yBegin,\n      x2: end[0],\n      y2: yFinish\n    };\n  }\n\n  var _ref6 = end[0] > start[0] ? [xBegin, xFinish] : [xFinish, xBegin],\n      _ref7 = _slicedToArray(_ref6, 2),\n      x1 = _ref7[0],\n      x2 = _ref7[1];\n\n  return {\n    x1: x1,\n    y1: m * x1 + b,\n    x2: x2,\n    y2: m * x2 + b\n  };\n}\n\nfunction getRayCoordinates(_ref8) {\n  var start = _ref8.start,\n      end = _ref8.end,\n      xScale = _ref8.xScale,\n      yScale = _ref8.yScale,\n      m = _ref8.m,\n      b = _ref8.b;\n\n  var _xScale$domain3 = xScale.domain(),\n      _xScale$domain4 = _slicedToArray(_xScale$domain3, 2),\n      xBegin = _xScale$domain4[0],\n      xFinish = _xScale$domain4[1];\n\n  var _yScale$domain3 = yScale.domain(),\n      _yScale$domain4 = _slicedToArray(_yScale$domain3, 2),\n      yBegin = _yScale$domain4[0],\n      yFinish = _yScale$domain4[1];\n\n  var x1 = start[0];\n\n  if (end[0] === start[0]) {\n    return {\n      x1: x1,\n      y1: start[1],\n      x2: x1,\n      y2: end[1] > start[1] ? yFinish : yBegin\n    };\n  }\n\n  var x2 = end[0] > start[0] ? xFinish : xBegin;\n  return {\n    x1: x1,\n    y1: m * x1 + b,\n    x2: x2,\n    y2: m * x2 + b\n  };\n}\n\nfunction getLineCoordinates(_ref9) {\n  var start = _ref9.start,\n      end = _ref9.end;\n\n  var _start = _slicedToArray(start, 2),\n      x1 = _start[0],\n      y1 = _start[1];\n\n  var _end = _slicedToArray(end, 2),\n      x2 = _end[0],\n      y2 = _end[1];\n\n  if (end[0] === start[0]) {\n    return {\n      x1: x1,\n      y1: start[1],\n      x2: x1,\n      y2: end[1]\n    };\n  }\n\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  };\n}\n\nStraightLine.propTypes = {\n  x1Value: _propTypes2.default.any.isRequired,\n  x2Value: _propTypes2.default.any.isRequired,\n  y1Value: _propTypes2.default.any.isRequired,\n  y2Value: _propTypes2.default.any.isRequired,\n  interactiveCursorClass: _propTypes2.default.string,\n  stroke: _propTypes2.default.string.isRequired,\n  strokeWidth: _propTypes2.default.number.isRequired,\n  strokeOpacity: _propTypes2.default.number.isRequired,\n  strokeDasharray: _propTypes2.default.oneOf(_utils.strokeDashTypes),\n  type: _propTypes2.default.oneOf([\"XLINE\", // extends from -Infinity to +Infinity\n  \"RAY\", // extends to +/-Infinity in one direction\n  \"LINE\"] // extends between the set bounds\n  ).isRequired,\n  onEdge1Drag: _propTypes2.default.func.isRequired,\n  onEdge2Drag: _propTypes2.default.func.isRequired,\n  onDragStart: _propTypes2.default.func.isRequired,\n  onDrag: _propTypes2.default.func.isRequired,\n  onDragComplete: _propTypes2.default.func.isRequired,\n  onHover: _propTypes2.default.func,\n  onUnHover: _propTypes2.default.func,\n  defaultClassName: _propTypes2.default.string,\n  r: _propTypes2.default.number.isRequired,\n  edgeFill: _propTypes2.default.string.isRequired,\n  edgeStroke: _propTypes2.default.string.isRequired,\n  edgeStrokeWidth: _propTypes2.default.number.isRequired,\n  withEdge: _propTypes2.default.bool.isRequired,\n  children: _propTypes2.default.func.isRequired,\n  tolerance: _propTypes2.default.number.isRequired,\n  selected: _propTypes2.default.bool.isRequired\n};\nStraightLine.defaultProps = {\n  onEdge1Drag: _utils.noop,\n  onEdge2Drag: _utils.noop,\n  onDragStart: _utils.noop,\n  onDrag: _utils.noop,\n  onDragComplete: _utils.noop,\n  edgeStrokeWidth: 3,\n  edgeStroke: \"#000000\",\n  edgeFill: \"#FFFFFF\",\n  r: 10,\n  withEdge: false,\n  strokeWidth: 1,\n  strokeDasharray: \"Solid\",\n  children: _utils.noop,\n  tolerance: 7,\n  selected: false\n};\nexports.default = StraightLine;","map":{"version":3,"sources":["../../../../src/lib/interactive/components/StraightLine.js"],"names":["StraightLine","moreProps","tolerance","onHover","x1Value","x2Value","y1Value","y2Value","type","mouseXY","xScale","yScale","hovering","ctx","stroke","strokeWidth","strokeOpacity","strokeDasharray","x1","y1","x2","y2","helper","lineWidth","selected","interactiveCursorClass","onDragStart","onDrag","onDragComplete","onUnHover","isHovering2","mouseX","mouseY","m","getSlope","b","getYIntercept","y","Math","start","end","isHovering","line","props","modLine","generateLine","xBegin","xFinish","yBegin","yFinish","onEdge1Drag","onEdge2Drag","defaultClassName","r","edgeFill","edgeStroke","edgeStrokeWidth","withEdge","children","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAkGgB8B,W,GAAAA,W;QAkBAW,U,GAAAA,U;QA+DAP,Q,GAAAA,Q;QAMAE,a,GAAAA,a;QAKAS,Y,GAAAA,Y;;AA9LhB,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;AAEA,IAAA,sBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQM7C,Y;;;AACL,WAAA,YAAA,CAAA,KAAA,EAAmB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAAA,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,CAAA,YAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,YAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAGlB,IAAA,KAAA,CAAA,SAAA,GAAiB,KAAA,CAAA,SAAA,CAAA,IAAA,CAAjB,KAAiB,CAAjB;AACA,IAAA,KAAA,CAAA,YAAA,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,CAApB;AACA,IAAA,KAAA,CAAA,OAAA,GAAe,KAAA,CAAA,OAAA,CAAA,IAAA,CAAf,KAAe,CAAf;AALkB,WAAA,KAAA;AAMlB;;;;4BACOC,S,EAAW;AAAA,UAAA,MAAA,GACa,KADb,KAAA;AAAA,UACVC,SADU,GAAA,MAAA,CAAA,SAAA;AAAA,UACCC,OADD,GAAA,MAAA,CAAA,OAAA;;AAGlB,UAAI,CAAA,GAAA,MAAA,CAAA,SAAA,EAAJ,OAAI,CAAJ,EAAwB;AAAA,YAAA,OAAA,GAC8B,KAD9B,KAAA;AAAA,YACfC,OADe,GAAA,OAAA,CAAA,OAAA;AAAA,YACNC,OADM,GAAA,OAAA,CAAA,OAAA;AAAA,YACGC,OADH,GAAA,OAAA,CAAA,OAAA;AAAA,YACYC,OADZ,GAAA,OAAA,CAAA,OAAA;AAAA,YACqBC,IADrB,GAAA,OAAA,CAAA,IAAA;AAAA,YAEfC,OAFe,GAEKR,SAFL,CAAA,OAAA;AAAA,YAENS,MAFM,GAEKT,SAFL,CAAA,MAAA;AAAA,YAGAU,MAHA,GAGaV,SAHb,CAAA,WAGaA,CAHb,MAAA;AAKvB,YAAMW,QAAAA,GAAW,UAAA,CAAW;AAC3BR,UAAAA,OAAAA,EAD2B,OAAA;AAClBE,UAAAA,OAAAA,EADkB,OAAA;AAE3BD,UAAAA,OAAAA,EAF2B,OAAA;AAElBE,UAAAA,OAAAA,EAFkB,OAAA;AAG3BE,UAAAA,OAAAA,EAH2B,OAAA;AAI3BD,UAAAA,IAAAA,EAJ2B,IAAA;AAK3BN,UAAAA,SAAAA,EAL2B,SAAA;AAM3BQ,UAAAA,MAAAA,EAN2B,MAAA;AAO3BC,UAAAA,MAAAA,EAAAA;AAP2B,SAAX,CAAjB,CALuB,CAevB;;AAEA,eAAA,QAAA;AACA;;AACD,aAAA,KAAA;AACA;;;iCACYE,G,EAAKZ,S,EAAW;AAAA,UAAA,OAAA,GACoC,KADpC,KAAA;AAAA,UACpBa,MADoB,GAAA,OAAA,CAAA,MAAA;AAAA,UACZC,WADY,GAAA,OAAA,CAAA,WAAA;AAAA,UACCC,aADD,GAAA,OAAA,CAAA,aAAA;AAAA,UACgBC,eADhB,GAAA,OAAA,CAAA,eAAA;;AAAA,UAAA,OAAA,GAEDK,MAAAA,CAAO,KAAPA,KAAAA,EAFC,SAEDA,CAFC;AAAA,UAEpBJ,EAFoB,GAAA,OAAA,CAAA,EAAA;AAAA,UAEhBC,EAFgB,GAAA,OAAA,CAAA,EAAA;AAAA,UAEZC,EAFY,GAAA,OAAA,CAAA,EAAA;AAAA,UAERC,EAFQ,GAAA,OAAA,CAAA,EAAA;;AAI5BR,MAAAA,GAAAA,CAAAA,SAAAA,GAAAA,WAAAA;AACAA,MAAAA,GAAAA,CAAAA,WAAAA,GAAkB,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,MAAA,EAAlBA,aAAkB,CAAlBA;AACAA,MAAAA,GAAAA,CAAAA,WAAAA,CAAgB,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAA,eAAA,EAAA,KAAA,CAAhBA,GAAgB,CAAhBA;AAEAA,MAAAA,GAAAA,CAAAA,SAAAA;AACAA,MAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AACAA,MAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AACAA,MAAAA,GAAAA,CAAAA,MAAAA;AACA;;;8BACSZ,S,EAAW;AAAA,UAAA,OAAA,GAC4C,KAD5C,KAAA;AAAA,UACZa,MADY,GAAA,OAAA,CAAA,MAAA;AAAA,UACJC,WADI,GAAA,OAAA,CAAA,WAAA;AAAA,UACSC,aADT,GAAA,OAAA,CAAA,aAAA;AAAA,UACwBC,eADxB,GAAA,OAAA,CAAA,eAAA;AAGpB,UAAMM,SAAAA,GAAN,WAAA;;AAHoB,UAAA,QAAA,GAKOD,MAAAA,CAAO,KAAPA,KAAAA,EALP,SAKOA,CALP;AAAA,UAKZJ,EALY,GAAA,QAAA,CAAA,EAAA;AAAA,UAKRC,EALQ,GAAA,QAAA,CAAA,EAAA;AAAA,UAKJC,EALI,GAAA,QAAA,CAAA,EAAA;AAAA,UAKAC,EALA,GAAA,QAAA,CAAA,EAAA;;AAMpB,aACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACC,QAAA,EAAA,EADD,EAAA;AACS,QAAA,EAAA,EADT,EAAA;AACiB,QAAA,EAAA,EADjB,EAAA;AACyB,QAAA,EAAA,EADzB,EAAA;AAEC,QAAA,MAAA,EAFD,MAAA;AAEiB,QAAA,WAAA,EAFjB,SAAA;AAGC,QAAA,eAAA,EAAiB,CAAA,GAAA,MAAA,CAAA,kBAAA,EAHlB,eAGkB,CAHlB;AAIC,QAAA,aAAA,EALF;AACC,OAAA,CADD;AAOA;;;6BACQ;AAAA,UAAA,OAAA,GACqC,KADrC,KAAA;AAAA,UACAG,QADA,GAAA,OAAA,CAAA,QAAA;AAAA,UACUC,sBADV,GAAA,OAAA,CAAA,sBAAA;AAAA,UAAA,OAAA,GAE4D,KAF5D,KAAA;AAAA,UAEAC,WAFA,GAAA,OAAA,CAAA,WAAA;AAAA,UAEaC,MAFb,GAAA,OAAA,CAAA,MAAA;AAAA,UAEqBC,cAFrB,GAAA,OAAA,CAAA,cAAA;AAAA,UAEqCzB,OAFrC,GAAA,OAAA,CAAA,OAAA;AAAA,UAE8C0B,SAF9C,GAAA,OAAA,CAAA,SAAA;AAIR,aAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,OAAA,EAAA;AACN,QAAA,OAAA,EAAS,KADH,OAAA;AAGN,QAAA,OAAA,EAAS,KAHH,SAAA;AAIN,QAAA,YAAA,EAAA,iBAAA,CAJM,cAAA;AAKN,QAAA,UAAA,EAAY,KALN,YAAA;AAON,QAAA,sBAAA,EAPM,sBAAA;AAQN,QAAA,QAAA,EARM,QAAA;AAUN,QAAA,WAAA,EAVM,WAAA;AAWN,QAAA,MAAA,EAXM,MAAA;AAYN,QAAA,cAAA,EAZM,cAAA;AAaN,QAAA,OAAA,EAbM,OAAA;AAcN,QAAA,SAAA,EAdM,SAAA;AAgBN,QAAA,MAAA,EAAQ,CAAA,WAAA,EAAA,KAAA,EAAA,MAAA;AAhBF,OAAA,CAAP;AAkBA;;;;;;AAGK,SAAA,WAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAA8D;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,MAA5BE,MAA4B,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAApBC,MAAoB,GAAA,KAAA,CAAA,CAAA,CAAA;;AACpE,MAAMC,CAAAA,GAAIC,QAAAA,CAAAA,KAAAA,EAAV,GAAUA,CAAV;;AAEA,MAAI,CAAA,GAAA,MAAA,CAAA,SAAA,EAAJ,CAAI,CAAJ,EAAkB;AACjB,QAAMC,CAAAA,GAAIC,aAAAA,CAAAA,CAAAA,EAAV,GAAUA,CAAV;AACA,QAAMC,CAAAA,GAAIJ,CAAAA,GAAAA,MAAAA,GAAV,CAAA;AACA,WAAQD,MAAAA,GAASK,CAAAA,GAAV,SAACL,IACJA,MAAAA,GAAUK,CAAAA,GADP,SAACL,IAEJD,MAAAA,GAASO,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAAnBF,CAAmBE,CAAnBF,IAFN,SAACN,IAGJD,MAAAA,GAASO,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAAnBF,CAAmBE,CAAnBF,IAHb,SAAA;AAHD,GAAA,MAOO;AACN,WAAON,MAAAA,IAAUM,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAA7BR,CAA6BQ,CAAnBF,CAAVN,IACHA,MAAAA,IAAUM,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAD1BR,CAC0BQ,CAAnBF,CADPN,IAEHD,MAAAA,GAASQ,KAAAA,CAAAA,CAAAA,CAAAA,GAFNP,SAAAA,IAGHD,MAAAA,GAASQ,KAAAA,CAAAA,CAAAA,CAAAA,GAHb,SAAA;AAIA;AACD;;AAEM,SAAA,UAAA,CAAA,KAAA,EAQJ;AAAA,MAPFnC,OAOE,GAAA,KAAA,CAPFA,OAOE;AAAA,MAPOE,OAOP,GAAA,KAAA,CAPOA,OAOP;AAAA,MANFD,OAME,GAAA,KAAA,CANFA,OAME;AAAA,MANOE,OAMP,GAAA,KAAA,CANOA,OAMP;AAAA,MALFE,OAKE,GAAA,KAAA,CALFA,OAKE;AAAA,MAJFD,IAIE,GAAA,KAAA,CAJFA,IAIE;AAAA,MAHFN,SAGE,GAAA,KAAA,CAHFA,SAGE;AAAA,MAFFQ,MAEE,GAAA,KAAA,CAFFA,MAEE;AAAA,MADFC,MACE,GAAA,KAAA,CADFA,MACE;AAEF,MAAM+B,IAAAA,GAAO,YAAA,CAAa;AACzBlC,IAAAA,IAAAA,EADyB,IAAA;AAEzB+B,IAAAA,KAAAA,EAAO,CAAA,OAAA,EAFkB,OAElB,CAFkB;AAGzBC,IAAAA,GAAAA,EAAK,CAAA,OAAA,EAHoB,OAGpB,CAHoB;AAIzB9B,IAAAA,MAAAA,EAJyB,MAAA;AAKzBC,IAAAA,MAAAA,EAAAA;AALyB,GAAb,CAAb;AAQA,MAAM4B,KAAAA,GAAQ,CAAC7B,MAAAA,CAAOgC,IAAAA,CAAR,EAAChC,CAAD,EAAkBC,MAAAA,CAAO+B,IAAAA,CAAvC,EAAgC/B,CAAlB,CAAd;AACA,MAAM6B,GAAAA,GAAM,CAAC9B,MAAAA,CAAOgC,IAAAA,CAAR,EAAChC,CAAD,EAAkBC,MAAAA,CAAO+B,IAAAA,CAArC,EAA8B/B,CAAlB,CAAZ;AAEA,MAAMsB,CAAAA,GAAIC,QAAAA,CAAAA,KAAAA,EAAV,GAAUA,CAAV;;AAbE,MAAA,QAAA,GAAA,cAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AAAA,MAcKH,MAdL,GAAA,QAAA,CAAA,CAAA,CAAA;AAAA,MAcaC,MAdb,GAAA,QAAA,CAAA,CAAA,CAAA;;AAgBF,MAAI,CAAA,GAAA,MAAA,CAAA,SAAA,EAAJ,CAAI,CAAJ,EAAkB;AACjB,QAAMG,CAAAA,GAAIC,aAAAA,CAAAA,CAAAA,EAAV,GAAUA,CAAV;AACA,QAAMC,CAAAA,GAAIJ,CAAAA,GAAAA,MAAAA,GAAV,CAAA;AAEA,WAAOD,MAAAA,GAAUK,CAAAA,GAAVL,SAAAA,IACHA,MAAAA,GAAUK,CAAAA,GADPL,SAAAA,IAEHD,MAAAA,GAASO,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAAnBF,CAAmBE,CAAnBF,IAFNN,SAAAA,IAGHD,MAAAA,GAASO,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAAnBF,CAAmBE,CAAnBF,IAHb,SAAA;AAJD,GAAA,MAQO;AACN,WAAON,MAAAA,IAAUM,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAA7BR,CAA6BQ,CAAnBF,CAAVN,IACHA,MAAAA,IAAUM,IAAAA,CAAAA,GAAAA,CAASC,KAAAA,CAATD,CAASC,CAATD,EAAmBE,GAAAA,CAD1BR,CAC0BQ,CAAnBF,CADPN,IAEHD,MAAAA,GAASQ,KAAAA,CAAAA,CAAAA,CAAAA,GAFNP,SAAAA,IAGHD,MAAAA,GAASQ,KAAAA,CAAAA,CAAAA,CAAAA,GAHb,SAAA;AAIA;AACD;;AAED,SAAA,MAAA,CAAA,KAAA,EAAA,SAAA,EAAkC;AAAA,MACzBnC,OADyB,GACoBuC,KADpB,CAAA,OAAA;AAAA,MAChBtC,OADgB,GACoBsC,KADpB,CAAA,OAAA;AAAA,MACPrC,OADO,GACoBqC,KADpB,CAAA,OAAA;AAAA,MACEpC,OADF,GACoBoC,KADpB,CAAA,OAAA;AAAA,MACWnC,IADX,GACoBmC,KADpB,CAAA,IAAA;AAAA,MAGzBjC,MAHyB,GAGWT,SAHX,CAAA,MAAA;AAAA,MAGFU,MAHE,GAGWV,SAHX,CAAA,WAGWA,CAHX,MAAA;AAKjC,MAAM2C,OAAAA,GAAU,YAAA,CAAa;AAC5BpC,IAAAA,IAAAA,EAD4B,IAAA;AAE5B+B,IAAAA,KAAAA,EAAO,CAAA,OAAA,EAFqB,OAErB,CAFqB;AAG5BC,IAAAA,GAAAA,EAAK,CAAA,OAAA,EAHuB,OAGvB,CAHuB;AAI5B9B,IAAAA,MAAAA,EAJ4B,MAAA;AAK5BC,IAAAA,MAAAA,EAAAA;AAL4B,GAAb,CAAhB;AAQA,MAAMO,EAAAA,GAAKR,MAAAA,CAAOkC,OAAAA,CAAlB,EAAWlC,CAAX;AACA,MAAMS,EAAAA,GAAKR,MAAAA,CAAOiC,OAAAA,CAAlB,EAAWjC,CAAX;AACA,MAAMS,EAAAA,GAAKV,MAAAA,CAAOkC,OAAAA,CAAlB,EAAWlC,CAAX;AACA,MAAMW,EAAAA,GAAKV,MAAAA,CAAOiC,OAAAA,CAAlB,EAAWjC,CAAX;AAEA,SAAO;AACNO,IAAAA,EAAAA,EADM,EAAA;AACFC,IAAAA,EAAAA,EADE,EAAA;AACEC,IAAAA,EAAAA,EADF,EAAA;AACMC,IAAAA,EAAAA,EAAAA;AADN,GAAP;AAGA;;AAEM,SAAA,QAAA,CAAA,KAAA,EAAA,GAAA,EAA8B;AACpC,MAAMY;AAAAA;AAAAA,IAAgBO,GAAAA,CAAAA,CAAAA,CAAAA,KAAWD,KAAAA,CAAXC,CAAWD,CAAXC,GAAAA,SAAAA,GAEnB,CAACA,GAAAA,CAAAA,CAAAA,CAAAA,GAASD,KAAAA,CAAV,CAAUA,CAAV,KAAuBC,GAAAA,CAAAA,CAAAA,CAAAA,GAASD,KAAAA,CAFnC,CAEmCA,CAAhC,CAFH;AAGA,SAAA,CAAA;AACA;;AACM,SAAA,aAAA,CAAA,CAAA,EAAA,GAAA,EAA+B;AACrC,MAAMJ;AAAAA;AAAAA,IAAsB,CAAA,CAAA,GAAA,CAAA,GAASK,GAAAA,CAAT,CAASA,CAAT,GAAkBA,GAAAA,CAA9C,CAA8CA,CAA9C;AACA,SAAA,CAAA;AACA;;AAEM,SAAA,YAAA,CAAA,KAAA,EAEJ;AAAA,MADFhC,IACE,GAAA,KAAA,CADFA,IACE;AAAA,MADI+B,KACJ,GAAA,KAAA,CADIA,KACJ;AAAA,MADWC,GACX,GAAA,KAAA,CADWA,GACX;AAAA,MADgB9B,MAChB,GAAA,KAAA,CADgBA,MAChB;AAAA,MADwBC,MACxB,GAAA,KAAA,CADwBA,MACxB;AACF,MAAMsB;AAAAA;AAAAA,IAAgBC,QAAAA,CAAAA,KAAAA,EAAtB,GAAsBA,CAAtB,CADE,CAEF;;AACA,MAAMC;AAAAA;AAAAA,IAAsBC,aAAAA,CAAAA,CAAAA,EAA5B,KAA4BA,CAA5B;;AAEA,UAAA,IAAA;AACC,SAAA,OAAA;AACC,aAAO,mBAAA,CAAoB;AAC1B5B,QAAAA,IAAAA,EAD0B,IAAA;AACpB+B,QAAAA,KAAAA,EADoB,KAAA;AACbC,QAAAA,GAAAA,EADa,GAAA;AACR9B,QAAAA,MAAAA,EADQ,MAAA;AACAC,QAAAA,MAAAA,EADA,MAAA;AACQsB,QAAAA,CAAAA,EADR,CAAA;AACWE,QAAAA,CAAAA,EAAAA;AADX,OAApB,CAAP;;AAGD,SAAA,KAAA;AACC,aAAO,iBAAA,CAAkB;AACxB3B,QAAAA,IAAAA,EADwB,IAAA;AAClB+B,QAAAA,KAAAA,EADkB,KAAA;AACXC,QAAAA,GAAAA,EADW,GAAA;AACN9B,QAAAA,MAAAA,EADM,MAAA;AACEC,QAAAA,MAAAA,EADF,MAAA;AACUsB,QAAAA,CAAAA,EADV,CAAA;AACaE,QAAAA,CAAAA,EAAAA;AADb,OAAlB,CAAP;;AAGD,SAAA,MAAA;AACC,aAAO,kBAAA,CAAmB;AACzB3B,QAAAA,IAAAA,EADyB,IAAA;AACnB+B,QAAAA,KAAAA,EADmB,KAAA;AACZC,QAAAA,GAAAA,EADY,GAAA;AACP9B,QAAAA,MAAAA,EADO,MAAA;AACCC,QAAAA,MAAAA,EADD,MAAA;AACSsB,QAAAA,CAAAA,EADT,CAAA;AACYE,QAAAA,CAAAA,EAAAA;AADZ,OAAnB,CAAP;AAVF;AAcA;;AAED,SAAA,mBAAA,CAAA,KAAA,EAEG;AAAA,MADFI,KACE,GAAA,KAAA,CADFA,KACE;AAAA,MADKC,GACL,GAAA,KAAA,CADKA,GACL;AAAA,MADU9B,MACV,GAAA,KAAA,CADUA,MACV;AAAA,MADkBC,MAClB,GAAA,KAAA,CADkBA,MAClB;AAAA,MAD0BsB,CAC1B,GAAA,KAAA,CAD0BA,CAC1B;AAAA,MAD6BE,CAC7B,GAAA,KAAA,CAD6BA,CAC7B;;AAAA,MAAA,cAAA,GACwBzB,MAAAA,CADxB,MACwBA,EADxB;AAAA,MAAA,eAAA,GAAA,cAAA,CAAA,cAAA,EAAA,CAAA,CAAA;AAAA,MACKoC,MADL,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MACaC,OADb,GAAA,eAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,cAAA,GAEwBpC,MAAAA,CAFxB,MAEwBA,EAFxB;AAAA,MAAA,eAAA,GAAA,cAAA,CAAA,cAAA,EAAA,CAAA,CAAA;AAAA,MAEKqC,MAFL,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MAEaC,OAFb,GAAA,eAAA,CAAA,CAAA,CAAA;;AAIF,MAAIT,GAAAA,CAAAA,CAAAA,CAAAA,KAAWD,KAAAA,CAAf,CAAeA,CAAf,EAAyB;AACxB,WAAO;AACNrB,MAAAA,EAAAA,EAAIsB,GAAAA,CADE,CACFA,CADE;AACMrB,MAAAA,EAAAA,EADN,MAAA;AAENC,MAAAA,EAAAA,EAAIoB,GAAAA,CAFE,CAEFA,CAFE;AAEMnB,MAAAA,EAAAA,EAAI4B;AAFV,KAAP;AAIA;;AATC,MAAA,KAAA,GAUeT,GAAAA,CAAAA,CAAAA,CAAAA,GAASD,KAAAA,CAATC,CAASD,CAATC,GACd,CAAA,MAAA,EADcA,OACd,CADcA,GAEd,CAAA,OAAA,EAZD,MAYC,CAZD;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,MAUKtB,EAVL,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAUSE,EAVT,GAAA,KAAA,CAAA,CAAA,CAAA;;AAcF,SAAO;AACNF,IAAAA,EAAAA,EADM,EAAA;AACFC,IAAAA,EAAAA,EAAIc,CAAAA,GAAAA,EAAAA,GADF,CAAA;AAENb,IAAAA,EAAAA,EAFM,EAAA;AAEFC,IAAAA,EAAAA,EAAIY,CAAAA,GAAAA,EAAAA,GAASE;AAFX,GAAP;AAIA;;AAED,SAAA,iBAAA,CAAA,KAAA,EAEG;AAAA,MADFI,KACE,GAAA,KAAA,CADFA,KACE;AAAA,MADKC,GACL,GAAA,KAAA,CADKA,GACL;AAAA,MADU9B,MACV,GAAA,KAAA,CADUA,MACV;AAAA,MADkBC,MAClB,GAAA,KAAA,CADkBA,MAClB;AAAA,MAD0BsB,CAC1B,GAAA,KAAA,CAD0BA,CAC1B;AAAA,MAD6BE,CAC7B,GAAA,KAAA,CAD6BA,CAC7B;;AAAA,MAAA,eAAA,GACwBzB,MAAAA,CADxB,MACwBA,EADxB;AAAA,MAAA,eAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACKoC,MADL,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MACaC,OADb,GAAA,eAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,eAAA,GAEwBpC,MAAAA,CAFxB,MAEwBA,EAFxB;AAAA,MAAA,eAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAEKqC,MAFL,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MAEaC,OAFb,GAAA,eAAA,CAAA,CAAA,CAAA;;AAIF,MAAM/B,EAAAA,GAAKqB,KAAAA,CAAX,CAAWA,CAAX;;AACA,MAAIC,GAAAA,CAAAA,CAAAA,CAAAA,KAAWD,KAAAA,CAAf,CAAeA,CAAf,EAAyB;AACxB,WAAO;AACNrB,MAAAA,EAAAA,EADM,EAAA;AAENC,MAAAA,EAAAA,EAAIoB,KAAAA,CAFE,CAEFA,CAFE;AAGNnB,MAAAA,EAAAA,EAHM,EAAA;AAINC,MAAAA,EAAAA,EAAImB,GAAAA,CAAAA,CAAAA,CAAAA,GAASD,KAAAA,CAATC,CAASD,CAATC,GAAAA,OAAAA,GAA8BQ;AAJ5B,KAAP;AAMA;;AAED,MAAM5B,EAAAA,GAAKoB,GAAAA,CAAAA,CAAAA,CAAAA,GAASD,KAAAA,CAATC,CAASD,CAATC,GAAAA,OAAAA,GAAX,MAAA;AAIA,SAAO;AACNtB,IAAAA,EAAAA,EADM,EAAA;AACFC,IAAAA,EAAAA,EAAIc,CAAAA,GAAAA,EAAAA,GADF,CAAA;AAENb,IAAAA,EAAAA,EAFM,EAAA;AAEFC,IAAAA,EAAAA,EAAIY,CAAAA,GAAAA,EAAAA,GAASE;AAFX,GAAP;AAIA;;AAED,SAAA,kBAAA,CAAA,KAAA,EAEG;AAAA,MADFI,KACE,GAAA,KAAA,CADFA,KACE;AAAA,MADKC,GACL,GAAA,KAAA,CADKA,GACL;;AAAA,MAAA,MAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,MAEKtB,EAFL,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,MAESC,EAFT,GAAA,MAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,IAAA,GAAA,cAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,MAGKC,EAHL,GAAA,IAAA,CAAA,CAAA,CAAA;AAAA,MAGSC,EAHT,GAAA,IAAA,CAAA,CAAA,CAAA;;AAIF,MAAImB,GAAAA,CAAAA,CAAAA,CAAAA,KAAWD,KAAAA,CAAf,CAAeA,CAAf,EAAyB;AACxB,WAAO;AACNrB,MAAAA,EAAAA,EADM,EAAA;AAENC,MAAAA,EAAAA,EAAIoB,KAAAA,CAFE,CAEFA,CAFE;AAGNnB,MAAAA,EAAAA,EAHM,EAAA;AAINC,MAAAA,EAAAA,EAAImB,GAAAA,CAAAA,CAAAA;AAJE,KAAP;AAMA;;AAED,SAAO;AACNtB,IAAAA,EAAAA,EADM,EAAA;AACFC,IAAAA,EAAAA,EADE,EAAA;AAENC,IAAAA,EAAAA,EAFM,EAAA;AAEFC,IAAAA,EAAAA,EAAAA;AAFE,GAAP;AAIA;;AAEDrB,YAAAA,CAAAA,SAAAA,GAAyB;AACxBI,EAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAAA,GAAA,CADe,UAAA;AAExBC,EAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAAA,GAAA,CAFe,UAAA;AAGxBC,EAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAAA,GAAA,CAHe,UAAA;AAIxBC,EAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAAA,GAAA,CAJe,UAAA;AAMxBkB,EAAAA,sBAAAA,EAAwB,WAAA,CAAA,OAAA,CANA,MAAA;AAOxBX,EAAAA,MAAAA,EAAQ,WAAA,CAAA,OAAA,CAAA,MAAA,CAPgB,UAAA;AAQxBC,EAAAA,WAAAA,EAAa,WAAA,CAAA,OAAA,CAAA,MAAA,CARW,UAAA;AASxBC,EAAAA,aAAAA,EAAe,WAAA,CAAA,OAAA,CAAA,MAAA,CATS,UAAA;AAUxBC,EAAAA,eAAAA,EAAiB,WAAA,CAAA,OAAA,CAAA,KAAA,CAAA,MAAA,CAVO,eAUP,CAVO;AAYxBT,EAAAA,IAAAA,EAAM,WAAA,CAAA,OAAA,CAAA,KAAA,CAAgB,CAAA,OAAA,EACZ;AADY,OAAA,EAEd;AAFF,QAAgB,CAAhB,CAGG;AAHH,IAZkB,UAAA;AAkBxB0C,EAAAA,WAAAA,EAAa,WAAA,CAAA,OAAA,CAAA,IAAA,CAlBW,UAAA;AAmBxBC,EAAAA,WAAAA,EAAa,WAAA,CAAA,OAAA,CAAA,IAAA,CAnBW,UAAA;AAoBxBzB,EAAAA,WAAAA,EAAa,WAAA,CAAA,OAAA,CAAA,IAAA,CApBW,UAAA;AAqBxBC,EAAAA,MAAAA,EAAQ,WAAA,CAAA,OAAA,CAAA,IAAA,CArBgB,UAAA;AAsBxBC,EAAAA,cAAAA,EAAgB,WAAA,CAAA,OAAA,CAAA,IAAA,CAtBQ,UAAA;AAuBxBzB,EAAAA,OAAAA,EAAS,WAAA,CAAA,OAAA,CAvBe,IAAA;AAwBxB0B,EAAAA,SAAAA,EAAW,WAAA,CAAA,OAAA,CAxBa,IAAA;AA0BxBuB,EAAAA,gBAAAA,EAAkB,WAAA,CAAA,OAAA,CA1BM,MAAA;AA4BxBC,EAAAA,CAAAA,EAAG,WAAA,CAAA,OAAA,CAAA,MAAA,CA5BqB,UAAA;AA6BxBC,EAAAA,QAAAA,EAAU,WAAA,CAAA,OAAA,CAAA,MAAA,CA7Bc,UAAA;AA8BxBC,EAAAA,UAAAA,EAAY,WAAA,CAAA,OAAA,CAAA,MAAA,CA9BY,UAAA;AA+BxBC,EAAAA,eAAAA,EAAiB,WAAA,CAAA,OAAA,CAAA,MAAA,CA/BO,UAAA;AAgCxBC,EAAAA,QAAAA,EAAU,WAAA,CAAA,OAAA,CAAA,IAAA,CAhCc,UAAA;AAiCxBC,EAAAA,QAAAA,EAAU,WAAA,CAAA,OAAA,CAAA,IAAA,CAjCc,UAAA;AAkCxBxD,EAAAA,SAAAA,EAAW,WAAA,CAAA,OAAA,CAAA,MAAA,CAlCa,UAAA;AAmCxBsB,EAAAA,QAAAA,EAAU,WAAA,CAAA,OAAA,CAAA,IAAA,CAAemC;AAnCD,CAAzB3D;AAsCAA,YAAAA,CAAAA,YAAAA,GAA4B;AAC3BkD,EAAAA,WAAAA,EAAAA,MAAAA,CAD2B,IAAA;AAE3BC,EAAAA,WAAAA,EAAAA,MAAAA,CAF2B,IAAA;AAG3BzB,EAAAA,WAAAA,EAAAA,MAAAA,CAH2B,IAAA;AAI3BC,EAAAA,MAAAA,EAAAA,MAAAA,CAJ2B,IAAA;AAK3BC,EAAAA,cAAAA,EAAAA,MAAAA,CAL2B,IAAA;AAO3B4B,EAAAA,eAAAA,EAP2B,CAAA;AAQ3BD,EAAAA,UAAAA,EAR2B,SAAA;AAS3BD,EAAAA,QAAAA,EAT2B,SAAA;AAU3BD,EAAAA,CAAAA,EAV2B,EAAA;AAW3BI,EAAAA,QAAAA,EAX2B,KAAA;AAY3B1C,EAAAA,WAAAA,EAZ2B,CAAA;AAa3BE,EAAAA,eAAAA,EAb2B,OAAA;AAc3ByC,EAAAA,QAAAA,EAAAA,MAAAA,CAd2B,IAAA;AAe3BxD,EAAAA,SAAAA,EAf2B,CAAA;AAgB3BsB,EAAAA,QAAAA,EAAU;AAhBiB,CAA5BxB;kBAmBeA,Y","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport {\n\tisDefined,\n\tnoop,\n\thexToRGBA,\n\tgetStrokeDasharray,\n\tstrokeDashTypes,\n} from \"../../utils\";\n\nclass StraightLine extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t}\n\tisHover(moreProps) {\n\t\tconst { tolerance, onHover } = this.props;\n\n\t\tif (isDefined(onHover)) {\n\t\t\tconst { x1Value, x2Value, y1Value, y2Value, type } = this.props;\n\t\t\tconst { mouseXY, xScale } = moreProps;\n\t\t\tconst { chartConfig: { yScale } } = moreProps;\n\n\t\t\tconst hovering = isHovering({\n\t\t\t\tx1Value, y1Value,\n\t\t\t\tx2Value, y2Value,\n\t\t\t\tmouseXY,\n\t\t\t\ttype,\n\t\t\t\ttolerance,\n\t\t\t\txScale,\n\t\t\t\tyScale,\n\t\t\t});\n\n\t\t\t// console.log(\"hovering ->\", hovering);\n\n\t\t\treturn hovering;\n\t\t}\n\t\treturn false;\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, strokeDasharray } = this.props;\n\t\tconst { x1, y1, x2, y2 } = helper(this.props, moreProps);\n\n\t\tctx.lineWidth = strokeWidth;\n\t\tctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\t\tctx.setLineDash(getStrokeDasharray(strokeDasharray).split(\",\"));\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x1, y1);\n\t\tctx.lineTo(x2, y2);\n\t\tctx.stroke();\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, strokeDasharray } = this.props;\n\n\t\tconst lineWidth = strokeWidth;\n\n\t\tconst { x1, y1, x2, y2 } = helper(this.props, moreProps);\n\t\treturn (\n\t\t\t<line\n\t\t\t\tx1={x1} y1={y1} x2={x2} y2={y2}\n\t\t\t\tstroke={stroke} strokeWidth={lineWidth}\n\t\t\t\tstrokeDasharray={getStrokeDasharray(strokeDasharray)}\n\t\t\t\tstrokeOpacity={strokeOpacity} />\n\t\t);\n\t}\n\trender() {\n\t\tconst { selected, interactiveCursorClass } = this.props;\n\t\tconst { onDragStart, onDrag, onDragComplete, onHover, onUnHover } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tisHover={this.isHover}\n\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\n\t\t\tinteractiveCursorClass={interactiveCursorClass}\n\t\t\tselected={selected}\n\n\t\t\tonDragStart={onDragStart}\n\t\t\tonDrag={onDrag}\n\t\t\tonDragComplete={onDragComplete}\n\t\t\tonHover={onHover}\n\t\t\tonUnHover={onUnHover}\n\n\t\t\tdrawOn={[\"mousemove\", \"pan\", \"drag\"]}\n\t\t/>;\n\t}\n}\n\nexport function isHovering2(start, end, [mouseX, mouseY], tolerance) {\n\tconst m = getSlope(start, end);\n\n\tif (isDefined(m)) {\n\t\tconst b = getYIntercept(m, end);\n\t\tconst y = m * mouseX + b;\n\t\treturn (mouseY < y + tolerance)\n\t\t\t&& mouseY > (y - tolerance)\n\t\t\t&& mouseX > Math.min(start[0], end[0]) - tolerance\n\t\t\t&& mouseX < Math.max(start[0], end[0]) + tolerance;\n\t} else {\n\t\treturn mouseY >= Math.min(start[1], end[1])\n\t\t\t&& mouseY <= Math.max(start[1], end[1])\n\t\t\t&& mouseX < start[0] + tolerance\n\t\t\t&& mouseX > start[0] - tolerance;\n\t}\n}\n\nexport function isHovering({\n\tx1Value, y1Value,\n\tx2Value, y2Value,\n\tmouseXY,\n\ttype,\n\ttolerance,\n\txScale,\n\tyScale,\n}) {\n\n\tconst line = generateLine({\n\t\ttype,\n\t\tstart: [x1Value, y1Value],\n\t\tend: [x2Value, y2Value],\n\t\txScale,\n\t\tyScale,\n\t});\n\n\tconst start = [xScale(line.x1), yScale(line.y1)];\n\tconst end = [xScale(line.x2), yScale(line.y2)];\n\n\tconst m = getSlope(start, end);\n\tconst [mouseX, mouseY] = mouseXY;\n\n\tif (isDefined(m)) {\n\t\tconst b = getYIntercept(m, end);\n\t\tconst y = m * mouseX + b;\n\n\t\treturn mouseY < (y + tolerance)\n\t\t\t&& mouseY > (y - tolerance)\n\t\t\t&& mouseX > Math.min(start[0], end[0]) - tolerance\n\t\t\t&& mouseX < Math.max(start[0], end[0]) + tolerance;\n\t} else {\n\t\treturn mouseY >= Math.min(start[1], end[1])\n\t\t\t&& mouseY <= Math.max(start[1], end[1])\n\t\t\t&& mouseX < start[0] + tolerance\n\t\t\t&& mouseX > start[0] - tolerance;\n\t}\n}\n\nfunction helper(props, moreProps) {\n\tconst { x1Value, x2Value, y1Value, y2Value, type } = props;\n\n\tconst { xScale, chartConfig: { yScale } } = moreProps;\n\n\tconst modLine = generateLine({\n\t\ttype,\n\t\tstart: [x1Value, y1Value],\n\t\tend: [x2Value, y2Value],\n\t\txScale,\n\t\tyScale,\n\t});\n\n\tconst x1 = xScale(modLine.x1);\n\tconst y1 = yScale(modLine.y1);\n\tconst x2 = xScale(modLine.x2);\n\tconst y2 = yScale(modLine.y2);\n\n\treturn {\n\t\tx1, y1, x2, y2\n\t};\n}\n\nexport function getSlope(start, end) {\n\tconst m /* slope */ = end[0] === start[0]\n\t\t? undefined\n\t\t: (end[1] - start[1]) / (end[0] - start[0]);\n\treturn m;\n}\nexport function getYIntercept(m, end) {\n\tconst b /* y intercept */ = -1 * m * end[0] + end[1];\n\treturn b;\n}\n\nexport function generateLine({\n\ttype, start, end, xScale, yScale\n}) {\n\tconst m /* slope */ = getSlope(start, end);\n\t// console.log(end[0] - start[0], m)\n\tconst b /* y intercept */ = getYIntercept(m, start);\n\n\tswitch (type) {\n\t\tcase \"XLINE\":\n\t\t\treturn getXLineCoordinates({\n\t\t\t\ttype, start, end, xScale, yScale, m, b\n\t\t\t});\n\t\tcase \"RAY\":\n\t\t\treturn getRayCoordinates({\n\t\t\t\ttype, start, end, xScale, yScale, m, b\n\t\t\t});\n\t\tcase \"LINE\":\n\t\t\treturn getLineCoordinates({\n\t\t\t\ttype, start, end, xScale, yScale, m, b\n\t\t\t});\n\t}\n}\n\nfunction getXLineCoordinates({\n\tstart, end, xScale, yScale, m, b\n}) {\n\tconst [xBegin, xFinish] = xScale.domain();\n\tconst [yBegin, yFinish] = yScale.domain();\n\n\tif (end[0] === start[0]) {\n\t\treturn {\n\t\t\tx1: end[0], y1: yBegin,\n\t\t\tx2: end[0], y2: yFinish,\n\t\t};\n\t}\n\tconst [x1, x2] = end[0] > start[0]\n\t\t? [xBegin, xFinish]\n\t\t: [xFinish, xBegin];\n\n\treturn {\n\t\tx1, y1: m * x1 + b,\n\t\tx2, y2: m * x2 + b\n\t};\n}\n\nfunction getRayCoordinates({\n\tstart, end, xScale, yScale, m, b\n}) {\n\tconst [xBegin, xFinish] = xScale.domain();\n\tconst [yBegin, yFinish] = yScale.domain();\n\n\tconst x1 = start[0];\n\tif (end[0] === start[0]) {\n\t\treturn {\n\t\t\tx1,\n\t\t\ty1: start[1],\n\t\t\tx2: x1,\n\t\t\ty2: end[1] > start[1] ? yFinish : yBegin,\n\t\t};\n\t}\n\n\tconst x2 = end[0] > start[0]\n\t\t? xFinish\n\t\t: xBegin;\n\n\treturn {\n\t\tx1, y1: m * x1 + b,\n\t\tx2, y2: m * x2 + b\n\t};\n}\n\nfunction getLineCoordinates({\n\tstart, end\n}) {\n\n\tconst [x1, y1] = start;\n\tconst [x2, y2] = end;\n\tif (end[0] === start[0]) {\n\t\treturn {\n\t\t\tx1,\n\t\t\ty1: start[1],\n\t\t\tx2: x1,\n\t\t\ty2: end[1],\n\t\t};\n\t}\n\n\treturn {\n\t\tx1, y1,\n\t\tx2, y2,\n\t};\n}\n\nStraightLine.propTypes = {\n\tx1Value: PropTypes.any.isRequired,\n\tx2Value: PropTypes.any.isRequired,\n\ty1Value: PropTypes.any.isRequired,\n\ty2Value: PropTypes.any.isRequired,\n\n\tinteractiveCursorClass: PropTypes.string,\n\tstroke: PropTypes.string.isRequired,\n\tstrokeWidth: PropTypes.number.isRequired,\n\tstrokeOpacity: PropTypes.number.isRequired,\n\tstrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n\n\ttype: PropTypes.oneOf([\n\t\t\"XLINE\", // extends from -Infinity to +Infinity\n\t\t\"RAY\", // extends to +/-Infinity in one direction\n\t\t\"LINE\", // extends between the set bounds\n\t]).isRequired,\n\n\tonEdge1Drag: PropTypes.func.isRequired,\n\tonEdge2Drag: PropTypes.func.isRequired,\n\tonDragStart: PropTypes.func.isRequired,\n\tonDrag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\n\tdefaultClassName: PropTypes.string,\n\n\tr: PropTypes.number.isRequired,\n\tedgeFill: PropTypes.string.isRequired,\n\tedgeStroke: PropTypes.string.isRequired,\n\tedgeStrokeWidth: PropTypes.number.isRequired,\n\twithEdge: PropTypes.bool.isRequired,\n\tchildren: PropTypes.func.isRequired,\n\ttolerance: PropTypes.number.isRequired,\n\tselected: PropTypes.bool.isRequired,\n};\n\nStraightLine.defaultProps = {\n\tonEdge1Drag: noop,\n\tonEdge2Drag: noop,\n\tonDragStart: noop,\n\tonDrag: noop,\n\tonDragComplete: noop,\n\n\tedgeStrokeWidth: 3,\n\tedgeStroke: \"#000000\",\n\tedgeFill: \"#FFFFFF\",\n\tr: 10,\n\twithEdge: false,\n\tstrokeWidth: 1,\n\tstrokeDasharray: \"Solid\",\n\tchildren: noop,\n\ttolerance: 7,\n\tselected: false,\n};\n\nexport default StraightLine;\n"]},"metadata":{},"sourceType":"script"}