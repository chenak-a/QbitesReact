{"ast":null,"code":"import { bisect } from \"d3-array\";\nimport { interpolate as interpolateValue, interpolateRound } from \"d3-interpolate\";\nimport { map, slice } from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\nvar unit = [0, 1];\nexport function deinterpolateLinear(a, b) {\n  return (b -= a = +a) ? function (x) {\n    return (x - a) / b;\n  } : constant(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function (a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function (x) {\n      return x <= a ? 0 : x >= b ? 1 : d(x);\n    };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function (a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function (t) {\n      return t <= 0 ? a : t >= 1 ? b : r(t);\n    };\n  };\n}\n\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0],\n      d1 = domain[1],\n      r0 = range[0],\n      r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function (x) {\n    return r0(d0(x));\n  };\n}\n\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1; // Reverse descending domains.\n\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n\n  return function (x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());\n} // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      clamp = false,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n\n  scale.invert = function (y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function (_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  return rescale();\n}","map":{"version":3,"names":["bisect","interpolate","interpolateValue","interpolateRound","map","slice","constant","number","unit","deinterpolateLinear","a","b","x","deinterpolateClamp","deinterpolate","d","reinterpolateClamp","reinterpolate","r","t","bimap","domain","range","d0","d1","r0","r1","polymap","j","Math","min","length","Array","i","reverse","copy","source","target","clamp","continuous","piecewise","output","input","rescale","scale","invert","y","_","arguments","call","rangeRound"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/d3-scale/src/continuous.js"],"sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function deinterpolateLinear(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function(a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function(a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n  };\n}\n\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp());\n}\n\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      clamp = false,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n\n  scale.invert = function(y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  return rescale();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}