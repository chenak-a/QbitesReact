{"ast":null,"code":"import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = quadtree(nodes, x, y).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        i; // For internal nodes, accumulate forces from child quadrants.\n\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n\n      quad.x = x / weight;\n      quad.y = y / weight;\n    } // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n\n      do strength += strengths[q.data.index]; while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","map":{"version":3,"names":["quadtree","constant","jiggle","x","y","nodes","node","random","alpha","strength","strengths","distanceMin2","distanceMax2","Infinity","theta2","force","_","i","n","length","tree","visitAfter","accumulate","visit","apply","initialize","Array","index","quad","q","c","weight","Math","abs","value","data","next","x1","x2","w","l","sqrt","vx","vy","_nodes","_random","arguments","distanceMin","distanceMax","theta"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/d3/node_modules/d3-force/src/manyBody.js"],"sourcesContent":["import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}