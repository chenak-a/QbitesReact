{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return /*#__PURE__*/React.createElement(BodyRow, _extends({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"names":["_extends","_objectSpread","_slicedToArray","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","rowKey","getRowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","fixHeader","fixColumn","horizonScroll","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","additionalProps","onClick","event","_additionalProps","_len","arguments","length","args","Array","_key","apply","concat","computeRowClassName","columnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","nestRowNode","subRecord","subIndex","subKey","displayName"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/rc-table/es/Body/BodyRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return /*#__PURE__*/React.createElement(BodyRow, _extends({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"],"mappings":"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"},"metadata":{},"sourceType":"module"}