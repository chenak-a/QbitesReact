{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.Change;\n\n  function calculator(data) {\n    var _options = options,\n        sourcePath = _options.sourcePath;\n    var algo = (0, _utils.slidingWindow)().windowSize(2).sourcePath(sourcePath).accumulator(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          curr = _ref2[1];\n\n      var absoluteChange = curr - prev;\n      var percentChange = absoluteChange * 100 / prev;\n      return {\n        absoluteChange: absoluteChange,\n        percentChange: percentChange\n      };\n    });\n    var newData = algo(data);\n    return newData;\n  }\n\n  calculator.undefinedLength = function () {\n    return 1;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.Change, x);\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");","map":{"version":3,"sources":["../../../src/lib/calculator/change.js"],"names":["options","sourcePath","algo","prev","curr","absoluteChange","percentChange","newData","calculator","arguments"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAKe,YAAW;AACzB,MAAIA,OAAAA,GAAAA,6BAAAA,CAAJ,MAAA;;AAEA,WAAA,UAAA,CAAA,IAAA,EAA0B;AAAA,QAAA,QAAA,GAAA,OAAA;AAAA,QACjBC,UADiB,GAAA,QAAA,CAAA,UAAA;AAGzB,QAAMC,IAAAA,GAAO,CAAA,GAAA,MAAA,CAAA,aAAA,IAAA,UAAA,CAAA,CAAA,EAAA,UAAA,CAAA,UAAA,EAAA,WAAA,CAGC,UAAA,IAAA,EAAkB;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAhBC,IAAgB,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,UAAVC,IAAU,GAAA,KAAA,CAAA,CAAA,CAAA;;AAC9B,UAAMC,cAAAA,GAAiBD,IAAAA,GAAvB,IAAA;AACA,UAAME,aAAAA,GAAgBD,cAAAA,GAAAA,GAAAA,GAAtB,IAAA;AACA,aAAO;AAAEA,QAAAA,cAAAA,EAAF,cAAA;AAAkBC,QAAAA,aAAAA,EAAzB;AAAO,OAAP;AANF,KAAa,CAAb;AASA,QAAMC,OAAAA,GAAUL,IAAAA,CAAhB,IAAgBA,CAAhB;AAEA,WAAA,OAAA;AACA;;AACDM,EAAAA,UAAAA,CAAAA,eAAAA,GAA6B,YAAW;AACvC,WAAA,CAAA;AADDA,GAAAA;;AAGAA,EAAAA,UAAAA,CAAAA,OAAAA,GAAqB,UAAA,CAAA,EAAY;AAChC,QAAI,CAACC,SAAAA,CAAL,MAAA,EAAuB;AACtB,aAAA,OAAA;AACA;;AACDT,IAAAA,OAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,6BAAAA,CAAAA,MAAAA,EAAAA,CAAAA,CAAAA;AACA,WAAA,UAAA;AALDQ,GAAAA;;AAQA,SAAA,UAAA;;;AAjCD,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA","sourcesContent":["\n\nimport { slidingWindow } from \"../utils\";\nimport { Change as defaultOptions } from \"./defaultOptionsForComputation\";\n\nexport default function() {\n\tlet options = defaultOptions;\n\n\tfunction calculator(data) {\n\t\tconst { sourcePath } = options;\n\n\t\tconst algo = slidingWindow()\n\t\t\t.windowSize(2)\n\t\t\t.sourcePath(sourcePath)\n\t\t\t.accumulator(([prev, curr]) => {\n\t\t\t\tconst absoluteChange = curr - prev;\n\t\t\t\tconst percentChange = absoluteChange * 100 / prev;\n\t\t\t\treturn { absoluteChange, percentChange };\n\t\t\t});\n\n\t\tconst newData = algo(data);\n\n\t\treturn newData;\n\t}\n\tcalculator.undefinedLength = function() {\n\t\treturn 1;\n\t};\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\n\treturn calculator;\n}\n"]},"metadata":{},"sourceType":"script"}