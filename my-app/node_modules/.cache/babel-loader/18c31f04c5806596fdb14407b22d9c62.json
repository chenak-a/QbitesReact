{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../../GenericComponent\");\n\nvar _StraightLine = require(\"./StraightLine\");\n\nvar _utils = require(\"../../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ClickableShape = function (_Component) {\n  _inherits(ClickableShape, _Component);\n\n  function ClickableShape(props) {\n    _classCallCheck(this, ClickableShape);\n\n    var _this = _possibleConstructorReturn(this, (ClickableShape.__proto__ || Object.getPrototypeOf(ClickableShape)).call(this, props));\n\n    _this.saveNode = _this.saveNode.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    return _this;\n  }\n\n  _createClass(ClickableShape, [{\n    key: \"saveNode\",\n    value: function saveNode(node) {\n      this.node = node;\n    }\n  }, {\n    key: \"isHover\",\n    value: function isHover(moreProps) {\n      var mouseXY = moreProps.mouseXY;\n\n      if (this.closeIcon) {\n        var textBox = this.props.textBox;\n        var _closeIcon = this.closeIcon,\n            x = _closeIcon.x,\n            y = _closeIcon.y;\n        var halfWidth = textBox.closeIcon.width / 2;\n        var start1 = [x - halfWidth, y - halfWidth];\n        var end1 = [x + halfWidth, y + halfWidth];\n        var start2 = [x - halfWidth, y + halfWidth];\n        var end2 = [x + halfWidth, y - halfWidth];\n\n        if ((0, _StraightLine.isHovering2)(start1, end1, mouseXY, 3) || (0, _StraightLine.isHovering2)(start2, end2, mouseXY, 3)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var _props = this.props,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          strokeOpacity = _props.strokeOpacity,\n          hovering = _props.hovering,\n          textBox = _props.textBox;\n\n      var _helper = helper(this.props, moreProps, ctx),\n          _helper2 = _slicedToArray(_helper, 2),\n          x = _helper2[0],\n          y = _helper2[1];\n\n      this.closeIcon = {\n        x: x,\n        y: y\n      };\n      ctx.beginPath();\n      ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n      ctx.strokeStyle = (0, _utils.hexToRGBA)(stroke, strokeOpacity);\n      var halfWidth = textBox.closeIcon.width / 2;\n      ctx.moveTo(x - halfWidth, y - halfWidth);\n      ctx.lineTo(x + halfWidth, y + halfWidth);\n      ctx.moveTo(x - halfWidth, y + halfWidth);\n      ctx.lineTo(x + halfWidth, y - halfWidth);\n      ctx.stroke();\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG() {\n      throw new Error(\"svg not implemented\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var interactiveCursorClass = this.props.interactiveCursorClass;\n      var show = this.props.show;\n      var _props2 = this.props,\n          onHover = _props2.onHover,\n          onUnHover = _props2.onUnHover,\n          onClick = _props2.onClick;\n      return show ? _react2.default.createElement(_GenericChartComponent2.default, {\n        ref: this.saveNode,\n        interactiveCursorClass: interactiveCursorClass,\n        isHover: this.isHover,\n        onClickWhenHover: onClick,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getMouseCanvas,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"pan\", \"mousemove\", \"drag\"]\n      }) : null;\n    }\n  }]);\n\n  return ClickableShape;\n}(_react.Component);\n\nfunction helper(props, moreProps, ctx) {\n  var yValue = props.yValue,\n      text = props.text,\n      textBox = props.textBox;\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight,\n      fontSize = props.fontSize;\n  ctx.font = fontStyle + \" \" + fontWeight + \" \" + fontSize + \"px \" + fontFamily;\n  var yScale = moreProps.chartConfig.yScale;\n  var x = textBox.left + textBox.padding.left + ctx.measureText(text).width + textBox.padding.right + textBox.closeIcon.padding.left + textBox.closeIcon.width / 2;\n  var y = yScale(yValue);\n  return [x, y];\n}\n\nClickableShape.propTypes = {\n  stroke: _propTypes2.default.string.isRequired,\n  strokeOpacity: _propTypes2.default.number.isRequired,\n  strokeWidth: _propTypes2.default.number.isRequired,\n  textBox: _propTypes2.default.object.isRequired,\n  hovering: _propTypes2.default.bool,\n  interactiveCursorClass: _propTypes2.default.string,\n  show: _propTypes2.default.bool,\n  onHover: _propTypes2.default.func,\n  onUnHover: _propTypes2.default.func,\n  onClick: _propTypes2.default.func\n};\nClickableShape.defaultProps = {\n  show: false,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\nexports.default = ClickableShape;","map":{"version":3,"mappings":"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","names":["ClickableShape","props","_classCallCheck","_this","saveNode","bind","drawOnCanvas","isHover","node","moreProps","mouseXY","closeIcon","textBox","x","y","halfWidth","width","start1","end1","start2","end2","ctx","stroke","strokeWidth","strokeOpacity","hovering","helper","beginPath","lineWidth","strokeStyle","moveTo","lineTo","Error","interactiveCursorClass","show","onHover","onUnHover","onClick","_react2","ref","onClickWhenHover","svgDraw","renderSVG","canvasDraw","canvasToDraw","drawOn","yValue","text","fontFamily","fontStyle","fontWeight","fontSize","font","yScale","chartConfig","left","padding","measureText","right","propTypes","_propTypes2","string","isRequired","number","object","bool","func","defaultProps","fillOpacity"],"sources":["../../../../src/lib/interactive/components/ClickableShape.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport { isHovering2 } from \"./StraightLine\";\nimport { hexToRGBA } from \"../../utils\";\n\nclass ClickableShape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.saveNode = this.saveNode.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t}\n\tsaveNode(node) {\n\t\tthis.node = node;\n\t}\n\tisHover(moreProps) {\n\t\tconst { mouseXY } = moreProps;\n\t\tif (this.closeIcon) {\n\t\t\tconst { textBox } = this.props;\n\t\t\tconst { x, y } = this.closeIcon;\n\t\t\tconst halfWidth = textBox.closeIcon.width / 2;\n\n\t\t\tconst start1 = [x - halfWidth, y - halfWidth];\n\t\t\tconst end1 = [x + halfWidth, y + halfWidth];\n\t\t\tconst start2 = [x - halfWidth, y + halfWidth];\n\t\t\tconst end2 = [x + halfWidth, y - halfWidth];\n\n\t\t\tif (isHovering2(start1, end1, mouseXY, 3) || isHovering2(start2, end2, mouseXY, 3)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, hovering, textBox } = this.props;\n\n\t\tconst [x, y] = helper(this.props, moreProps, ctx);\n\n\t\tthis.closeIcon = { x, y };\n\t\tctx.beginPath();\n\n\t\tctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n\t\tctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\t\tconst halfWidth = textBox.closeIcon.width / 2;\n\t\tctx.moveTo(x - halfWidth, y - halfWidth);\n\t\tctx.lineTo(x + halfWidth, y + halfWidth);\n\t\tctx.moveTo(x - halfWidth, y + halfWidth);\n\t\tctx.lineTo(x + halfWidth, y - halfWidth);\n\t\tctx.stroke();\n\t}\n\trenderSVG() {\n\t\tthrow new Error(\"svg not implemented\");\n\t}\n\trender() {\n\t\tconst { interactiveCursorClass } = this.props;\n\t\tconst { show } = this.props;\n\t\tconst { onHover, onUnHover, onClick } = this.props;\n\n\t\treturn show\n\t\t\t? <GenericChartComponent ref={this.saveNode}\n\t\t\t\tinteractiveCursorClass={interactiveCursorClass}\n\t\t\t\tisHover={this.isHover}\n\n\t\t\t\tonClickWhenHover={onClick}\n\n\t\t\t\tsvgDraw={this.renderSVG}\n\n\t\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\t\tcanvasToDraw={getMouseCanvas}\n\n\t\t\t\tonHover={onHover}\n\t\t\t\tonUnHover={onUnHover}\n\n\t\t\t\tdrawOn={[\"pan\", \"mousemove\", \"drag\"]}\n\t\t\t/>\n\t\t\t: null;\n\t}\n}\n\nfunction helper(props, moreProps, ctx) {\n\tconst { yValue, text, textBox } = props;\n\tconst { fontFamily, fontStyle, fontWeight, fontSize } = props;\n\tctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n\tconst { chartConfig: { yScale } } = moreProps;\n\n\tconst x = textBox.left\n\t\t+ textBox.padding.left\n\t\t+ ctx.measureText(text).width\n\t\t+ textBox.padding.right\n\t\t+ textBox.closeIcon.padding.left\n\t\t+ textBox.closeIcon.width / 2;\n\n\tconst y = yScale(yValue);\n\n\treturn [x, y];\n\n}\n\nClickableShape.propTypes = {\n\tstroke: PropTypes.string.isRequired,\n\tstrokeOpacity: PropTypes.number.isRequired,\n\tstrokeWidth: PropTypes.number.isRequired,\n\ttextBox: PropTypes.object.isRequired,\n\thovering: PropTypes.bool,\n\tinteractiveCursorClass: PropTypes.string,\n\tshow: PropTypes.bool,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\tonClick: PropTypes.func,\n};\n\n\nClickableShape.defaultProps = {\n\tshow: false,\n\tfillOpacity: 1,\n\tstrokeOpacity: 1,\n\tstrokeWidth: 1,\n};\n\nexport default ClickableShape;\n"]},"metadata":{},"sourceType":"script"}