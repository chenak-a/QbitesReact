{"ast":null,"code":"import defineInspect from \"../jsutils/defineInspect.mjs\";\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\n\nexport var Location = /*#__PURE__*/function () {\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\n\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\n\n  /**\r\n   * The Token at which this Node begins.\r\n   */\n\n  /**\r\n   * The Token at which this Node ends.\r\n   */\n\n  /**\r\n   * The Source document the AST represents.\r\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\r\n   * The kind of Token.\r\n   */\n\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\n\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\n\n  /**\r\n   * The 1-indexed line number on which this Token appears.\r\n   */\n\n  /**\r\n   * The 1-indexed column number at which this Token begins.\r\n   */\n\n  /**\r\n   * For non-punctuation tokens, represents the interpreted value of the token.\r\n   */\n\n  /**\r\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n   * including ignored tokens. <SOF> is always the first node and <EOF>\r\n   * the last.\r\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\r\n * @internal\r\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\r\n * The list of all possible AST node types.\r\n */","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/graphql/language/ast.mjs"],"names":["defineInspect","Location","startToken","endToken","source","start","end","_proto","prototype","toJSON","Token","kind","line","column","prev","value","next","_proto2","isNode","maybeNode"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8BAA1B;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,aAAa,YAAY;AAC7C;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACE,WAASA,QAAT,CAAkBC,UAAlB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AAC9C,SAAKC,KAAL,GAAaH,UAAU,CAACG,KAAxB;AACA,SAAKC,GAAL,GAAWH,QAAQ,CAACG,GAApB;AACA,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAED,MAAIG,MAAM,GAAGN,QAAQ,CAACO,SAAtB;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,SAASA,MAAT,GAAkB;AAChC,WAAO;AACLJ,MAAAA,KAAK,EAAE,KAAKA,KADP;AAELC,MAAAA,GAAG,EAAE,KAAKA;AAFL,KAAP;AAID,GALD;;AAOA,SAAOL,QAAP;AACD,CAtCkC,EAA5B,C,CAsCF;;AAELD,aAAa,CAACC,QAAD,CAAb;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIS,KAAK,GAAG,aAAa,YAAY;AAC1C;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACE,WAASA,KAAT,CAAeC,IAAf,EAAqBN,KAArB,EAA4BC,GAA5B,EAAiCM,IAAjC,EAAuCC,MAAvC,EAA+CC,IAA/C,EAAqDC,KAArD,EAA4D;AAC1D,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKM,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,IAAL,GAAY,IAAZ;AACD;;AAED,MAAIC,OAAO,GAAGP,KAAK,CAACF,SAApB;;AAEAS,EAAAA,OAAO,CAACR,MAAR,GAAiB,SAASA,MAAT,GAAkB;AACjC,WAAO;AACLE,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELI,MAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLH,MAAAA,IAAI,EAAE,KAAKA,IAHN;AAILC,MAAAA,MAAM,EAAE,KAAKA;AAJR,KAAP;AAMD,GAPD;;AASA,SAAOH,KAAP;AACD,CArD+B,EAAzB,C,CAqDF;;AAELV,aAAa,CAACU,KAAD,CAAb;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,MAAT,CAAgBC,SAAhB,EAA2B;AAChC,SAAOA,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAS,CAACR,IAAjB,KAA0B,QAAtD;AACD;AACD;AACA;AACA","sourcesContent":["import defineInspect from \"../jsutils/defineInspect.mjs\";\r\n\r\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\r\nexport var Location = /*#__PURE__*/function () {\r\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The Token at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The Token at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The Source document the AST represents.\r\n   */\r\n  function Location(startToken, endToken, source) {\r\n    this.start = startToken.start;\r\n    this.end = endToken.end;\r\n    this.startToken = startToken;\r\n    this.endToken = endToken;\r\n    this.source = source;\r\n  }\r\n\r\n  var _proto = Location.prototype;\r\n\r\n  _proto.toJSON = function toJSON() {\r\n    return {\r\n      start: this.start,\r\n      end: this.end\r\n    };\r\n  };\r\n\r\n  return Location;\r\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\r\n\r\ndefineInspect(Location);\r\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\r\n\r\nexport var Token = /*#__PURE__*/function () {\r\n  /**\r\n   * The kind of Token.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node begins.\r\n   */\r\n\r\n  /**\r\n   * The character offset at which this Node ends.\r\n   */\r\n\r\n  /**\r\n   * The 1-indexed line number on which this Token appears.\r\n   */\r\n\r\n  /**\r\n   * The 1-indexed column number at which this Token begins.\r\n   */\r\n\r\n  /**\r\n   * For non-punctuation tokens, represents the interpreted value of the token.\r\n   */\r\n\r\n  /**\r\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n   * including ignored tokens. <SOF> is always the first node and <EOF>\r\n   * the last.\r\n   */\r\n  function Token(kind, start, end, line, column, prev, value) {\r\n    this.kind = kind;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.line = line;\r\n    this.column = column;\r\n    this.value = value;\r\n    this.prev = prev;\r\n    this.next = null;\r\n  }\r\n\r\n  var _proto2 = Token.prototype;\r\n\r\n  _proto2.toJSON = function toJSON() {\r\n    return {\r\n      kind: this.kind,\r\n      value: this.value,\r\n      line: this.line,\r\n      column: this.column\r\n    };\r\n  };\r\n\r\n  return Token;\r\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\r\n\r\ndefineInspect(Token);\r\n/**\r\n * @internal\r\n */\r\n\r\nexport function isNode(maybeNode) {\r\n  return maybeNode != null && typeof maybeNode.kind === 'string';\r\n}\r\n/**\r\n * The list of all possible AST node types.\r\n */\r\n"]},"metadata":{},"sourceType":"module"}