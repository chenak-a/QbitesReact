{"ast":null,"code":"import { max, range, tickStep } from \"d3-array\";\nimport { slice } from \"./array.js\";\nimport { blurX, blurY } from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function () {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20,\n      // blur radius\n  k = 2,\n      // log2(grid cell size)\n  o = r * 3,\n      // grid offset, to pad for blur\n  n = dx + o * 2 >> k,\n      // grid width\n  m = dy + o * 2 >> k,\n      // grid height\n  threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k);\n    data.forEach(function (d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    }); // TODO Optimize.\n\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.\n\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours().thresholds(tz).size([n, m])(values0).map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  } // TODO Optimize.\n\n\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n\n    var _0 = +_[0],\n        _1 = +_[1];\n\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}","map":{"version":3,"names":["max","range","tickStep","slice","blurX","blurY","constant","contours","defaultX","d","defaultY","defaultWeight","x","y","weight","dx","dy","r","k","o","n","m","threshold","density","data","values0","Float32Array","values1","pow2k","Math","pow","forEach","i","xi","yi","wi","x0","floor","y0","xt","yt","width","height","tz","Array","isArray","stop","shift","thresholds","size","map","transform","geometry","value","coordinates","transformPolygon","transformRing","transformPoint","resize","_","arguments","length","_0","_1","Error","cellSize","log","LN2","call","bandwidth","sqrt","round"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/d3-contour/src/density.js"],"sourcesContent":["import {max, range, tickStep} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport {blurX, blurY} from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k);\n\n    data.forEach(function(d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}