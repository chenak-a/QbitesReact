{"ast":null,"code":"import defineInspect from \"../jsutils/defineInspect.mjs\";\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\n\nexport var Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */","map":{"version":3,"names":["defineInspect","Location","startToken","endToken","source","start","end","_proto","prototype","toJSON","Token","kind","line","column","prev","value","next","_proto2","isNode","maybeNode"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/graphql/language/ast.mjs"],"sourcesContent":["import defineInspect from \"../jsutils/defineInspect.mjs\";\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport var Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8BAA1B;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,aAAa,YAAY;EAC7C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;EACE,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;IAC9C,KAAKC,KAAL,GAAaH,UAAU,CAACG,KAAxB;IACA,KAAKC,GAAL,GAAWH,QAAQ,CAACG,GAApB;IACA,KAAKJ,UAAL,GAAkBA,UAAlB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;;EAED,IAAIG,MAAM,GAAGN,QAAQ,CAACO,SAAtB;;EAEAD,MAAM,CAACE,MAAP,GAAgB,SAASA,MAAT,GAAkB;IAChC,OAAO;MACLJ,KAAK,EAAE,KAAKA,KADP;MAELC,GAAG,EAAE,KAAKA;IAFL,CAAP;EAID,CALD;;EAOA,OAAOL,QAAP;AACD,CAtCkC,EAA5B,C,CAsCF;;AAELD,aAAa,CAACC,QAAD,CAAb;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIS,KAAK,GAAG,aAAa,YAAY;EAC1C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,SAASA,KAAT,CAAeC,IAAf,EAAqBN,KAArB,EAA4BC,GAA5B,EAAiCM,IAAjC,EAAuCC,MAAvC,EAA+CC,IAA/C,EAAqDC,KAArD,EAA4D;IAC1D,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKN,KAAL,GAAaA,KAAb;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKM,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKE,KAAL,GAAaA,KAAb;IACA,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKE,IAAL,GAAY,IAAZ;EACD;;EAED,IAAIC,OAAO,GAAGP,KAAK,CAACF,SAApB;;EAEAS,OAAO,CAACR,MAAR,GAAiB,SAASA,MAAT,GAAkB;IACjC,OAAO;MACLE,IAAI,EAAE,KAAKA,IADN;MAELI,KAAK,EAAE,KAAKA,KAFP;MAGLH,IAAI,EAAE,KAAKA,IAHN;MAILC,MAAM,EAAE,KAAKA;IAJR,CAAP;EAMD,CAPD;;EASA,OAAOH,KAAP;AACD,CArD+B,EAAzB,C,CAqDF;;AAELV,aAAa,CAACU,KAAD,CAAb;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,MAAT,CAAgBC,SAAhB,EAA2B;EAChC,OAAOA,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAS,CAACR,IAAjB,KAA0B,QAAtD;AACD;AACD;AACA;AACA"},"metadata":{},"sourceType":"module"}