{"ast":null,"code":"import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","map":{"version":3,"names":["quadtree","constant","jiggle","x","d","vx","y","vy","radius","nodes","radii","random","strength","iterations","force","i","n","length","tree","node","xi","yi","ri","ri2","k","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","Math","sqrt","initialize","Array","_nodes","_random","_","arguments"],"sources":["/home/chenak/QbitesReact/my-app/node_modules/d3/node_modules/d3-force/src/collide.js"],"sourcesContent":["import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}