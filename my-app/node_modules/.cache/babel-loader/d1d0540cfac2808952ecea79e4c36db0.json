{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.getNewXY = getNewXY;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require(\"../../utils\");\n\nvar _ChartDataUtil = require(\"../../utils/ChartDataUtil\");\n\nvar _utils2 = require(\"../utils\");\n\nvar _HoverTextNearMouse = require(\"../components/HoverTextNearMouse\");\n\nvar _HoverTextNearMouse2 = _interopRequireDefault(_HoverTextNearMouse);\n\nvar _LinearRegressionChannelWithArea = require(\"../components/LinearRegressionChannelWithArea\");\n\nvar _LinearRegressionChannelWithArea2 = _interopRequireDefault(_LinearRegressionChannelWithArea);\n\nvar _ClickableCircle = require(\"../components/ClickableCircle\");\n\nvar _ClickableCircle2 = _interopRequireDefault(_ClickableCircle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EachLinearRegressionChannel = function (_Component) {\n  _inherits(EachLinearRegressionChannel, _Component);\n\n  function EachLinearRegressionChannel(props) {\n    _classCallCheck(this, EachLinearRegressionChannel);\n\n    var _this = _possibleConstructorReturn(this, (EachLinearRegressionChannel.__proto__ || Object.getPrototypeOf(EachLinearRegressionChannel)).call(this, props));\n\n    _this.handleEdge1Drag = _this.handleEdge1Drag.bind(_this);\n    _this.handleEdge2Drag = _this.handleEdge2Drag.bind(_this);\n    _this.handleHover = _this.handleHover.bind(_this);\n    _this.isHover = _utils2.isHover.bind(_this);\n    _this.saveNodeType = _utils2.saveNodeType.bind(_this);\n    _this.nodes = {};\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachLinearRegressionChannel, [{\n    key: \"handleEdge1Drag\",\n    value: function handleEdge1Drag(moreProps) {\n      var _props = this.props,\n          index = _props.index,\n          onDrag = _props.onDrag,\n          snapTo = _props.snapTo;\n      var x2Value = this.props.x2Value;\n\n      var _getNewXY = getNewXY(moreProps, snapTo),\n          _getNewXY2 = _slicedToArray(_getNewXY, 1),\n          x1Value = _getNewXY2[0];\n\n      onDrag(index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    }\n  }, {\n    key: \"handleEdge2Drag\",\n    value: function handleEdge2Drag(moreProps) {\n      var _props2 = this.props,\n          index = _props2.index,\n          onDrag = _props2.onDrag,\n          snapTo = _props2.snapTo;\n      var x1Value = this.props.x1Value;\n\n      var _getNewXY3 = getNewXY(moreProps, snapTo),\n          _getNewXY4 = _slicedToArray(_getNewXY3, 1),\n          x2Value = _getNewXY4[0];\n\n      onDrag(index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(moreProps) {\n      if (this.state.hover !== moreProps.hovering) {\n        this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          x1Value = _props3.x1Value,\n          x2Value = _props3.x2Value,\n          appearance = _props3.appearance,\n          edgeInteractiveCursor = _props3.edgeInteractiveCursor,\n          hoverText = _props3.hoverText,\n          interactive = _props3.interactive,\n          selected = _props3.selected,\n          onDragComplete = _props3.onDragComplete;\n      var stroke = appearance.stroke,\n          strokeWidth = appearance.strokeWidth,\n          strokeOpacity = appearance.strokeOpacity,\n          fill = appearance.fill,\n          fillOpacity = appearance.fillOpacity,\n          r = appearance.r,\n          edgeStrokeWidth = appearance.edgeStrokeWidth,\n          edgeFill = appearance.edgeFill,\n          edgeStroke = appearance.edgeStroke;\n      var hover = this.state.hover;\n      var hoverHandler = interactive ? {\n        onHover: this.handleHover,\n        onUnHover: this.handleHover\n      } : {};\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = _objectWithoutProperties(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      return _react2.default.createElement(\"g\", null, _react2.default.createElement(_LinearRegressionChannelWithArea2.default, _extends({\n        ref: this.saveNodeType(\"area\"),\n        selected: selected || hover\n      }, hoverHandler, {\n        x1Value: x1Value,\n        x2Value: x2Value,\n        fill: fill,\n        stroke: stroke,\n        strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth,\n        strokeOpacity: strokeOpacity,\n        fillOpacity: fillOpacity\n      })), _react2.default.createElement(_ClickableCircle2.default, {\n        ref: this.saveNodeType(\"edge1\"),\n        show: selected || hover,\n        xyProvider: (0, _LinearRegressionChannelWithArea.edge1Provider)(this.props),\n        r: r,\n        fill: edgeFill,\n        stroke: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge1Drag,\n        onDragComplete: onDragComplete\n      }), _react2.default.createElement(_ClickableCircle2.default, {\n        ref: this.saveNodeType(\"edge2\"),\n        show: selected || hover,\n        xyProvider: (0, _LinearRegressionChannelWithArea.edge2Provider)(this.props),\n        r: r,\n        fill: edgeFill,\n        stroke: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge2Drag,\n        onDragComplete: onDragComplete\n      }), _react2.default.createElement(_HoverTextNearMouse2.default, _extends({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachLinearRegressionChannel;\n}(_react.Component);\n\nfunction getNewXY(moreProps, snapTo) {\n  var xScale = moreProps.xScale,\n      xAccessor = moreProps.xAccessor,\n      plotData = moreProps.plotData,\n      mouseXY = moreProps.mouseXY;\n  var currentItem = (0, _ChartDataUtil.getCurrentItem)(xScale, xAccessor, mouseXY, plotData);\n  var x = xAccessor(currentItem);\n  var y = snapTo(currentItem);\n  return [x, y];\n}\n\nEachLinearRegressionChannel.propTypes = {\n  defaultClassName: _propTypes2.default.string,\n  x1Value: _propTypes2.default.any.isRequired,\n  x2Value: _propTypes2.default.any.isRequired,\n  index: _propTypes2.default.number,\n  appearance: _propTypes2.default.shape({\n    stroke: _propTypes2.default.string.isRequired,\n    fillOpacity: _propTypes2.default.number.isRequired,\n    strokeOpacity: _propTypes2.default.number.isRequired,\n    strokeWidth: _propTypes2.default.number.isRequired,\n    fill: _propTypes2.default.string.isRequired,\n    edgeStrokeWidth: _propTypes2.default.number.isRequired,\n    edgeStroke: _propTypes2.default.string.isRequired,\n    edgeFill: _propTypes2.default.string.isRequired,\n    r: _propTypes2.default.number.isRequired\n  }).isRequired,\n  edgeInteractiveCursor: _propTypes2.default.string,\n  onDrag: _propTypes2.default.func.isRequired,\n  onDragComplete: _propTypes2.default.func.isRequired,\n  snapTo: _propTypes2.default.func,\n  interactive: _propTypes2.default.bool.isRequired,\n  selected: _propTypes2.default.bool.isRequired,\n  hoverText: _propTypes2.default.object.isRequired\n};\nEachLinearRegressionChannel.defaultProps = {\n  onDrag: _utils.noop,\n  onDragComplete: _utils.noop,\n  appearance: {\n    stroke: \"#000000\",\n    fillOpacity: 0.7,\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  interactive: true,\n  selected: false,\n  hoverText: _extends({}, _HoverTextNearMouse2.default.defaultProps, {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 175,\n    text: \"Click and drag the edge circles\"\n  })\n};\nexports.default = EachLinearRegressionChannel;","map":{"version":3,"mappings":"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","names":["getNewXY","EachLinearRegressionChannel","props","_classCallCheck","_this","handleEdge1Drag","bind","handleEdge2Drag","handleHover","isHover","_utils2","saveNodeType","nodes","state","hover","moreProps","index","onDrag","snapTo","x2Value","x1Value","hovering","setState","appearance","edgeInteractiveCursor","hoverText","interactive","selected","onDragComplete","stroke","strokeWidth","strokeOpacity","fill","fillOpacity","r","edgeStrokeWidth","edgeFill","edgeStroke","hoverHandler","onHover","onUnHover","hoverTextEnabled","enable","hoverTextSelected","selectedText","hoverTextUnselected","text","restHoverTextProps","_react2","ref","show","xyProvider","interactiveCursorClass","xScale","xAccessor","plotData","mouseXY","currentItem","x","y","propTypes","defaultClassName","_propTypes2","string","any","isRequired","number","shape","func","bool","object","defaultProps","_HoverTextNearMouse2","bgHeight","bgWidth"],"sources":["../../../../src/lib/interactive/wrapper/EachLinearRegressionChannel.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { noop } from \"../../utils\";\nimport { getCurrentItem } from \"../../utils/ChartDataUtil\";\nimport { saveNodeType, isHover } from \"../utils\";\n\nimport HoverTextNearMouse from \"../components/HoverTextNearMouse\";\nimport {\n\tdefault as LinearRegressionChannelWithArea,\n\tedge1Provider,\n\tedge2Provider\n} from \"../components/LinearRegressionChannelWithArea\";\n\nimport ClickableCircle from \"../components/ClickableCircle\";\n\nclass EachLinearRegressionChannel extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleEdge1Drag = this.handleEdge1Drag.bind(this);\n\t\tthis.handleEdge2Drag = this.handleEdge2Drag.bind(this);\n\n\t\tthis.handleHover = this.handleHover.bind(this);\n\n\t\tthis.isHover = isHover.bind(this);\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.nodes = {};\n\n\t\tthis.state = {\n\t\t\thover: false,\n\t\t};\n\t}\n\thandleEdge1Drag(moreProps) {\n\t\tconst { index, onDrag, snapTo } = this.props;\n\t\tconst {\n\t\t\tx2Value,\n\t\t} = this.props;\n\n\t\tconst [x1Value] = getNewXY(moreProps, snapTo);\n\n\t\tonDrag(index, {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t});\n\t}\n\thandleEdge2Drag(moreProps) {\n\t\tconst { index, onDrag, snapTo } = this.props;\n\t\tconst {\n\t\t\tx1Value,\n\t\t} = this.props;\n\n\t\tconst [x2Value] = getNewXY(moreProps, snapTo);\n\n\t\tonDrag(index, {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t});\n\t}\n\thandleHover(moreProps) {\n\t\tif (this.state.hover !== moreProps.hovering) {\n\t\t\tthis.setState({\n\t\t\t\thover: moreProps.hovering\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\tconst {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t\tappearance,\n\t\t\tedgeInteractiveCursor,\n\t\t\thoverText,\n\t\t\tinteractive,\n\t\t\tselected,\n\t\t\tonDragComplete,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tstroke,\n\t\t\tstrokeWidth,\n\t\t\tstrokeOpacity,\n\t\t\tfill,\n\t\t\tfillOpacity,\n\t\t\tr,\n\t\t\tedgeStrokeWidth,\n\t\t\tedgeFill,\n\t\t\tedgeStroke,\n\t\t} = appearance;\n\t\tconst { hover } = this.state;\n\n\t\tconst hoverHandler = interactive\n\t\t\t? { onHover: this.handleHover, onUnHover: this.handleHover }\n\t\t\t: {};\n\n\t\tconst {\n\t\t\tenable: hoverTextEnabled,\n\t\t\tselectedText: hoverTextSelected,\n\t\t\ttext: hoverTextUnselected,\n\t\t\t...restHoverTextProps\n\t\t} = hoverText;\n\n\t\treturn <g>\n\t\t\t<LinearRegressionChannelWithArea\n\t\t\t\tref={this.saveNodeType(\"area\")}\n\t\t\t\tselected={selected || hover}\n\t\t\t\t{...hoverHandler}\n\n\t\t\t\tx1Value={x1Value}\n\t\t\t\tx2Value={x2Value}\n\t\t\t\tfill={fill}\n\t\t\t\tstroke={stroke}\n\t\t\t\tstrokeWidth={(hover || selected) ? strokeWidth + 1 : strokeWidth}\n\t\t\t\tstrokeOpacity={strokeOpacity}\n\t\t\t\tfillOpacity={fillOpacity} />\n\t\t\t<ClickableCircle\n\t\t\t\tref={this.saveNodeType(\"edge1\")}\n\t\t\t\tshow={selected || hover}\n\t\t\t\txyProvider={edge1Provider(this.props)}\n\t\t\t\tr={r}\n\t\t\t\tfill={edgeFill}\n\t\t\t\tstroke={edgeStroke}\n\t\t\t\tstrokeWidth={edgeStrokeWidth}\n\t\t\t\tinteractiveCursorClass={edgeInteractiveCursor}\n\t\t\t\tonDrag={this.handleEdge1Drag}\n\t\t\t\tonDragComplete={onDragComplete} />\n\t\t\t<ClickableCircle\n\t\t\t\tref={this.saveNodeType(\"edge2\")}\n\t\t\t\tshow={selected || hover}\n\t\t\t\txyProvider={edge2Provider(this.props)}\n\t\t\t\tr={r}\n\t\t\t\tfill={edgeFill}\n\t\t\t\tstroke={edgeStroke}\n\t\t\t\tstrokeWidth={edgeStrokeWidth}\n\t\t\t\tinteractiveCursorClass={edgeInteractiveCursor}\n\t\t\t\tonDrag={this.handleEdge2Drag}\n\t\t\t\tonDragComplete={onDragComplete} />\n\t\t\t<HoverTextNearMouse\n\t\t\t\tshow={hoverTextEnabled && hover}\n\t\t\t\t{...restHoverTextProps}\n\t\t\t\ttext={selected ? hoverTextSelected : hoverTextUnselected}\n\t\t\t/>\n\t\t</g>;\n\t}\n}\n\nexport function getNewXY(moreProps, snapTo) {\n\tconst { xScale, xAccessor, plotData, mouseXY } = moreProps;\n\n\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\tconst x = xAccessor(currentItem);\n\tconst y = snapTo(currentItem);\n\n\treturn [x, y];\n}\n\nEachLinearRegressionChannel.propTypes = {\n\tdefaultClassName: PropTypes.string,\n\n\tx1Value: PropTypes.any.isRequired,\n\tx2Value: PropTypes.any.isRequired,\n\n\tindex: PropTypes.number,\n\n\tappearance: PropTypes.shape({\n\t\tstroke: PropTypes.string.isRequired,\n\t\tfillOpacity: PropTypes.number.isRequired,\n\t\tstrokeOpacity: PropTypes.number.isRequired,\n\t\tstrokeWidth: PropTypes.number.isRequired,\n\t\tfill: PropTypes.string.isRequired,\n\t\tedgeStrokeWidth: PropTypes.number.isRequired,\n\t\tedgeStroke: PropTypes.string.isRequired,\n\t\tedgeFill: PropTypes.string.isRequired,\n\t\tr: PropTypes.number.isRequired,\n\t}).isRequired,\n\n\tedgeInteractiveCursor: PropTypes.string,\n\tonDrag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tsnapTo: PropTypes.func,\n\tinteractive: PropTypes.bool.isRequired,\n\tselected: PropTypes.bool.isRequired,\n\n\thoverText: PropTypes.object.isRequired,\n};\n\nEachLinearRegressionChannel.defaultProps = {\n\tonDrag: noop,\n\tonDragComplete: noop,\n\n\tappearance: {\n\t\tstroke: \"#000000\",\n\t\tfillOpacity: 0.7,\n\t\tstrokeOpacity: 1,\n\t\tstrokeWidth: 1,\n\t\tfill: \"#8AAFE2\",\n\t\tedgeStrokeWidth: 2,\n\t\tedgeStroke: \"#000000\",\n\t\tedgeFill: \"#FFFFFF\",\n\t\tr: 5,\n\t},\n\tinteractive: true,\n\tselected: false,\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: 18,\n\t\tbgWidth: 175,\n\t\ttext: \"Click and drag the edge circles\",\n\t}\n};\n\nexport default EachLinearRegressionChannel;"]},"metadata":{},"sourceType":"script"}