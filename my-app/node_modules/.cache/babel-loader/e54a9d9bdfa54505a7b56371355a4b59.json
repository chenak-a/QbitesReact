{"ast":null,"code":"import { useMemo } from 'react';\n/**\r\n * Get sticky column offset width\r\n */\n\nfunction useStickyOffsets(colWidths, columnCount, direction) {\n  var stickyOffsets = useMemo(function () {\n    var leftOffsets = [];\n    var rightOffsets = [];\n    var left = 0;\n    var right = 0;\n\n    for (var start = 0; start < columnCount; start += 1) {\n      if (direction === 'rtl') {\n        // Left offset\n        rightOffsets[start] = right;\n        right += colWidths[start] || 0; // Right offset\n\n        var end = columnCount - start - 1;\n        leftOffsets[end] = left;\n        left += colWidths[end] || 0;\n      } else {\n        // Left offset\n        leftOffsets[start] = left;\n        left += colWidths[start] || 0; // Right offset\n\n        var _end = columnCount - start - 1;\n\n        rightOffsets[_end] = right;\n        right += colWidths[_end] || 0;\n      }\n    }\n\n    return {\n      left: leftOffsets,\n      right: rightOffsets\n    };\n  }, [colWidths, columnCount, direction]);\n  return stickyOffsets;\n}\n\nexport default useStickyOffsets;","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/rc-table/es/hooks/useStickyOffsets.js"],"names":["useMemo","useStickyOffsets","colWidths","columnCount","direction","stickyOffsets","leftOffsets","rightOffsets","left","right","start","end","_end"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA;AACA;AACA;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,SAAlD,EAA6D;AAC3D,MAAIC,aAAa,GAAGL,OAAO,CAAC,YAAY;AACtC,QAAIM,WAAW,GAAG,EAAlB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,WAA5B,EAAyCO,KAAK,IAAI,CAAlD,EAAqD;AACnD,UAAIN,SAAS,KAAK,KAAlB,EAAyB;AACvB;AACAG,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsBD,KAAtB;AACAA,QAAAA,KAAK,IAAIP,SAAS,CAACQ,KAAD,CAAT,IAAoB,CAA7B,CAHuB,CAGS;;AAEhC,YAAIC,GAAG,GAAGR,WAAW,GAAGO,KAAd,GAAsB,CAAhC;AACAJ,QAAAA,WAAW,CAACK,GAAD,CAAX,GAAmBH,IAAnB;AACAA,QAAAA,IAAI,IAAIN,SAAS,CAACS,GAAD,CAAT,IAAkB,CAA1B;AACD,OARD,MAQO;AACL;AACAL,QAAAA,WAAW,CAACI,KAAD,CAAX,GAAqBF,IAArB;AACAA,QAAAA,IAAI,IAAIN,SAAS,CAACQ,KAAD,CAAT,IAAoB,CAA5B,CAHK,CAG0B;;AAE/B,YAAIE,IAAI,GAAGT,WAAW,GAAGO,KAAd,GAAsB,CAAjC;;AAEAH,QAAAA,YAAY,CAACK,IAAD,CAAZ,GAAqBH,KAArB;AACAA,QAAAA,KAAK,IAAIP,SAAS,CAACU,IAAD,CAAT,IAAmB,CAA5B;AACD;AACF;;AAED,WAAO;AACLJ,MAAAA,IAAI,EAAEF,WADD;AAELG,MAAAA,KAAK,EAAEF;AAFF,KAAP;AAID,GA/B0B,EA+BxB,CAACL,SAAD,EAAYC,WAAZ,EAAyBC,SAAzB,CA/BwB,CAA3B;AAgCA,SAAOC,aAAP;AACD;;AAED,eAAeJ,gBAAf","sourcesContent":["import { useMemo } from 'react';\r\n/**\r\n * Get sticky column offset width\r\n */\r\n\r\nfunction useStickyOffsets(colWidths, columnCount, direction) {\r\n  var stickyOffsets = useMemo(function () {\r\n    var leftOffsets = [];\r\n    var rightOffsets = [];\r\n    var left = 0;\r\n    var right = 0;\r\n\r\n    for (var start = 0; start < columnCount; start += 1) {\r\n      if (direction === 'rtl') {\r\n        // Left offset\r\n        rightOffsets[start] = right;\r\n        right += colWidths[start] || 0; // Right offset\r\n\r\n        var end = columnCount - start - 1;\r\n        leftOffsets[end] = left;\r\n        left += colWidths[end] || 0;\r\n      } else {\r\n        // Left offset\r\n        leftOffsets[start] = left;\r\n        left += colWidths[start] || 0; // Right offset\r\n\r\n        var _end = columnCount - start - 1;\r\n\r\n        rightOffsets[_end] = right;\r\n        right += colWidths[_end] || 0;\r\n      }\r\n    }\r\n\r\n    return {\r\n      left: leftOffsets,\r\n      right: rightOffsets\r\n    };\r\n  }, [colWidths, columnCount, direction]);\r\n  return stickyOffsets;\r\n}\r\n\r\nexport default useStickyOffsets;"]},"metadata":{},"sourceType":"module"}