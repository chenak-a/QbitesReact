{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/* eslint-disable max-classes-per-file */\n\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\r\n * We can remove this when IE not support anymore\r\n */\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    this.origin = '';\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    this.origin = '';\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\r\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\r\n     * This is used for add function only.\r\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\r\n * Align the logic of toFixed to around like 1.5 => 2\r\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"0.\".concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/rc-input-number/es/utils/MiniDecimal.js"],"names":["_classCallCheck","_createClass","getNumberPrecision","isE","num2str","trimNumber","validateNumber","supportBigInt","NumberDecimal","value","origin","String","trim","empty","number","Number","key","negate","toNumber","add","isInvalidate","target","isNaN","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","maxPrecision","Math","max","toFixed","isEmpty","equals","lessEquals","toString","safe","arguments","length","undefined","BigIntDecimal","nan","mergedValue","trimRet","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","getMark","getIntegerStr","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","clone","offset","maxDecimalLength","myAlignedDecimal","offsetAlignedDecimal","valueStr","_trimNumber","negativeStr","hydrateValueStr","slice","NaN","fullStr","getMiniDecimal","numStr","separatorStr","precision","_trimNumber2","integerStr","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal","repeat"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\r\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\r\nimport { supportBigInt } from './supportUtil';\r\n/**\r\n * We can remove this when IE not support anymore\r\n */\r\n\r\nexport var NumberDecimal = /*#__PURE__*/function () {\r\n  function NumberDecimal(value) {\r\n    _classCallCheck(this, NumberDecimal);\r\n\r\n    this.origin = '';\r\n\r\n    if (!value && value !== 0 || !String(value).trim()) {\r\n      this.empty = true;\r\n      return;\r\n    }\r\n\r\n    this.origin = String(value);\r\n    this.number = Number(value);\r\n  }\r\n\r\n  _createClass(NumberDecimal, [{\r\n    key: \"negate\",\r\n    value: function negate() {\r\n      return new NumberDecimal(-this.toNumber());\r\n    }\r\n  }, {\r\n    key: \"add\",\r\n    value: function add(value) {\r\n      if (this.isInvalidate()) {\r\n        return new NumberDecimal(value);\r\n      }\r\n\r\n      var target = Number(value);\r\n\r\n      if (Number.isNaN(target)) {\r\n        return this;\r\n      }\r\n\r\n      var number = this.number + target; // [Legacy] Back to safe integer\r\n\r\n      if (number > Number.MAX_SAFE_INTEGER) {\r\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\r\n      }\r\n\r\n      if (number < Number.MIN_SAFE_INTEGER) {\r\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\r\n      }\r\n\r\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\r\n      return new NumberDecimal(number.toFixed(maxPrecision));\r\n    }\r\n  }, {\r\n    key: \"isEmpty\",\r\n    value: function isEmpty() {\r\n      return this.empty;\r\n    }\r\n  }, {\r\n    key: \"isNaN\",\r\n    value: function isNaN() {\r\n      return Number.isNaN(this.number);\r\n    }\r\n  }, {\r\n    key: \"isInvalidate\",\r\n    value: function isInvalidate() {\r\n      return this.isEmpty() || this.isNaN();\r\n    }\r\n  }, {\r\n    key: \"equals\",\r\n    value: function equals(target) {\r\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\r\n    }\r\n  }, {\r\n    key: \"lessEquals\",\r\n    value: function lessEquals(target) {\r\n      return this.add(target.negate().toString()).toNumber() <= 0;\r\n    }\r\n  }, {\r\n    key: \"toNumber\",\r\n    value: function toNumber() {\r\n      return this.number;\r\n    }\r\n  }, {\r\n    key: \"toString\",\r\n    value: function toString() {\r\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n\r\n      if (!safe) {\r\n        return this.origin;\r\n      }\r\n\r\n      if (this.isInvalidate()) {\r\n        return '';\r\n      }\r\n\r\n      return num2str(this.number);\r\n    }\r\n  }]);\r\n\r\n  return NumberDecimal;\r\n}();\r\nexport var BigIntDecimal = /*#__PURE__*/function () {\r\n  function BigIntDecimal(value) {\r\n    _classCallCheck(this, BigIntDecimal);\r\n\r\n    this.origin = '';\r\n\r\n    if (!value && value !== 0 || !String(value).trim()) {\r\n      this.empty = true;\r\n      return;\r\n    }\r\n\r\n    this.origin = String(value); // Act like Number convert\r\n\r\n    if (value === '-') {\r\n      this.nan = true;\r\n      return;\r\n    }\r\n\r\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\r\n\r\n    if (isE(mergedValue)) {\r\n      mergedValue = Number(mergedValue);\r\n    }\r\n\r\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\r\n\r\n    if (validateNumber(mergedValue)) {\r\n      var trimRet = trimNumber(mergedValue);\r\n      this.negative = trimRet.negative;\r\n      var numbers = trimRet.trimStr.split('.');\r\n      this.integer = BigInt(numbers[0]);\r\n      var decimalStr = numbers[1] || '0';\r\n      this.decimal = BigInt(decimalStr);\r\n      this.decimalLen = decimalStr.length;\r\n    } else {\r\n      this.nan = true;\r\n    }\r\n  }\r\n\r\n  _createClass(BigIntDecimal, [{\r\n    key: \"getMark\",\r\n    value: function getMark() {\r\n      return this.negative ? '-' : '';\r\n    }\r\n  }, {\r\n    key: \"getIntegerStr\",\r\n    value: function getIntegerStr() {\r\n      return this.integer.toString();\r\n    }\r\n  }, {\r\n    key: \"getDecimalStr\",\r\n    value: function getDecimalStr() {\r\n      return this.decimal.toString().padStart(this.decimalLen, '0');\r\n    }\r\n    /**\r\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\r\n     * This is used for add function only.\r\n     */\r\n\r\n  }, {\r\n    key: \"alignDecimal\",\r\n    value: function alignDecimal(decimalLength) {\r\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\r\n      return BigInt(str);\r\n    }\r\n  }, {\r\n    key: \"negate\",\r\n    value: function negate() {\r\n      var clone = new BigIntDecimal(this.toString());\r\n      clone.negative = !clone.negative;\r\n      return clone;\r\n    }\r\n  }, {\r\n    key: \"add\",\r\n    value: function add(value) {\r\n      if (this.isInvalidate()) {\r\n        return new BigIntDecimal(value);\r\n      }\r\n\r\n      var offset = new BigIntDecimal(value);\r\n\r\n      if (offset.isInvalidate()) {\r\n        return this;\r\n      }\r\n\r\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\r\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\r\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\r\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\r\n\r\n      var _trimNumber = trimNumber(valueStr),\r\n          negativeStr = _trimNumber.negativeStr,\r\n          trimStr = _trimNumber.trimStr;\r\n\r\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\r\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\r\n    }\r\n  }, {\r\n    key: \"isEmpty\",\r\n    value: function isEmpty() {\r\n      return this.empty;\r\n    }\r\n  }, {\r\n    key: \"isNaN\",\r\n    value: function isNaN() {\r\n      return this.nan;\r\n    }\r\n  }, {\r\n    key: \"isInvalidate\",\r\n    value: function isInvalidate() {\r\n      return this.isEmpty() || this.isNaN();\r\n    }\r\n  }, {\r\n    key: \"equals\",\r\n    value: function equals(target) {\r\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\r\n    }\r\n  }, {\r\n    key: \"lessEquals\",\r\n    value: function lessEquals(target) {\r\n      return this.add(target.negate().toString()).toNumber() <= 0;\r\n    }\r\n  }, {\r\n    key: \"toNumber\",\r\n    value: function toNumber() {\r\n      if (this.isNaN()) {\r\n        return NaN;\r\n      }\r\n\r\n      return Number(this.toString());\r\n    }\r\n  }, {\r\n    key: \"toString\",\r\n    value: function toString() {\r\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n\r\n      if (!safe) {\r\n        return this.origin;\r\n      }\r\n\r\n      if (this.isInvalidate()) {\r\n        return '';\r\n      }\r\n\r\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\r\n    }\r\n  }]);\r\n\r\n  return BigIntDecimal;\r\n}();\r\nexport default function getMiniDecimal(value) {\r\n  // We use BigInt here.\r\n  // Will fallback to Number if not support.\r\n  if (supportBigInt()) {\r\n    return new BigIntDecimal(value);\r\n  }\r\n\r\n  return new NumberDecimal(value);\r\n}\r\n/**\r\n * Align the logic of toFixed to around like 1.5 => 2\r\n */\r\n\r\nexport function toFixed(numStr, separatorStr, precision) {\r\n  if (numStr === '') {\r\n    return '';\r\n  }\r\n\r\n  var _trimNumber2 = trimNumber(numStr),\r\n      negativeStr = _trimNumber2.negativeStr,\r\n      integerStr = _trimNumber2.integerStr,\r\n      decimalStr = _trimNumber2.decimalStr;\r\n\r\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\r\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\r\n\r\n  if (precision >= 0) {\r\n    // We will get last + 1 number to check if need advanced number\r\n    var advancedNum = Number(decimalStr[precision]);\r\n\r\n    if (advancedNum >= 5) {\r\n      var advancedDecimal = getMiniDecimal(numStr).add(\"0.\".concat('0'.repeat(precision)).concat(10 - advancedNum));\r\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\r\n    }\r\n\r\n    if (precision === 0) {\r\n      return numberWithoutDecimal;\r\n    }\r\n\r\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\r\n  }\r\n\r\n  if (precisionDecimalStr === '.0') {\r\n    return numberWithoutDecimal;\r\n  }\r\n\r\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\r\n}"]},"metadata":{},"sourceType":"module"}