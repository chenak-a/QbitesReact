{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"expandable\"];\nimport warning from \"rc-util/es/warning\";\nexport var INTERNAL_COL_DEFINE = 'RC_TABLE_INTERNAL_COL_DEFINE';\nexport function getExpandableProps(props) {\n  var expandable = props.expandable,\n      legacyExpandableConfig = _objectWithoutProperties(props, _excluded);\n\n  if ('expandable' in props) {\n    return _objectSpread(_objectSpread({}, legacyExpandableConfig), expandable);\n  }\n\n  if (process.env.NODE_ENV !== 'production' && ['indentSize', 'expandedRowKeys', 'defaultExpandedRowKeys', 'defaultExpandAllRows', 'expandedRowRender', 'expandRowByClick', 'expandIcon', 'onExpand', 'onExpandedRowsChange', 'expandedRowClassName', 'expandIconColumnIndex'].some(function (prop) {\n    return prop in props;\n  })) {\n    warning(false, 'expanded related props have been moved into `expandable`.');\n  }\n\n  return legacyExpandableConfig;\n}\n/**\r\n * Returns only data- and aria- key/value pairs\r\n * @param {object} props\r\n */\n\nexport function getDataAndAriaProps(props) {\n  /* eslint-disable no-param-reassign */\n  return Object.keys(props).reduce(function (memo, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      memo[key] = props[key];\n    }\n\n    return memo;\n  }, {});\n  /* eslint-enable */\n}","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/rc-table/es/utils/legacyUtil.js"],"names":["_objectSpread","_objectWithoutProperties","_excluded","warning","INTERNAL_COL_DEFINE","getExpandableProps","props","expandable","legacyExpandableConfig","process","env","NODE_ENV","some","prop","getDataAndAriaProps","Object","keys","reduce","memo","key","substr"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,IAAIC,SAAS,GAAG,CAAC,YAAD,CAAhB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,IAAIC,mBAAmB,GAAG,8BAA1B;AACP,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,MAAIC,UAAU,GAAGD,KAAK,CAACC,UAAvB;AAAA,MACIC,sBAAsB,GAAGP,wBAAwB,CAACK,KAAD,EAAQJ,SAAR,CADrD;;AAGA,MAAI,gBAAgBI,KAApB,EAA2B;AACzB,WAAON,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKQ,sBAAL,CAAd,EAA4CD,UAA5C,CAApB;AACD;;AAED,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAAC,YAAD,EAAe,iBAAf,EAAkC,wBAAlC,EAA4D,sBAA5D,EAAoF,mBAApF,EAAyG,kBAAzG,EAA6H,YAA7H,EAA2I,UAA3I,EAAuJ,sBAAvJ,EAA+K,sBAA/K,EAAuM,uBAAvM,EAAgOC,IAAhO,CAAqO,UAAUC,IAAV,EAAgB;AAChS,WAAOA,IAAI,IAAIP,KAAf;AACD,GAF4C,CAA7C,EAEI;AACFH,IAAAA,OAAO,CAAC,KAAD,EAAQ,2DAAR,CAAP;AACD;;AAED,SAAOK,sBAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASM,mBAAT,CAA6BR,KAA7B,EAAoC;AACzC;AACA,SAAOS,MAAM,CAACC,IAAP,CAAYV,KAAZ,EAAmBW,MAAnB,CAA0B,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACpD,QAAIA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,OAArB,IAAgCD,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,OAAzD,EAAkE;AAChEF,MAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYb,KAAK,CAACa,GAAD,CAAjB;AACD;;AAED,WAAOD,IAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOA;AACD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nvar _excluded = [\"expandable\"];\r\nimport warning from \"rc-util/es/warning\";\r\nexport var INTERNAL_COL_DEFINE = 'RC_TABLE_INTERNAL_COL_DEFINE';\r\nexport function getExpandableProps(props) {\r\n  var expandable = props.expandable,\r\n      legacyExpandableConfig = _objectWithoutProperties(props, _excluded);\r\n\r\n  if ('expandable' in props) {\r\n    return _objectSpread(_objectSpread({}, legacyExpandableConfig), expandable);\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production' && ['indentSize', 'expandedRowKeys', 'defaultExpandedRowKeys', 'defaultExpandAllRows', 'expandedRowRender', 'expandRowByClick', 'expandIcon', 'onExpand', 'onExpandedRowsChange', 'expandedRowClassName', 'expandIconColumnIndex'].some(function (prop) {\r\n    return prop in props;\r\n  })) {\r\n    warning(false, 'expanded related props have been moved into `expandable`.');\r\n  }\r\n\r\n  return legacyExpandableConfig;\r\n}\r\n/**\r\n * Returns only data- and aria- key/value pairs\r\n * @param {object} props\r\n */\r\n\r\nexport function getDataAndAriaProps(props) {\r\n  /* eslint-disable no-param-reassign */\r\n  return Object.keys(props).reduce(function (memo, key) {\r\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\r\n      memo[key] = props[key];\r\n    }\r\n\r\n    return memo;\r\n  }, {});\r\n  /* eslint-enable */\r\n}"]},"metadata":{},"sourceType":"module"}