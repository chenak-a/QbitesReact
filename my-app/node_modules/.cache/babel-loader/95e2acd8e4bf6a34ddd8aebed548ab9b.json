{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // import { map as d3Map } from \"d3-collection\";\n\n\nexports.discontinuousTimeScaleProviderBuilder = discontinuousTimeScaleProviderBuilder;\n\nvar _d3TimeFormat = require(\"d3-time-format\");\n\nvar _financeDiscontinuousScale = require(\"./financeDiscontinuousScale\");\n\nvar _financeDiscontinuousScale2 = _interopRequireDefault(_financeDiscontinuousScale);\n\nvar _utils = require(\"../utils\");\n\nvar _levels = require(\"./levels\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction evaluateLevel(d, date, i, formatters) {\n  return _levels.levelDefinition.map(function (eachLevel, idx) {\n    return {\n      level: _levels.levelDefinition.length - idx - 1,\n      format: formatters[eachLevel(d, date, i)]\n    };\n  }).find(function (l) {\n    return !!l.format;\n  });\n}\n\nvar discontinuousIndexCalculator = (0, _utils.slidingWindow)().windowSize(2).undefinedValue(function (d, idx, _ref) {\n  var initialIndex = _ref.initialIndex,\n      formatters = _ref.formatters;\n  var i = initialIndex;\n  var row = {\n    date: d.getTime(),\n    startOf30Seconds: false,\n    startOfMinute: false,\n    startOf5Minutes: false,\n    startOf15Minutes: false,\n    startOf30Minutes: false,\n    startOfHour: false,\n    startOfEighthOfADay: false,\n    startOfQuarterDay: false,\n    startOfHalfDay: false,\n    startOfDay: true,\n    startOfWeek: false,\n    startOfMonth: false,\n    startOfQuarter: false,\n    startOfYear: false\n  };\n  var level = evaluateLevel(row, d, i, formatters);\n  return _extends({}, row, {\n    index: i\n  }, level);\n});\nvar discontinuousIndexCalculatorLocalTime = discontinuousIndexCalculator.accumulator(function (_ref2, i, idx, _ref3) {\n  var _ref4 = _slicedToArray(_ref2, 2),\n      prevDate = _ref4[0],\n      nowDate = _ref4[1];\n\n  var initialIndex = _ref3.initialIndex,\n      formatters = _ref3.formatters;\n  var startOf30Seconds = nowDate.getSeconds() % 30 === 0;\n  var startOfMinute = nowDate.getMinutes() !== prevDate.getMinutes();\n  var startOf5Minutes = startOfMinute && nowDate.getMinutes() % 5 <= prevDate.getMinutes() % 5;\n  var startOf15Minutes = startOfMinute && nowDate.getMinutes() % 15 <= prevDate.getMinutes() % 15;\n  var startOf30Minutes = startOfMinute && nowDate.getMinutes() % 30 <= prevDate.getMinutes() % 30;\n  var startOfHour = nowDate.getHours() !== prevDate.getHours();\n  var startOfEighthOfADay = startOfHour && nowDate.getHours() % 3 === 0;\n  var startOfQuarterDay = startOfHour && nowDate.getHours() % 6 === 0;\n  var startOfHalfDay = startOfHour && nowDate.getHours() % 12 === 0;\n  var startOfDay = nowDate.getDay() !== prevDate.getDay(); // According to ISO calendar\n  // Sunday = 0, Monday = 1, ... Saturday = 6\n  // day of week of today < day of week of yesterday then today is start of week\n\n  var startOfWeek = nowDate.getDay() < prevDate.getDay(); // month of today != month of yesterday then today is start of month\n\n  var startOfMonth = nowDate.getMonth() !== prevDate.getMonth(); // if start of month and month % 3 === 0 then it is start of quarter\n\n  var startOfQuarter = startOfMonth && nowDate.getMonth() % 3 <= prevDate.getMonth() % 3; // year of today != year of yesterday then today is start of year\n\n  var startOfYear = nowDate.getFullYear() !== prevDate.getFullYear();\n  var row = {\n    date: nowDate.getTime(),\n    startOf30Seconds: startOf30Seconds,\n    startOfMinute: startOfMinute,\n    startOf5Minutes: startOf5Minutes,\n    startOf15Minutes: startOf15Minutes,\n    startOf30Minutes: startOf30Minutes,\n    startOfHour: startOfHour,\n    startOfEighthOfADay: startOfEighthOfADay,\n    startOfQuarterDay: startOfQuarterDay,\n    startOfHalfDay: startOfHalfDay,\n    startOfDay: startOfDay,\n    startOfWeek: startOfWeek,\n    startOfMonth: startOfMonth,\n    startOfQuarter: startOfQuarter,\n    startOfYear: startOfYear\n  };\n  var level = evaluateLevel(row, nowDate, i, formatters);\n\n  if (level == null) {\n    console.log(row);\n  }\n\n  return _extends({}, row, {\n    index: i + initialIndex\n  }, level);\n});\n\nfunction doStuff(realDateAccessor, inputDateAccessor, initialIndex, formatters) {\n  return function (data) {\n    var dateAccessor = realDateAccessor(inputDateAccessor);\n    var calculate = discontinuousIndexCalculatorLocalTime.source(dateAccessor).misc({\n      initialIndex: initialIndex,\n      formatters: formatters\n    });\n    var index = calculate(data).map(function (each) {\n      var format = each.format;\n      return {\n        // ...each,\n        index: each.index,\n        level: each.level,\n        date: new Date(each.date),\n        format: (0, _d3TimeFormat.timeFormat)(format)\n      };\n    });\n    /*\n    var map = d3Map();\n    for (var i = 0; i < data.length - 1; i++) {\n    \t\tvar nextDate = dateAccessor(data[i + 1]);\n    \tvar nowDate = dateAccessor(data[i]);\n    \tvar diff = nextDate - nowDate;\n    \t\tif (map.has(diff)) {\n    \t\tvar count = parseInt(map.get(diff), 10) + 1;\n    \t\tmap.set(diff, count);\n    \t} else {\n    \t\tmap.set(diff, 1);\n    \t}\n    }\n    \tvar entries = map.entries().sort((a, b) => a.value < b.value);\n    \t// For Renko/p&f\n    \tvar interval = entries[0].value === 1\n    \t? Math.round((dateAccessor(last(data)) - dateAccessor(head(data))) / data.length)\n    \t: parseInt(entries[0].key, 10); */\n    // return { index, interval };\n\n    return {\n      index: index\n    };\n  };\n}\n\nfunction discontinuousTimeScaleProviderBuilder() {\n  var initialIndex = 0,\n      realDateAccessor = _utils.identity;\n\n  var inputDateAccessor = function inputDateAccessor(d) {\n    return d.date;\n  },\n      indexAccessor = function indexAccessor(d) {\n    return d.idx;\n  },\n      indexMutator = function indexMutator(d, idx) {\n    return _extends({}, d, {\n      idx: idx\n    });\n  },\n      withIndex = void 0;\n\n  var currentFormatters = _levels.defaultFormatters; // eslint-disable-next-line prefer-const\n\n  var discontinuousTimeScaleProvider = function discontinuousTimeScaleProvider(data) {\n    /*\n    console.warn(\"Are you sure you want to use a discontinuousTimeScale?\"\n    \t+ \" Use this only if you have discontinuous data which\"\n    \t+ \" needs to be displayed as continuous.\"\n    \t+ \" If you have continuous data use a d3 scale like\"\n    \t+ \" `d3.scaleTime`\"\n    );\n    */\n    var index = withIndex;\n\n    if ((0, _utils.isNotDefined)(index)) {\n      var response = doStuff(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters)(data);\n      index = response.index;\n    } // console.log(interval, entries[0].key);\n\n\n    var inputIndex = index;\n    var xScale = (0, _financeDiscontinuousScale2.default)(inputIndex);\n    var mergedData = (0, _utils.zipper)().combine(indexMutator);\n    var finalData = mergedData(data, inputIndex);\n    return {\n      data: finalData,\n      xScale: xScale,\n      xAccessor: function xAccessor(d) {\n        return d && indexAccessor(d).index;\n      },\n      displayXAccessor: realDateAccessor(inputDateAccessor)\n    };\n  };\n\n  discontinuousTimeScaleProvider.initialIndex = function (x) {\n    if (!arguments.length) {\n      return initialIndex;\n    }\n\n    initialIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.inputDateAccessor = function (x) {\n    if (!arguments.length) {\n      return inputDateAccessor;\n    }\n\n    inputDateAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexAccessor = function (x) {\n    if (!arguments.length) {\n      return indexAccessor;\n    }\n\n    indexAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexMutator = function (x) {\n    if (!arguments.length) {\n      return indexMutator;\n    }\n\n    indexMutator = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.withIndex = function (x) {\n    if (!arguments.length) {\n      return withIndex;\n    }\n\n    withIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.utc = function () {\n    realDateAccessor = function realDateAccessor(dateAccessor) {\n      return function (d) {\n        var date = dateAccessor(d); // The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\n        var offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n        return new Date(date.getTime() + offsetInMillis);\n      };\n    };\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.setLocale = function (locale) {\n    var formatters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (locale) {\n      (0, _d3TimeFormat.timeFormatDefaultLocale)(locale);\n    }\n\n    if (formatters) {\n      currentFormatters = formatters;\n    }\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexCalculator = function () {\n    return doStuff(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters);\n  };\n\n  return discontinuousTimeScaleProvider;\n}\n/* discontinuousTimeScaleProvider.utc = function(data,\n\t\tdateAccessor,\n\t\tindexAccessor,\n\t\tindexMutator) {\n\tvar utcDateAccessor = d => {\n\t\tvar date = dateAccessor(d);\n\t\t// The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\t\tvar offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n\t\treturn new Date(date.getTime() + offsetInMillis);\n\t};\n\treturn discontinuousTimeScaleProvider(data, utcDateAccessor, indexAccessor, indexMutator);\n};*/\n\n\nexports.default = discontinuousTimeScaleProviderBuilder();","map":{"version":3,"sources":["../../../src/lib/scale/discontinuousTimeScaleProvider.js"],"names":["level","format","formatters","eachLevel","l","discontinuousIndexCalculator","initialIndex","i","row","date","d","startOf30Seconds","startOfMinute","startOf5Minutes","startOf15Minutes","startOf30Minutes","startOfHour","startOfEighthOfADay","startOfQuarterDay","startOfHalfDay","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","evaluateLevel","index","discontinuousIndexCalculatorLocalTime","prevDate","nowDate","console","dateAccessor","realDateAccessor","calculate","each","discontinuousTimeScaleProviderBuilder","inputDateAccessor","indexAccessor","indexMutator","idx","withIndex","currentFormatters","discontinuousTimeScaleProvider","response","doStuff","inputIndex","xScale","mergedData","finalData","data","xAccessor","displayXAccessor","arguments","offsetInMillis"],"mappings":"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","sourcesContent":["\n\nimport { timeFormat, timeFormatDefaultLocale } from \"d3-time-format\";\n// import { map as d3Map } from \"d3-collection\";\n\nimport financeDiscontinuousScale from \"./financeDiscontinuousScale\";\nimport { slidingWindow, zipper, identity, isNotDefined } from \"../utils\";\nimport { defaultFormatters, levelDefinition } from \"./levels\";\n\nfunction evaluateLevel(d, date, i, formatters) {\n\treturn levelDefinition\n\t\t.map((eachLevel, idx) => {\n\t\t\treturn {\n\t\t\t\tlevel: levelDefinition.length - idx - 1,\n\t\t\t\tformat: formatters[eachLevel(d, date, i)]\n\t\t\t};\n\t\t})\n\t\t.find(l => !!l.format);\n}\n\nconst discontinuousIndexCalculator = slidingWindow()\n\t.windowSize(2)\n\t.undefinedValue((d, idx, { initialIndex, formatters }) => {\n\t\tconst i = initialIndex;\n\t\tconst row = {\n\t\t\tdate: d.getTime(),\n\t\t\tstartOf30Seconds: false,\n\t\t\tstartOfMinute: false,\n\t\t\tstartOf5Minutes: false,\n\t\t\tstartOf15Minutes: false,\n\t\t\tstartOf30Minutes: false,\n\t\t\tstartOfHour: false,\n\t\t\tstartOfEighthOfADay: false,\n\t\t\tstartOfQuarterDay: false,\n\t\t\tstartOfHalfDay: false,\n\t\t\tstartOfDay: true,\n\t\t\tstartOfWeek: false,\n\t\t\tstartOfMonth: false,\n\t\t\tstartOfQuarter: false,\n\t\t\tstartOfYear: false,\n\t\t};\n\t\tconst level = evaluateLevel(row, d, i, formatters);\n\t\treturn { ...row, index: i, ...level };\n\t});\n\nconst discontinuousIndexCalculatorLocalTime = discontinuousIndexCalculator\n\t.accumulator(([prevDate, nowDate], i, idx, { initialIndex, formatters }) => {\n\t\tconst startOf30Seconds = nowDate.getSeconds() % 30 === 0;\n\n\t\tconst startOfMinute = nowDate.getMinutes() !== prevDate.getMinutes();\n\t\tconst startOf5Minutes = startOfMinute && nowDate.getMinutes() % 5 <= prevDate.getMinutes() % 5;\n\t\tconst startOf15Minutes = startOfMinute && nowDate.getMinutes() % 15 <= prevDate.getMinutes() % 15;\n\t\tconst startOf30Minutes = startOfMinute && nowDate.getMinutes() % 30 <= prevDate.getMinutes() % 30;\n\n\t\tconst startOfHour = nowDate.getHours() !== prevDate.getHours();\n\n\t\tconst startOfEighthOfADay = startOfHour && nowDate.getHours() % 3 === 0;\n\t\tconst startOfQuarterDay = startOfHour && nowDate.getHours() % 6 === 0;\n\t\tconst startOfHalfDay = startOfHour && nowDate.getHours() % 12 === 0;\n\n\t\tconst startOfDay = nowDate.getDay() !== prevDate.getDay();\n\t\t// According to ISO calendar\n\t\t// Sunday = 0, Monday = 1, ... Saturday = 6\n\t\t// day of week of today < day of week of yesterday then today is start of week\n\t\tconst startOfWeek = nowDate.getDay() < prevDate.getDay();\n\t\t// month of today != month of yesterday then today is start of month\n\t\tconst startOfMonth = nowDate.getMonth() !== prevDate.getMonth();\n\t\t// if start of month and month % 3 === 0 then it is start of quarter\n\t\tconst startOfQuarter = startOfMonth && (nowDate.getMonth() % 3 <= prevDate.getMonth() % 3);\n\t\t// year of today != year of yesterday then today is start of year\n\t\tconst startOfYear = nowDate.getFullYear() !== prevDate.getFullYear();\n\n\t\tconst row = {\n\t\t\tdate: nowDate.getTime(),\n\t\t\tstartOf30Seconds,\n\t\t\tstartOfMinute,\n\t\t\tstartOf5Minutes,\n\t\t\tstartOf15Minutes,\n\t\t\tstartOf30Minutes,\n\t\t\tstartOfHour,\n\t\t\tstartOfEighthOfADay,\n\t\t\tstartOfQuarterDay,\n\t\t\tstartOfHalfDay,\n\t\t\tstartOfDay,\n\t\t\tstartOfWeek,\n\t\t\tstartOfMonth,\n\t\t\tstartOfQuarter,\n\t\t\tstartOfYear,\n\t\t};\n\t\tconst level = evaluateLevel(row, nowDate, i, formatters);\n\t\tif (level == null) {\n\t\t\tconsole.log(row);\n\t\t}\n\t\treturn { ...row, index: i + initialIndex, ...level };\n\t});\n\nfunction doStuff(realDateAccessor, inputDateAccessor, initialIndex, formatters) {\n\treturn function(data) {\n\t\tconst dateAccessor = realDateAccessor(inputDateAccessor);\n\t\tconst calculate = discontinuousIndexCalculatorLocalTime\n\t\t\t.source(dateAccessor)\n\t\t\t.misc({ initialIndex, formatters });\n\n\t\tconst index = calculate(data).map(each => {\n\t\t\tconst { format } = each;\n\t\t\treturn {\n\t\t\t\t// ...each,\n\t\t\t\tindex: each.index,\n\t\t\t\tlevel: each.level,\n\t\t\t\tdate: new Date(each.date),\n\t\t\t\tformat: timeFormat(format),\n\t\t\t};\n\t\t});\n\t\t/*\n\t\tvar map = d3Map();\n\t\tfor (var i = 0; i < data.length - 1; i++) {\n\n\t\t\tvar nextDate = dateAccessor(data[i + 1]);\n\t\t\tvar nowDate = dateAccessor(data[i]);\n\t\t\tvar diff = nextDate - nowDate;\n\n\t\t\tif (map.has(diff)) {\n\t\t\t\tvar count = parseInt(map.get(diff), 10) + 1;\n\t\t\t\tmap.set(diff, count);\n\t\t\t} else {\n\t\t\t\tmap.set(diff, 1);\n\t\t\t}\n\t\t}\n\n\t\tvar entries = map.entries().sort((a, b) => a.value < b.value);\n\n\t\t// For Renko/p&f\n\n\t\tvar interval = entries[0].value === 1\n\t\t\t? Math.round((dateAccessor(last(data)) - dateAccessor(head(data))) / data.length)\n\t\t\t: parseInt(entries[0].key, 10); */\n\n\t\t// return { index, interval };\n\t\treturn { index };\n\t};\n}\n\nexport function discontinuousTimeScaleProviderBuilder() {\n\tlet initialIndex = 0, realDateAccessor = identity;\n\tlet inputDateAccessor = d => d.date,\n\t\tindexAccessor = d => d.idx,\n\t\tindexMutator = (d, idx) => ({ ...d, idx }),\n\t\twithIndex;\n\n\tlet currentFormatters = defaultFormatters;\n\n\t// eslint-disable-next-line prefer-const\n\tlet discontinuousTimeScaleProvider = function(data) {\n\t\t/*\n\t\tconsole.warn(\"Are you sure you want to use a discontinuousTimeScale?\"\n\t\t\t+ \" Use this only if you have discontinuous data which\"\n\t\t\t+ \" needs to be displayed as continuous.\"\n\t\t\t+ \" If you have continuous data use a d3 scale like\"\n\t\t\t+ \" `d3.scaleTime`\"\n\t\t);\n\t\t*/\n\n\t\tlet index = withIndex;\n\n\t\tif (isNotDefined(index)) {\n\t\t\tconst response = doStuff(\n\t\t\t\trealDateAccessor,\n\t\t\t\tinputDateAccessor,\n\t\t\t\tinitialIndex,\n\t\t\t\tcurrentFormatters\n\t\t\t)(data);\n\n\t\t\tindex = response.index;\n\t\t}\n\t\t// console.log(interval, entries[0].key);\n\n\t\tconst inputIndex = index;\n\t\tconst xScale = financeDiscontinuousScale(\n\t\t\tinputIndex,\n\t\t);\n\n\t\tconst mergedData = zipper()\n\t\t\t.combine(indexMutator);\n\n\t\tconst finalData = mergedData(data, inputIndex);\n\n\t\treturn {\n\t\t\tdata: finalData,\n\t\t\txScale,\n\t\t\txAccessor: d => d && indexAccessor(d).index,\n\t\t\tdisplayXAccessor: realDateAccessor(inputDateAccessor),\n\t\t};\n\t};\n\n\tdiscontinuousTimeScaleProvider.initialIndex = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn initialIndex;\n\t\t}\n\t\tinitialIndex = x;\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.inputDateAccessor = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn inputDateAccessor;\n\t\t}\n\t\tinputDateAccessor = x;\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.indexAccessor = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn indexAccessor;\n\t\t}\n\t\tindexAccessor = x;\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.indexMutator = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn indexMutator;\n\t\t}\n\t\tindexMutator = x;\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.withIndex = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn withIndex;\n\t\t}\n\t\twithIndex = x;\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.utc = function() {\n\t\trealDateAccessor = dateAccessor => d => {\n\t\t\tconst date = dateAccessor(d);\n\t\t\t// The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\t\t\tconst offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n\t\t\treturn new Date(date.getTime() + offsetInMillis);\n\t\t};\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\tdiscontinuousTimeScaleProvider.setLocale = function(locale, formatters = null) {\n\t\tif (locale) {\n\t\t\ttimeFormatDefaultLocale(locale);\n\t\t}\n\t\tif (formatters) {\n\t\t\tcurrentFormatters = formatters;\n\t\t}\n\t\treturn discontinuousTimeScaleProvider;\n\t};\n\n\tdiscontinuousTimeScaleProvider.indexCalculator = function() {\n\t\treturn doStuff(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters);\n\t};\n\n\treturn discontinuousTimeScaleProvider;\n}\n\n\n\n/* discontinuousTimeScaleProvider.utc = function(data,\n\t\tdateAccessor,\n\t\tindexAccessor,\n\t\tindexMutator) {\n\tvar utcDateAccessor = d => {\n\t\tvar date = dateAccessor(d);\n\t\t// The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\t\tvar offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n\t\treturn new Date(date.getTime() + offsetInMillis);\n\t};\n\treturn discontinuousTimeScaleProvider(data, utcDateAccessor, indexAccessor, indexMutator);\n};*/\n\nexport default discontinuousTimeScaleProviderBuilder();\n"]},"metadata":{},"sourceType":"script"}