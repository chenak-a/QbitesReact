{"ast":null,"code":"import * as React from 'react';\nimport BodyRow from './BodyRow';\nimport TableContext from '../context/TableContext';\nimport ExpandedRow from './ExpandedRow';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ResizeContext from '../context/ResizeContext';\nimport MeasureCell from './MeasureCell';\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n\n  var _React$useContext = React.useContext(ResizeContext),\n      onColumnResize = _React$useContext.onColumnResize;\n\n  var _React$useContext2 = React.useContext(TableContext),\n      prefixCls = _React$useContext2.prefixCls,\n      getComponent = _React$useContext2.getComponent;\n\n  var _React$useContext3 = React.useContext(BodyContext),\n      fixHeader = _React$useContext3.fixHeader,\n      horizonScroll = _React$useContext3.horizonScroll,\n      flattenColumns = _React$useContext3.flattenColumns,\n      componentWidth = _React$useContext3.componentWidth;\n\n  return React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n\n    if (data.length) {\n      rows = data.map(function (record, index) {\n        var key = getRowKey(record, index);\n        return /*#__PURE__*/React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: index,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        fixHeader: fixHeader,\n        fixColumn: horizonScroll,\n        horizonScroll: horizonScroll,\n        component: trComponent,\n        componentWidth: componentWidth,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(\"tr\", {\n      \"aria-hidden\": \"true\",\n      className: \"\".concat(prefixCls, \"-measure-row\"),\n      style: {\n        height: 0,\n        fontSize: 0\n      }\n    }, columnsKey.map(function (columnKey) {\n      return /*#__PURE__*/React.createElement(MeasureCell, {\n        key: columnKey,\n        columnKey: columnKey,\n        onColumnResize: onColumnResize\n      });\n    })), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode, flattenColumns]);\n}\n\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;","map":{"version":3,"sources":["C:/Users/chena/QbitesReact/my-app/node_modules/rc-table/es/Body/index.js"],"names":["React","BodyRow","TableContext","ExpandedRow","BodyContext","getColumnsKey","ResizeContext","MeasureCell","Body","_ref","data","getRowKey","measureColumnWidth","expandedKeys","onRow","rowExpandable","emptyNode","childrenColumnName","_React$useContext","useContext","onColumnResize","_React$useContext2","prefixCls","getComponent","_React$useContext3","fixHeader","horizonScroll","flattenColumns","componentWidth","useMemo","WrapperComponent","trComponent","tdComponent","rows","length","map","record","index","key","createElement","rowKey","recordKey","rowComponent","cellComponent","expanded","className","concat","fixColumn","component","colSpan","columnsKey","style","height","fontSize","columnKey","MemoBody","memo","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,MAEIC,kBAAkB,GAAGH,IAAI,CAACG,kBAF9B;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACI,YAHxB;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAAA,MAKIC,aAAa,GAAGN,IAAI,CAACM,aALzB;AAAA,MAMIC,SAAS,GAAGP,IAAI,CAACO,SANrB;AAAA,MAOIC,kBAAkB,GAAGR,IAAI,CAACQ,kBAP9B;;AASA,MAAIC,iBAAiB,GAAGlB,KAAK,CAACmB,UAAN,CAAiBb,aAAjB,CAAxB;AAAA,MACIc,cAAc,GAAGF,iBAAiB,CAACE,cADvC;;AAGA,MAAIC,kBAAkB,GAAGrB,KAAK,CAACmB,UAAN,CAAiBjB,YAAjB,CAAzB;AAAA,MACIoB,SAAS,GAAGD,kBAAkB,CAACC,SADnC;AAAA,MAEIC,YAAY,GAAGF,kBAAkB,CAACE,YAFtC;;AAIA,MAAIC,kBAAkB,GAAGxB,KAAK,CAACmB,UAAN,CAAiBf,WAAjB,CAAzB;AAAA,MACIqB,SAAS,GAAGD,kBAAkB,CAACC,SADnC;AAAA,MAEIC,aAAa,GAAGF,kBAAkB,CAACE,aAFvC;AAAA,MAGIC,cAAc,GAAGH,kBAAkB,CAACG,cAHxC;AAAA,MAIIC,cAAc,GAAGJ,kBAAkB,CAACI,cAJxC;;AAMA,SAAO5B,KAAK,CAAC6B,OAAN,CAAc,YAAY;AAC/B,QAAIC,gBAAgB,GAAGP,YAAY,CAAC,CAAC,MAAD,EAAS,SAAT,CAAD,EAAsB,OAAtB,CAAnC;AACA,QAAIQ,WAAW,GAAGR,YAAY,CAAC,CAAC,MAAD,EAAS,KAAT,CAAD,EAAkB,IAAlB,CAA9B;AACA,QAAIS,WAAW,GAAGT,YAAY,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,EAAmB,IAAnB,CAA9B;AACA,QAAIU,IAAJ;;AAEA,QAAIvB,IAAI,CAACwB,MAAT,EAAiB;AACfD,MAAAA,IAAI,GAAGvB,IAAI,CAACyB,GAAL,CAAS,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AACvC,YAAIC,GAAG,GAAG3B,SAAS,CAACyB,MAAD,EAASC,KAAT,CAAnB;AACA,eAAO,aAAarC,KAAK,CAACuC,aAAN,CAAoBtC,OAApB,EAA6B;AAC/CqC,UAAAA,GAAG,EAAEA,GAD0C;AAE/CE,UAAAA,MAAM,EAAEF,GAFuC;AAG/CF,UAAAA,MAAM,EAAEA,MAHuC;AAI/CK,UAAAA,SAAS,EAAEH,GAJoC;AAK/CD,UAAAA,KAAK,EAAEA,KALwC;AAM/CK,UAAAA,YAAY,EAAEX,WANiC;AAO/CY,UAAAA,aAAa,EAAEX,WAPgC;AAQ/CnB,UAAAA,YAAY,EAAEA,YARiC;AAS/CC,UAAAA,KAAK,EAAEA,KATwC;AAU/CH,UAAAA,SAAS,EAAEA,SAVoC;AAW/CI,UAAAA,aAAa,EAAEA,aAXgC;AAY/CE,UAAAA,kBAAkB,EAAEA;AAZ2B,SAA7B,CAApB;AAcD,OAhBM,CAAP;AAiBD,KAlBD,MAkBO;AACLgB,MAAAA,IAAI,GAAG,aAAajC,KAAK,CAACuC,aAAN,CAAoBpC,WAApB,EAAiC;AACnDyC,QAAAA,QAAQ,EAAE,IADyC;AAEnDC,QAAAA,SAAS,EAAE,GAAGC,MAAH,CAAUxB,SAAV,EAAqB,cAArB,CAFwC;AAGnDA,QAAAA,SAAS,EAAEA,SAHwC;AAInDG,QAAAA,SAAS,EAAEA,SAJwC;AAKnDsB,QAAAA,SAAS,EAAErB,aALwC;AAMnDA,QAAAA,aAAa,EAAEA,aANoC;AAOnDsB,QAAAA,SAAS,EAAEjB,WAPwC;AAQnDH,QAAAA,cAAc,EAAEA,cARmC;AASnDe,QAAAA,aAAa,EAAEX,WAToC;AAUnDiB,QAAAA,OAAO,EAAEtB,cAAc,CAACO;AAV2B,OAAjC,EAWjBlB,SAXiB,CAApB;AAYD;;AAED,QAAIkC,UAAU,GAAG7C,aAAa,CAACsB,cAAD,CAA9B;AACA,WAAO,aAAa3B,KAAK,CAACuC,aAAN,CAAoBT,gBAApB,EAAsC;AACxDe,MAAAA,SAAS,EAAE,GAAGC,MAAH,CAAUxB,SAAV,EAAqB,QAArB;AAD6C,KAAtC,EAEjBV,kBAAkB,IAAI,aAAaZ,KAAK,CAACuC,aAAN,CAAoB,IAApB,EAA0B;AAC9D,qBAAe,MAD+C;AAE9DM,MAAAA,SAAS,EAAE,GAAGC,MAAH,CAAUxB,SAAV,EAAqB,cAArB,CAFmD;AAG9D6B,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,CADH;AAELC,QAAAA,QAAQ,EAAE;AAFL;AAHuD,KAA1B,EAOnCH,UAAU,CAACf,GAAX,CAAe,UAAUmB,SAAV,EAAqB;AACrC,aAAO,aAAatD,KAAK,CAACuC,aAAN,CAAoBhC,WAApB,EAAiC;AACnD+B,QAAAA,GAAG,EAAEgB,SAD8C;AAEnDA,QAAAA,SAAS,EAAEA,SAFwC;AAGnDlC,QAAAA,cAAc,EAAEA;AAHmC,OAAjC,CAApB;AAKD,KANE,CAPmC,CAFlB,EAefa,IAfe,CAApB;AAgBD,GAxDM,EAwDJ,CAACvB,IAAD,EAAOY,SAAP,EAAkBR,KAAlB,EAAyBF,kBAAzB,EAA6CC,YAA7C,EAA2DF,SAA3D,EAAsEY,YAAtE,EAAoFK,cAApF,EAAoGZ,SAApG,EAA+GW,cAA/G,CAxDI,CAAP;AAyDD;;AAED,IAAI4B,QAAQ,GAAG,aAAavD,KAAK,CAACwD,IAAN,CAAWhD,IAAX,CAA5B;AACA+C,QAAQ,CAACE,WAAT,GAAuB,MAAvB;AACA,eAAeF,QAAf","sourcesContent":["import * as React from 'react';\r\nimport BodyRow from './BodyRow';\r\nimport TableContext from '../context/TableContext';\r\nimport ExpandedRow from './ExpandedRow';\r\nimport BodyContext from '../context/BodyContext';\r\nimport { getColumnsKey } from '../utils/valueUtil';\r\nimport ResizeContext from '../context/ResizeContext';\r\nimport MeasureCell from './MeasureCell';\r\n\r\nfunction Body(_ref) {\r\n  var data = _ref.data,\r\n      getRowKey = _ref.getRowKey,\r\n      measureColumnWidth = _ref.measureColumnWidth,\r\n      expandedKeys = _ref.expandedKeys,\r\n      onRow = _ref.onRow,\r\n      rowExpandable = _ref.rowExpandable,\r\n      emptyNode = _ref.emptyNode,\r\n      childrenColumnName = _ref.childrenColumnName;\r\n\r\n  var _React$useContext = React.useContext(ResizeContext),\r\n      onColumnResize = _React$useContext.onColumnResize;\r\n\r\n  var _React$useContext2 = React.useContext(TableContext),\r\n      prefixCls = _React$useContext2.prefixCls,\r\n      getComponent = _React$useContext2.getComponent;\r\n\r\n  var _React$useContext3 = React.useContext(BodyContext),\r\n      fixHeader = _React$useContext3.fixHeader,\r\n      horizonScroll = _React$useContext3.horizonScroll,\r\n      flattenColumns = _React$useContext3.flattenColumns,\r\n      componentWidth = _React$useContext3.componentWidth;\r\n\r\n  return React.useMemo(function () {\r\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\r\n    var trComponent = getComponent(['body', 'row'], 'tr');\r\n    var tdComponent = getComponent(['body', 'cell'], 'td');\r\n    var rows;\r\n\r\n    if (data.length) {\r\n      rows = data.map(function (record, index) {\r\n        var key = getRowKey(record, index);\r\n        return /*#__PURE__*/React.createElement(BodyRow, {\r\n          key: key,\r\n          rowKey: key,\r\n          record: record,\r\n          recordKey: key,\r\n          index: index,\r\n          rowComponent: trComponent,\r\n          cellComponent: tdComponent,\r\n          expandedKeys: expandedKeys,\r\n          onRow: onRow,\r\n          getRowKey: getRowKey,\r\n          rowExpandable: rowExpandable,\r\n          childrenColumnName: childrenColumnName\r\n        });\r\n      });\r\n    } else {\r\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\r\n        expanded: true,\r\n        className: \"\".concat(prefixCls, \"-placeholder\"),\r\n        prefixCls: prefixCls,\r\n        fixHeader: fixHeader,\r\n        fixColumn: horizonScroll,\r\n        horizonScroll: horizonScroll,\r\n        component: trComponent,\r\n        componentWidth: componentWidth,\r\n        cellComponent: tdComponent,\r\n        colSpan: flattenColumns.length\r\n      }, emptyNode);\r\n    }\r\n\r\n    var columnsKey = getColumnsKey(flattenColumns);\r\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\r\n      className: \"\".concat(prefixCls, \"-tbody\")\r\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(\"tr\", {\r\n      \"aria-hidden\": \"true\",\r\n      className: \"\".concat(prefixCls, \"-measure-row\"),\r\n      style: {\r\n        height: 0,\r\n        fontSize: 0\r\n      }\r\n    }, columnsKey.map(function (columnKey) {\r\n      return /*#__PURE__*/React.createElement(MeasureCell, {\r\n        key: columnKey,\r\n        columnKey: columnKey,\r\n        onColumnResize: onColumnResize\r\n      });\r\n    })), rows);\r\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode, flattenColumns]);\r\n}\r\n\r\nvar MemoBody = /*#__PURE__*/React.memo(Body);\r\nMemoBody.displayName = 'Body';\r\nexport default MemoBody;"]},"metadata":{},"sourceType":"module"}