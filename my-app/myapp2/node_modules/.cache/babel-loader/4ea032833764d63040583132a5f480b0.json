{"ast":null,"code":"/* an extension to d3.zip so we call a function instead of an array */\nimport { min } from \"d3-array\";\nimport identity from \"./identity\";\nexport default function zipper() {\n  var combine = identity;\n\n  function zip() {\n    var n = arguments.length;\n    if (!n) return [];\n    var m = min(arguments, d3_zipLength); // eslint-disable-next-line prefer-const\n\n    var i = void 0,\n        zips = new Array(m);\n\n    for (i = -1; ++i < m;) {\n      for (var j = -1, _zip = zips[i] = new Array(n); ++j < n;) {\n        _zip[j] = arguments[j][i];\n      }\n\n      zips[i] = combine.apply(this, zips[i]);\n    }\n\n    return zips;\n  }\n\n  function d3_zipLength(d) {\n    return d.length;\n  }\n\n  zip.combine = function (x) {\n    if (!arguments.length) {\n      return combine;\n    }\n\n    combine = x;\n    return zip;\n  };\n\n  return zip;\n}","map":{"version":3,"sources":["../../../../src/lib/utils/zipper.js"],"names":["combine","n","arguments","m","min","i","zips","j","zip","d"],"mappings":"AAEA;AAEA,SAAA,GAAA,QAAA,UAAA;AAEA,OAAA,QAAA,MAAA,YAAA;AAEA,eAAe,SAAA,MAAA,GAAkB;AAChC,MAAIA,OAAAA,GAAJ,QAAA;;AAEA,WAAA,GAAA,GAAe;AACd,QAAMC,CAAAA,GAAIC,SAAAA,CAAV,MAAA;AACA,QAAI,CAAJ,CAAA,EAAQ,OAAA,EAAA;AACR,QAAMC,CAAAA,GAAIC,GAAAA,CAAAA,SAAAA,EAAV,YAAUA,CAAV,CAHc,CAKd;;AACA,QAAIC,CAAAA,GAAAA,KAAJ,CAAA;AAAA,QAAOC,IAAAA,GAAO,IAAA,KAAA,CAAd,CAAc,CAAd;;AACA,SAAKD,CAAAA,GAAI,CAAT,CAAA,EAAa,EAAA,CAAA,GAAb,CAAA,GAAwB;AACvB,WAAK,IAAIE,CAAAA,GAAI,CAAR,CAAA,EAAYC,IAAAA,GAAMF,IAAAA,CAAAA,CAAAA,CAAAA,GAAU,IAAA,KAAA,CAAjC,CAAiC,CAAjC,EAA+C,EAAA,CAAA,GAA/C,CAAA,GAA0D;AACzDE,QAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAASN,SAAAA,CAAAA,CAAAA,CAAAA,CAATM,CAASN,CAATM;AACA;;AACDF,MAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAUN,OAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAoBM,IAAAA,CAA9BA,CAA8BA,CAApBN,CAAVM;AACA;;AACD,WAAA,IAAA;AACA;;AACD,WAAA,YAAA,CAAA,CAAA,EAAyB;AACxB,WAAOG,CAAAA,CAAP,MAAA;AACA;;AACDD,EAAAA,GAAAA,CAAAA,OAAAA,GAAc,UAAA,CAAA,EAAY;AACzB,QAAI,CAACN,SAAAA,CAAL,MAAA,EAAuB;AACtB,aAAA,OAAA;AACA;;AACDF,IAAAA,OAAAA,GAAAA,CAAAA;AACA,WAAA,GAAA;AALDQ,GAAAA;;AAOA,SAAA,GAAA;AACA","sourcesContent":["\n\n/* an extension to d3.zip so we call a function instead of an array */\n\nimport { min } from \"d3-array\";\n\nimport identity from \"./identity\";\n\nexport default function zipper() {\n\tlet combine = identity;\n\n\tfunction zip() {\n\t\tconst n = arguments.length;\n\t\tif (!n) return [];\n\t\tconst m = min(arguments, d3_zipLength);\n\n\t\t// eslint-disable-next-line prefer-const\n\t\tlet i, zips = new Array(m);\n\t\tfor (i = -1; ++i < m; ) {\n\t\t\tfor (let j = -1, zip = zips[i] = new Array(n); ++j < n; ) {\n\t\t\t\tzip[j] = arguments[j][i];\n\t\t\t}\n\t\t\tzips[i] = combine.apply(this, zips[i]);\n\t\t}\n\t\treturn zips;\n\t}\n\tfunction d3_zipLength(d) {\n\t\treturn d.length;\n\t}\n\tzip.combine = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn combine;\n\t\t}\n\t\tcombine = x;\n\t\treturn zip;\n\t};\n\treturn zip;\n}\n"]},"metadata":{},"sourceType":"module"}