{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.getAxisCanvas = getAxisCanvas;\nexports.getMouseCanvas = getMouseCanvas;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar aliases = {\n  mouseleave: \"mousemove\",\n  // to draw interactive after mouse exit\n  panend: \"pan\",\n  pinchzoom: \"pan\",\n  mousedown: \"mousemove\",\n  click: \"mousemove\",\n  contextmenu: \"mousemove\",\n  dblclick: \"mousemove\",\n  dragstart: \"drag\",\n  dragend: \"drag\",\n  dragcancel: \"drag\"\n};\n\nvar GenericComponent = function (_Component) {\n  _inherits(GenericComponent, _Component);\n\n  function GenericComponent(props, context) {\n    _classCallCheck(this, GenericComponent);\n\n    var _this = _possibleConstructorReturn(this, (GenericComponent.__proto__ || Object.getPrototypeOf(GenericComponent)).call(this, props, context));\n\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    _this.getMoreProps = _this.getMoreProps.bind(_this);\n    _this.listener = _this.listener.bind(_this);\n    _this.draw = _this.draw.bind(_this);\n    _this.updateMoreProps = _this.updateMoreProps.bind(_this);\n    _this.evaluateType = _this.evaluateType.bind(_this);\n    _this.isHover = _this.isHover.bind(_this);\n    _this.preCanvasDraw = _this.preCanvasDraw.bind(_this);\n    _this.postCanvasDraw = _this.postCanvasDraw.bind(_this);\n    _this.getPanConditions = _this.getPanConditions.bind(_this);\n    _this.shouldTypeProceed = _this.shouldTypeProceed.bind(_this);\n    _this.preEvaluate = _this.preEvaluate.bind(_this);\n    var generateSubscriptionId = context.generateSubscriptionId;\n    _this.suscriberId = generateSubscriptionId();\n    _this.moreProps = {};\n    _this.state = {\n      updateCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(GenericComponent, [{\n    key: \"updateMoreProps\",\n    value: function updateMoreProps(moreProps) {\n      var _this2 = this;\n\n      Object.keys(moreProps).forEach(function (key) {\n        _this2.moreProps[key] = moreProps[key];\n      });\n    }\n  }, {\n    key: \"shouldTypeProceed\",\n    value: function shouldTypeProceed() {\n      return true;\n    }\n  }, {\n    key: \"preEvaluate\",\n    value: function preEvaluate() {}\n  }, {\n    key: \"listener\",\n    value: function listener(type, moreProps, state, e) {\n      // console.log(e.shiftKey)\n      if ((0, _utils.isDefined)(moreProps)) {\n        this.updateMoreProps(moreProps);\n      }\n\n      this.evaluationInProgress = true;\n      this.evaluateType(type, e);\n      this.evaluationInProgress = false;\n    }\n  }, {\n    key: \"evaluateType\",\n    value: function evaluateType(type, e) {\n      var newType = aliases[type] || type;\n      var proceed = this.props.drawOn.indexOf(newType) > -1; // console.log(\"type ->\", type, proceed);\n\n      if (!proceed) return; // const moreProps = this.getMoreProps();\n\n      this.preEvaluate(type, this.moreProps, e);\n      if (!this.shouldTypeProceed(type, this.moreProps)) return;\n\n      switch (type) {\n        case \"zoom\":\n        case \"mouseenter\":\n          // DO NOT DRAW FOR THESE EVENTS\n          break;\n\n        case \"mouseleave\":\n          {\n            this.moreProps.hovering = false;\n            var moreProps = this.getMoreProps();\n\n            if (this.props.onUnHover) {\n              this.props.onUnHover(moreProps, e);\n            }\n\n            break;\n          }\n\n        case \"contextmenu\":\n          {\n            if (this.props.onContextMenu) {\n              this.props.onContextMenu(this.getMoreProps(), e);\n            }\n\n            if (this.moreProps.hovering && this.props.onContextMenuWhenHover) {\n              this.props.onContextMenuWhenHover(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"mousedown\":\n          {\n            if (this.props.onMouseDown) {\n              this.props.onMouseDown(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"click\":\n          {\n            var _moreProps = this.getMoreProps();\n\n            if (this.moreProps.hovering) {\n              // console.error(\"TODO use this only for SAR, Line series\")\n              this.props.onClickWhenHover(_moreProps, e);\n            } else {\n              this.props.onClickOutside(_moreProps, e);\n            }\n\n            if (this.props.onClick) {\n              this.props.onClick(_moreProps, e);\n            }\n\n            break;\n          }\n\n        case \"mousemove\":\n          {\n            var prevHover = this.moreProps.hovering;\n            this.moreProps.hovering = this.isHover(e);\n            var _context = this.context,\n                amIOnTop = _context.amIOnTop,\n                setCursorClass = _context.setCursorClass;\n\n            if (this.moreProps.hovering && !this.props.selected\n            /* && !prevHover */\n            && amIOnTop(this.suscriberId) && (0, _utils.isDefined)(this.props.onHover)) {\n              setCursorClass(\"react-stockcharts-pointer-cursor\");\n              this.iSetTheCursorClass = true;\n            } else if (this.moreProps.hovering && this.props.selected && amIOnTop(this.suscriberId)) {\n              setCursorClass(this.props.interactiveCursorClass);\n              this.iSetTheCursorClass = true;\n            } else if (prevHover && !this.moreProps.hovering && this.iSetTheCursorClass) {\n              this.iSetTheCursorClass = false;\n              setCursorClass(null);\n            }\n\n            var _moreProps2 = this.getMoreProps();\n\n            if (this.moreProps.hovering && !prevHover) {\n              if (this.props.onHover) {\n                this.props.onHover(_moreProps2, e);\n              }\n            }\n\n            if (prevHover && !this.moreProps.hovering) {\n              if (this.props.onUnHover) {\n                this.props.onUnHover(_moreProps2, e);\n              }\n            }\n\n            if (this.props.onMouseMove) {\n              this.props.onMouseMove(_moreProps2, e);\n            }\n\n            break;\n          }\n\n        case \"dblclick\":\n          {\n            var _moreProps3 = this.getMoreProps();\n\n            if (this.props.onDoubleClick) {\n              this.props.onDoubleClick(_moreProps3, e);\n            }\n\n            if (this.moreProps.hovering && this.props.onDoubleClickWhenHover) {\n              this.props.onDoubleClickWhenHover(_moreProps3, e);\n            }\n\n            break;\n          }\n\n        case \"pan\":\n          {\n            this.moreProps.hovering = false;\n\n            if (this.props.onPan) {\n              this.props.onPan(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"panend\":\n          {\n            if (this.props.onPanEnd) {\n              this.props.onPanEnd(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"dragstart\":\n          {\n            if (this.getPanConditions().draggable) {\n              var _amIOnTop = this.context.amIOnTop;\n\n              if (_amIOnTop(this.suscriberId)) {\n                this.dragInProgress = true;\n                this.props.onDragStart(this.getMoreProps(), e);\n              }\n            }\n\n            this.someDragInProgress = true;\n            break;\n          }\n\n        case \"drag\":\n          {\n            if (this.dragInProgress && this.props.onDrag) {\n              this.props.onDrag(this.getMoreProps(), e);\n            }\n\n            break;\n          }\n\n        case \"dragend\":\n          {\n            if (this.dragInProgress && this.props.onDragComplete) {\n              this.props.onDragComplete(this.getMoreProps(), e);\n            }\n\n            this.dragInProgress = false;\n            this.someDragInProgress = false;\n            break;\n          }\n\n        case \"dragcancel\":\n          {\n            if (this.dragInProgress || this.iSetTheCursorClass) {\n              var _setCursorClass = this.context.setCursorClass;\n\n              _setCursorClass(null);\n            }\n\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"isHover\",\n    value: function isHover(e) {\n      return (0, _utils.isDefined)(this.props.isHover) ? this.props.isHover(this.getMoreProps(), e) : false;\n    }\n  }, {\n    key: \"getPanConditions\",\n    value: function getPanConditions() {\n      var draggable = !!(this.props.selected && this.moreProps.hovering) || this.props.enableDragOnHover && this.moreProps.hovering;\n      return {\n        draggable: draggable,\n        panEnabled: !this.props.disablePan\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        force: false\n      },\n          trigger = _ref.trigger,\n          force = _ref.force;\n\n      var type = aliases[trigger] || trigger;\n      var proceed = this.props.drawOn.indexOf(type) > -1;\n\n      if (proceed || this.props.selected\n      /* this is to draw as soon as you select */\n      || force) {\n        var chartCanvasType = this.context.chartCanvasType;\n        var canvasDraw = this.props.canvasDraw;\n\n        if ((0, _utils.isNotDefined)(canvasDraw) || chartCanvasType === \"svg\") {\n          var updateCount = this.state.updateCount;\n          this.setState({\n            updateCount: updateCount + 1\n          });\n        } else {\n          this.drawOnCanvas();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _context2 = this.context,\n          subscribe = _context2.subscribe,\n          chartId = _context2.chartId;\n      var _props = this.props,\n          clip = _props.clip,\n          edgeClip = _props.edgeClip;\n      subscribe(this.suscriberId, {\n        chartId: chartId,\n        clip: clip,\n        edgeClip: edgeClip,\n        listener: this.listener,\n        draw: this.draw,\n        getPanConditions: this.getPanConditions\n      });\n      this.componentWillReceiveProps(this.props, this.context);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var unsubscribe = this.context.unsubscribe;\n      unsubscribe(this.suscriberId);\n\n      if (this.iSetTheCursorClass) {\n        var setCursorClass = this.context.setCursorClass;\n        setCursorClass(null);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var chartCanvasType = this.context.chartCanvasType;\n      var _props2 = this.props,\n          canvasDraw = _props2.canvasDraw,\n          selected = _props2.selected,\n          interactiveCursorClass = _props2.interactiveCursorClass;\n\n      if (prevProps.selected !== selected) {\n        var setCursorClass = this.context.setCursorClass;\n\n        if (selected && this.moreProps.hovering) {\n          this.iSetTheCursorClass = true;\n          setCursorClass(interactiveCursorClass);\n        } else {\n          this.iSetTheCursorClass = false;\n          setCursorClass(null);\n        }\n      }\n\n      if ((0, _utils.isDefined)(canvasDraw) && !this.evaluationInProgress // && !(this.someDragInProgress && this.props.selected)\n\n      /*\n      prevent double draw of interactive elements\n      during dragging / hover / click etc.\n      */\n      && chartCanvasType !== \"svg\") {\n        this.updateMoreProps(this.moreProps);\n        this.drawOnCanvas();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var xScale = nextContext.xScale,\n          plotData = nextContext.plotData,\n          chartConfig = nextContext.chartConfig,\n          getMutableState = nextContext.getMutableState;\n      this.props.debug(nextContext);\n      this.moreProps = _extends({}, this.moreProps, getMutableState(), {\n        /*\n        ^ this is so\n        mouseXY, currentCharts, currentItem are available to\n        newly created components like MouseHoverText which\n        is created right after a new interactive object is drawn\n        */\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      });\n    }\n  }, {\n    key: \"getMoreProps\",\n    value: function getMoreProps() {\n      var _context3 = this.context,\n          xScale = _context3.xScale,\n          plotData = _context3.plotData,\n          chartConfig = _context3.chartConfig,\n          morePropsDecorator = _context3.morePropsDecorator,\n          xAccessor = _context3.xAccessor,\n          displayXAccessor = _context3.displayXAccessor,\n          width = _context3.width,\n          height = _context3.height;\n      var _context4 = this.context,\n          chartId = _context4.chartId,\n          fullData = _context4.fullData;\n\n      var moreProps = _extends({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        width: width,\n        height: height,\n        chartId: chartId,\n        fullData: fullData\n      }, this.moreProps);\n\n      return (morePropsDecorator || _utils.identity)(moreProps);\n    }\n  }, {\n    key: \"preCanvasDraw\",\n    value: function preCanvasDraw() {// do nothing\n    }\n  }, {\n    key: \"postCanvasDraw\",\n    value: function postCanvasDraw() {}\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas() {\n      var _props3 = this.props,\n          canvasDraw = _props3.canvasDraw,\n          canvasToDraw = _props3.canvasToDraw;\n      var getCanvasContexts = this.context.getCanvasContexts;\n      var moreProps = this.getMoreProps();\n      var ctx = canvasToDraw(getCanvasContexts());\n      this.preCanvasDraw(ctx, moreProps);\n      canvasDraw(ctx, moreProps);\n      this.postCanvasDraw(ctx, moreProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _context5 = this.context,\n          chartCanvasType = _context5.chartCanvasType,\n          chartId = _context5.chartId;\n      var _props4 = this.props,\n          canvasDraw = _props4.canvasDraw,\n          clip = _props4.clip,\n          svgDraw = _props4.svgDraw;\n\n      if ((0, _utils.isDefined)(canvasDraw) && chartCanvasType !== \"svg\") {\n        return null;\n      }\n\n      var suffix = (0, _utils.isDefined)(chartId) ? \"-\" + chartId : \"\";\n      var style = clip ? {\n        \"clipPath\": \"url(#chart-area-clip\" + suffix + \")\"\n      } : null;\n      return _react2.default.createElement(\"g\", {\n        style: style\n      }, svgDraw(this.getMoreProps()));\n    }\n  }]);\n\n  return GenericComponent;\n}(_react.Component);\n\nGenericComponent.propTypes = {\n  svgDraw: _propTypes2.default.func.isRequired,\n  canvasDraw: _propTypes2.default.func,\n  drawOn: _propTypes2.default.array.isRequired,\n  clip: _propTypes2.default.bool.isRequired,\n  edgeClip: _propTypes2.default.bool.isRequired,\n  interactiveCursorClass: _propTypes2.default.string,\n  selected: _propTypes2.default.bool.isRequired,\n  enableDragOnHover: _propTypes2.default.bool.isRequired,\n  disablePan: _propTypes2.default.bool.isRequired,\n  canvasToDraw: _propTypes2.default.func.isRequired,\n  isHover: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  onClickWhenHover: _propTypes2.default.func,\n  onClickOutside: _propTypes2.default.func,\n  onPan: _propTypes2.default.func,\n  onPanEnd: _propTypes2.default.func,\n  onDragStart: _propTypes2.default.func,\n  onDrag: _propTypes2.default.func,\n  onDragComplete: _propTypes2.default.func,\n  onDoubleClick: _propTypes2.default.func,\n  onDoubleClickWhenHover: _propTypes2.default.func,\n  onContextMenu: _propTypes2.default.func,\n  onContextMenuWhenHover: _propTypes2.default.func,\n  onMouseMove: _propTypes2.default.func,\n  onMouseDown: _propTypes2.default.func,\n  onHover: _propTypes2.default.func,\n  onUnHover: _propTypes2.default.func,\n  debug: _propTypes2.default.func // owner: PropTypes.string.isRequired,\n\n};\nGenericComponent.defaultProps = {\n  svgDraw: (0, _utils.functor)(null),\n  draw: [],\n  canvasToDraw: function canvasToDraw(contexts) {\n    return contexts.mouseCoord;\n  },\n  clip: true,\n  edgeClip: false,\n  selected: false,\n  disablePan: false,\n  enableDragOnHover: false,\n  onClickWhenHover: _utils.noop,\n  onClickOutside: _utils.noop,\n  onDragStart: _utils.noop,\n  onMouseMove: _utils.noop,\n  onMouseDown: _utils.noop,\n  debug: _utils.noop\n};\nGenericComponent.contextTypes = {\n  width: _propTypes2.default.number.isRequired,\n  height: _propTypes2.default.number.isRequired,\n  margin: _propTypes2.default.object.isRequired,\n  chartId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  getCanvasContexts: _propTypes2.default.func,\n  chartCanvasType: _propTypes2.default.string,\n  xScale: _propTypes2.default.func.isRequired,\n  xAccessor: _propTypes2.default.func.isRequired,\n  displayXAccessor: _propTypes2.default.func.isRequired,\n  plotData: _propTypes2.default.array.isRequired,\n  fullData: _propTypes2.default.array.isRequired,\n  chartConfig: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]).isRequired,\n  morePropsDecorator: _propTypes2.default.func,\n  generateSubscriptionId: _propTypes2.default.func,\n  getMutableState: _propTypes2.default.func.isRequired,\n  amIOnTop: _propTypes2.default.func.isRequired,\n  subscribe: _propTypes2.default.func.isRequired,\n  unsubscribe: _propTypes2.default.func.isRequired,\n  setCursorClass: _propTypes2.default.func.isRequired\n};\nexports.default = GenericComponent;\n\nfunction getAxisCanvas(contexts) {\n  return contexts.axes;\n}\n\nfunction getMouseCanvas(contexts) {\n  return contexts.mouseCoord;\n}","map":{"version":3,"sources":["../../src/lib/GenericComponent.js"],"names":["aliases","mouseleave","panend","pinchzoom","mousedown","click","contextmenu","dblclick","dragstart","dragend","dragcancel","GenericComponent","generateSubscriptionId","context","updateCount","moreProps","Object","type","state","e","newType","proceed","prevHover","amIOnTop","setCursorClass","selected","draggable","panEnabled","disablePan","trigger","force","chartCanvasType","canvasDraw","subscribe","chartId","clip","edgeClip","listener","draw","getPanConditions","unsubscribe","prevProps","interactiveCursorClass","evaluationInProgress","nextProps","nextContext","xScale","plotData","chartConfig","getMutableState","morePropsDecorator","xAccessor","displayXAccessor","width","height","fullData","canvasToDraw","getCanvasContexts","ctx","svgDraw","suffix","style","drawOn","enableDragOnHover","isHover","onClick","onClickWhenHover","onClickOutside","onPan","onPanEnd","onDragStart","onDrag","onDragComplete","onDoubleClick","onDoubleClickWhenHover","onContextMenu","onContextMenuWhenHover","onMouseMove","onMouseDown","onHover","onUnHover","debug","func","contexts","margin","isRequired","getAxisCanvas","getMouseCanvas"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n\tisNotDefined,\n\tisDefined,\n\tnoop,\n\tfunctor,\n\tidentity,\n} from \"./utils\";\n\nconst aliases = {\n\tmouseleave: \"mousemove\", // to draw interactive after mouse exit\n\tpanend: \"pan\",\n\tpinchzoom: \"pan\",\n\tmousedown: \"mousemove\",\n\tclick: \"mousemove\",\n\tcontextmenu: \"mousemove\",\n\tdblclick: \"mousemove\",\n\tdragstart: \"drag\",\n\tdragend: \"drag\",\n\tdragcancel: \"drag\",\n};\n\nclass GenericComponent extends Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t\tthis.getMoreProps = this.getMoreProps.bind(this);\n\t\tthis.listener = this.listener.bind(this);\n\t\tthis.draw = this.draw.bind(this);\n\t\tthis.updateMoreProps = this.updateMoreProps.bind(this);\n\t\tthis.evaluateType = this.evaluateType.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t\tthis.preCanvasDraw = this.preCanvasDraw.bind(this);\n\t\tthis.postCanvasDraw = this.postCanvasDraw.bind(this);\n\t\tthis.getPanConditions = this.getPanConditions.bind(this);\n\t\tthis.shouldTypeProceed = this.shouldTypeProceed.bind(this);\n\t\tthis.preEvaluate = this.preEvaluate.bind(this);\n\n\t\tconst { generateSubscriptionId } = context;\n\t\tthis.suscriberId = generateSubscriptionId();\n\n\t\tthis.moreProps = {};\n\n\t\tthis.state = {\n\t\t\tupdateCount: 0,\n\t\t};\n\t}\n\tupdateMoreProps(moreProps) {\n\t\tObject.keys(moreProps).forEach(key => {\n\t\t\tthis.moreProps[key] = moreProps[key];\n\t\t});\n\t}\n\tshouldTypeProceed() {\n\t\treturn true;\n\t}\n\tpreEvaluate() {\n\t}\n\tlistener(type, moreProps, state, e) {\n\t\t// console.log(e.shiftKey)\n\t\tif (isDefined(moreProps)) {\n\t\t\tthis.updateMoreProps(moreProps);\n\t\t}\n\t\tthis.evaluationInProgress = true;\n\t\tthis.evaluateType(type, e);\n\t\tthis.evaluationInProgress = false;\n\t}\n\tevaluateType(type, e) {\n\t\tconst newType = aliases[type] || type;\n\t\tconst proceed = this.props.drawOn.indexOf(newType) > -1;\n\n\t\t// console.log(\"type ->\", type, proceed);\n\n\t\tif (!proceed) return;\n\t\t// const moreProps = this.getMoreProps();\n\t\tthis.preEvaluate(type, this.moreProps, e);\n\t\tif (!this.shouldTypeProceed(type, this.moreProps)) return;\n\n\t\tswitch (type) {\n\t\t\tcase \"zoom\":\n\t\t\tcase \"mouseenter\":\n\t\t\t// DO NOT DRAW FOR THESE EVENTS\n\t\t\t\tbreak;\n\t\t\tcase \"mouseleave\": {\n\t\t\t\tthis.moreProps.hovering = false;\n\t\t\t\tconst moreProps = this.getMoreProps();\n\n\t\t\t\tif (this.props.onUnHover) {\n\t\t\t\t\tthis.props.onUnHover(moreProps, e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"contextmenu\": {\n\t\t\t\tif (this.props.onContextMenu) {\n\t\t\t\t\tthis.props.onContextMenu(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tthis.moreProps.hovering\n\t\t\t\t&& this.props.onContextMenuWhenHover\n\t\t\t\t) {\n\t\t\t\t\tthis.props.onContextMenuWhenHover(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"mousedown\": {\n\t\t\t\tif (this.props.onMouseDown) {\n\t\t\t\t\tthis.props.onMouseDown(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"click\": {\n\t\t\t\tconst moreProps = this.getMoreProps();\n\t\t\t\tif (this.moreProps.hovering) {\n\t\t\t\t// console.error(\"TODO use this only for SAR, Line series\")\n\t\t\t\t\tthis.props.onClickWhenHover(moreProps, e);\n\t\t\t\t} else {\n\t\t\t\t\tthis.props.onClickOutside(moreProps, e);\n\t\t\t\t}\n\t\t\t\tif (this.props.onClick) {\n\t\t\t\t\tthis.props.onClick(moreProps, e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"mousemove\": {\n\n\t\t\t\tconst prevHover = this.moreProps.hovering;\n\t\t\t\tthis.moreProps.hovering = this.isHover(e);\n\n\t\t\t\tconst { amIOnTop, setCursorClass } = this.context;\n\n\t\t\t\tif (this.moreProps.hovering\n\t\t\t\t\t&& !this.props.selected\n\t\t\t\t\t/* && !prevHover */\n\t\t\t\t\t&& amIOnTop(this.suscriberId)\n\t\t\t\t\t&& isDefined(this.props.onHover)) {\n\t\t\t\t\tsetCursorClass(\"react-stockcharts-pointer-cursor\");\n\t\t\t\t\tthis.iSetTheCursorClass = true;\n\t\t\t\t} else if (this.moreProps.hovering\n\t\t\t\t\t&& this.props.selected\n\t\t\t\t\t&& amIOnTop(this.suscriberId)) {\n\t\t\t\t\tsetCursorClass(this.props.interactiveCursorClass);\n\t\t\t\t\tthis.iSetTheCursorClass = true;\n\t\t\t\t} else if (prevHover\n\t\t\t\t\t&& !this.moreProps.hovering\n\t\t\t\t\t&& this.iSetTheCursorClass) {\n\t\t\t\t\tthis.iSetTheCursorClass = false;\n\t\t\t\t\tsetCursorClass(null);\n\t\t\t\t}\n\t\t\t\tconst moreProps = this.getMoreProps();\n\n\t\t\t\tif (this.moreProps.hovering && !prevHover) {\n\t\t\t\t\tif (this.props.onHover) {\n\t\t\t\t\t\tthis.props.onHover(moreProps, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (prevHover && !this.moreProps.hovering) {\n\t\t\t\t\tif (this.props.onUnHover) {\n\t\t\t\t\t\tthis.props.onUnHover(moreProps, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.props.onMouseMove) {\n\t\t\t\t\tthis.props.onMouseMove(moreProps, e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dblclick\": {\n\t\t\t\tconst moreProps = this.getMoreProps();\n\n\t\t\t\tif (this.props.onDoubleClick) {\n\t\t\t\t\tthis.props.onDoubleClick(moreProps, e);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tthis.moreProps.hovering\n\t\t\t\t&& this.props.onDoubleClickWhenHover\n\t\t\t\t) {\n\t\t\t\t\tthis.props.onDoubleClickWhenHover(moreProps, e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"pan\": {\n\t\t\t\tthis.moreProps.hovering = false;\n\t\t\t\tif (this.props.onPan) {\n\t\t\t\t\tthis.props.onPan(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"panend\": {\n\t\t\t\tif (this.props.onPanEnd) {\n\t\t\t\t\tthis.props.onPanEnd(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dragstart\": {\n\t\t\t\tif (this.getPanConditions().draggable) {\n\t\t\t\t\tconst { amIOnTop } = this.context;\n\t\t\t\t\tif (amIOnTop(this.suscriberId)) {\n\t\t\t\t\t\tthis.dragInProgress = true;\n\t\t\t\t\t\tthis.props.onDragStart(this.getMoreProps(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.someDragInProgress = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"drag\": {\n\t\t\t\tif (this.dragInProgress && this.props.onDrag) {\n\t\t\t\t\tthis.props.onDrag(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dragend\": {\n\t\t\t\tif (this.dragInProgress && this.props.onDragComplete) {\n\t\t\t\t\tthis.props.onDragComplete(this.getMoreProps(), e);\n\t\t\t\t}\n\t\t\t\tthis.dragInProgress = false;\n\t\t\t\tthis.someDragInProgress = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dragcancel\": {\n\t\t\t\tif (this.dragInProgress || this.iSetTheCursorClass) {\n\t\t\t\t\tconst { setCursorClass } = this.context;\n\t\t\t\t\tsetCursorClass(null);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tisHover(e) {\n\t\treturn isDefined(this.props.isHover)\n\t\t\t? this.props.isHover(this.getMoreProps(), e)\n\t\t\t: false;\n\t}\n\tgetPanConditions() {\n\t\tconst draggable = (\n\t\t\t!!(this.props.selected && this.moreProps.hovering)\n\t\t\t|| (this.props.enableDragOnHover && this.moreProps.hovering)\n\t\t);\n\n\t\treturn {\n\t\t\tdraggable,\n\t\t\tpanEnabled: !this.props.disablePan,\n\t\t};\n\t}\n\tdraw({ trigger, force } = { force: false }) {\n\t\tconst type = aliases[trigger] || trigger;\n\t\tconst proceed = this.props.drawOn.indexOf(type) > -1;\n\n\t\tif (proceed\n\t\t\t|| this.props.selected /* this is to draw as soon as you select */\n\t\t\t|| force\n\t\t) {\n\t\t\tconst { chartCanvasType } = this.context;\n\t\t\tconst { canvasDraw } = this.props;\n\n\t\t\tif (isNotDefined(canvasDraw) || chartCanvasType === \"svg\") {\n\t\t\t\tconst { updateCount } = this.state;\n\t\t\t\tthis.setState({\n\t\t\t\t\tupdateCount: updateCount + 1,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.drawOnCanvas();\n\t\t\t}\n\t\t}\n\t}\n\tcomponentWillMount() {\n\t\tconst { subscribe, chartId } = this.context;\n\t\tconst { clip, edgeClip } = this.props;\n\n\t\tsubscribe(this.suscriberId,\n\t\t\t{\n\t\t\t\tchartId, clip, edgeClip,\n\t\t\t\tlistener: this.listener,\n\t\t\t\tdraw: this.draw,\n\t\t\t\tgetPanConditions: this.getPanConditions,\n\t\t\t}\n\t\t);\n\t\tthis.componentWillReceiveProps(this.props, this.context);\n\t}\n\tcomponentWillUnmount() {\n\t\tconst { unsubscribe } = this.context;\n\t\tunsubscribe(this.suscriberId);\n\t\tif (this.iSetTheCursorClass) {\n\t\t\tconst { setCursorClass } = this.context;\n\t\t\tsetCursorClass(null);\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.componentDidUpdate(this.props);\n\t}\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { chartCanvasType } = this.context;\n\t\tconst { canvasDraw, selected, interactiveCursorClass } = this.props;\n\n\t\tif (prevProps.selected !== selected) {\n\t\t\tconst { setCursorClass } = this.context;\n\t\t\tif (selected && this.moreProps.hovering) {\n\t\t\t\tthis.iSetTheCursorClass = true;\n\t\t\t\tsetCursorClass(interactiveCursorClass);\n\t\t\t} else {\n\t\t\t\tthis.iSetTheCursorClass = false;\n\t\t\t\tsetCursorClass(null);\n\t\t\t}\n\t\t}\n\t\tif (isDefined(canvasDraw)\n\t\t\t\t&& !this.evaluationInProgress\n\t\t\t\t// && !(this.someDragInProgress && this.props.selected)\n\t\t\t\t/*\n\t\t\t\tprevent double draw of interactive elements\n\t\t\t\tduring dragging / hover / click etc.\n\t\t\t\t*/\n\t\t\t\t&& chartCanvasType !== \"svg\") {\n\n\t\t\tthis.updateMoreProps(this.moreProps);\n\t\t\tthis.drawOnCanvas();\n\t\t}\n\t}\n\tcomponentWillReceiveProps(nextProps, nextContext) {\n\t\tconst { xScale, plotData, chartConfig, getMutableState } = nextContext;\n\n\t\tthis.props.debug(nextContext);\n\t\tthis.moreProps = {\n\t\t\t...this.moreProps,\n\t\t\t...getMutableState(),\n\t\t\t/*\n\t\t\t^ this is so\n\t\t\tmouseXY, currentCharts, currentItem are available to\n\t\t\tnewly created components like MouseHoverText which\n\t\t\tis created right after a new interactive object is drawn\n\t\t\t*/\n\t\t\txScale, plotData, chartConfig\n\t\t};\n\t}\n\tgetMoreProps() {\n\t\tconst {\n\t\t\txScale,\n\t\t\tplotData,\n\t\t\tchartConfig,\n\t\t\tmorePropsDecorator,\n\t\t\txAccessor,\n\t\t\tdisplayXAccessor,\n\t\t\twidth,\n\t\t\theight,\n\t\t} = this.context;\n\n\t\tconst { chartId, fullData } = this.context;\n\n\t\tconst moreProps = {\n\t\t\txScale, plotData, chartConfig,\n\t\t\txAccessor, displayXAccessor,\n\t\t\twidth, height,\n\t\t\tchartId,\n\t\t\tfullData,\n\t\t\t...this.moreProps,\n\t\t};\n\n\t\treturn (morePropsDecorator || identity)(moreProps);\n\t}\n\tpreCanvasDraw() {\n\t\t// do nothing\n\t}\n\tpostCanvasDraw() {\n\t}\n\tdrawOnCanvas() {\n\t\tconst { canvasDraw, canvasToDraw } = this.props;\n\t\tconst { getCanvasContexts } = this.context;\n\n\t\tconst moreProps = this.getMoreProps();\n\n\t\tconst ctx = canvasToDraw(getCanvasContexts());\n\n\t\tthis.preCanvasDraw(ctx, moreProps);\n\t\tcanvasDraw(ctx, moreProps);\n\t\tthis.postCanvasDraw(ctx, moreProps);\n\t}\n\trender() {\n\t\tconst { chartCanvasType, chartId } = this.context;\n\t\tconst { canvasDraw, clip, svgDraw } = this.props;\n\n\t\tif (isDefined(canvasDraw) && chartCanvasType !== \"svg\") {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst suffix = isDefined(chartId) ? \"-\" + chartId : \"\";\n\n\t\tconst style = clip ? { \"clipPath\": `url(#chart-area-clip${suffix})` } : null;\n\n\t\treturn <g style={style}>{svgDraw(this.getMoreProps())}</g>;\n\t}\n}\n\nGenericComponent.propTypes = {\n\tsvgDraw: PropTypes.func.isRequired,\n\tcanvasDraw: PropTypes.func,\n\n\tdrawOn: PropTypes.array.isRequired,\n\n\tclip: PropTypes.bool.isRequired,\n\tedgeClip: PropTypes.bool.isRequired,\n\tinteractiveCursorClass: PropTypes.string,\n\n\tselected: PropTypes.bool.isRequired,\n\tenableDragOnHover: PropTypes.bool.isRequired,\n\tdisablePan: PropTypes.bool.isRequired,\n\n\tcanvasToDraw: PropTypes.func.isRequired,\n\n\tisHover: PropTypes.func,\n\n\tonClick: PropTypes.func,\n\tonClickWhenHover: PropTypes.func,\n\tonClickOutside: PropTypes.func,\n\n\tonPan: PropTypes.func,\n\tonPanEnd: PropTypes.func,\n\tonDragStart: PropTypes.func,\n\tonDrag: PropTypes.func,\n\tonDragComplete: PropTypes.func,\n\tonDoubleClick: PropTypes.func,\n\tonDoubleClickWhenHover: PropTypes.func,\n\tonContextMenu: PropTypes.func,\n\tonContextMenuWhenHover: PropTypes.func,\n\tonMouseMove: PropTypes.func,\n\tonMouseDown: PropTypes.func,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\n\tdebug: PropTypes.func,\n\t// owner: PropTypes.string.isRequired,\n};\n\nGenericComponent.defaultProps = {\n\tsvgDraw: functor(null),\n\tdraw: [],\n\tcanvasToDraw: contexts => contexts.mouseCoord,\n\tclip: true,\n\tedgeClip: false,\n\tselected: false,\n\tdisablePan: false,\n\tenableDragOnHover: false,\n\n\tonClickWhenHover: noop,\n\tonClickOutside: noop,\n\tonDragStart: noop,\n\tonMouseMove: noop,\n\tonMouseDown: noop,\n\tdebug: noop,\n};\n\nGenericComponent.contextTypes = {\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tmargin: PropTypes.object.isRequired,\n\tchartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\tgetCanvasContexts: PropTypes.func,\n\n\tchartCanvasType: PropTypes.string,\n\txScale: PropTypes.func.isRequired,\n\txAccessor: PropTypes.func.isRequired,\n\tdisplayXAccessor: PropTypes.func.isRequired,\n\tplotData: PropTypes.array.isRequired,\n\tfullData: PropTypes.array.isRequired,\n\n\tchartConfig: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t]).isRequired,\n\n\tmorePropsDecorator: PropTypes.func,\n\tgenerateSubscriptionId: PropTypes.func,\n\tgetMutableState: PropTypes.func.isRequired,\n\n\tamIOnTop: PropTypes.func.isRequired,\n\tsubscribe: PropTypes.func.isRequired,\n\tunsubscribe: PropTypes.func.isRequired,\n\tsetCursorClass: PropTypes.func.isRequired,\n};\n\nexport default GenericComponent;\n\nexport function getAxisCanvas(contexts) {\n\treturn contexts.axes;\n}\n\nexport function getMouseCanvas(contexts) {\n\treturn contexts.mouseCoord;\n}\n"]},"metadata":{},"sourceType":"script"}