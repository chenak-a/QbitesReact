{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { select, event as d3Event, mouse, touches } from \"d3-selection\";\nimport { isDefined, mousePosition, touchPosition, getTouchProps, d3Window, MOUSEMOVE, MOUSEUP, MOUSEENTER, MOUSELEAVE, TOUCHMOVE, TOUCHEND, noop } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\"; // import { clearTimeout, setTimeout } from \"timers\";\n\nvar EventCapture = function (_Component) {\n  _inherits(EventCapture, _Component);\n\n  function EventCapture(props) {\n    _classCallCheck(this, EventCapture);\n\n    var _this = _possibleConstructorReturn(this, (EventCapture.__proto__ || Object.getPrototypeOf(EventCapture)).call(this, props));\n\n    _this.handleEnter = _this.handleEnter.bind(_this);\n    _this.handleLeave = _this.handleLeave.bind(_this);\n    _this.handleWheel = _this.handleWheel.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handlePanEnd = _this.handlePanEnd.bind(_this);\n    _this.handlePan = _this.handlePan.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.handlePinchZoom = _this.handlePinchZoom.bind(_this);\n    _this.handlePinchZoomEnd = _this.handlePinchZoomEnd.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleRightClick = _this.handleRightClick.bind(_this);\n    _this.handleDrag = _this.handleDrag.bind(_this);\n    _this.handleDragEnd = _this.handleDragEnd.bind(_this);\n    _this.shouldPan = _this.shouldPan.bind(_this);\n    _this.canPan = _this.canPan.bind(_this);\n    _this.setCursorClass = _this.setCursorClass.bind(_this);\n    _this.saveNode = _this.saveNode.bind(_this);\n    _this.mouseInside = false;\n    _this.mouseInteraction = true;\n    _this.state = {\n      panInProgress: false\n    };\n    return _this;\n  }\n\n  _createClass(EventCapture, [{\n    key: \"saveNode\",\n    value: function saveNode(node) {\n      this.node = node;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.focus = this.props.focus;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.node) {\n        select(this.node).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidMount();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.node) {\n        select(this.node).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null);\n      }\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter() {\n      var e = d3Event;\n      var onMouseEnter = this.props.onMouseEnter;\n      this.mouseInside = true;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, this.handleMouseMove);\n      }\n\n      onMouseEnter(e);\n    }\n  }, {\n    key: \"handleLeave\",\n    value: function handleLeave(e) {\n      var onMouseLeave = this.props.onMouseLeave;\n      this.mouseInside = false;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null);\n      }\n\n      onMouseLeave(e);\n    }\n  }, {\n    key: \"handleWheel\",\n    value: function handleWheel(e) {\n      var _props = this.props,\n          zoom = _props.zoom,\n          onZoom = _props.onZoom;\n      var panInProgress = this.state.panInProgress;\n      var yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0; // const xPan = Math.abs(e.deltaY) < Math.abs(e.deltaX) && Math.abs(e.deltaX) > 0;\n\n      var mouseXY = mousePosition(e);\n      e.preventDefault();\n\n      if (zoom && this.focus && yZoom && !panInProgress) {\n        var zoomDir = e.deltaY > 0 ? 1 : -1;\n        onZoom(zoomDir, mouseXY, e);\n      } else if (this.focus) {\n        if (this.shouldPan()) {\n          // console.log(\"Do pan now...\")\n          // pan already in progress\n          var _state$panStart = this.state.panStart,\n              panStartXScale = _state$panStart.panStartXScale,\n              chartsToPan = _state$panStart.chartsToPan;\n          this.lastNewPos = mouseXY;\n          this.panHappened = true;\n          this.dx += e.deltaX;\n          this.dy += e.deltaY;\n          var dxdy = {\n            dx: this.dx,\n            dy: this.dy\n          };\n          this.props.onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n        } else {\n          // console.log(\"Pan start...\")\n          // pan start\n          var _props2 = this.props,\n              xScale = _props2.xScale,\n              chartConfig = _props2.chartConfig;\n          var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n          this.dx = 0;\n          this.dy = 0;\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n        }\n\n        this.queuePanEnd();\n      }\n    }\n  }, {\n    key: \"queuePanEnd\",\n    value: function queuePanEnd() {\n      var _this2 = this;\n\n      if (isDefined(this.panEndTimeout)) {\n        clearTimeout(this.panEndTimeout);\n      }\n\n      this.panEndTimeout = setTimeout(function () {\n        _this2.handlePanEnd();\n      }, 100);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove() {\n      var e = d3Event;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          mouseMove = _props3.mouseMove;\n\n      if (this.mouseInteraction && mouseMove && !this.state.panInProgress) {\n        var newPos = mouse(this.node);\n        onMouseMove(newPos, \"mouse\", e);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      var _this3 = this;\n\n      var mouseXY = mousePosition(e);\n      var _props4 = this.props,\n          onClick = _props4.onClick,\n          onDoubleClick = _props4.onDoubleClick;\n\n      if (!this.panHappened && !this.dragHappened) {\n        if (this.clicked) {\n          onDoubleClick(mouseXY, e);\n          this.clicked = false;\n        } else {\n          onClick(mouseXY, e);\n          this.clicked = true;\n          setTimeout(function () {\n            if (_this3.clicked) {\n              _this3.clicked = false;\n            }\n          }, 400);\n        }\n      }\n    }\n  }, {\n    key: \"handleRightClick\",\n    value: function handleRightClick(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var _props5 = this.props,\n          onContextMenu = _props5.onContextMenu,\n          onPanEnd = _props5.onPanEnd;\n      var mouseXY = mousePosition(e, this.node.getBoundingClientRect());\n\n      if (isDefined(this.state.panStart)) {\n        var _state$panStart2 = this.state.panStart,\n            panStartXScale = _state$panStart2.panStartXScale,\n            panOrigin = _state$panStart2.panOrigin,\n            chartsToPan = _state$panStart2.chartsToPan;\n\n        if (this.panHappened) {\n          onPanEnd(mouseXY, panStartXScale, panOrigin, chartsToPan, e);\n        }\n\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n\n      onContextMenu(mouseXY, e);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag() {\n      var e = d3Event;\n\n      if (this.props.onDrag) {\n        this.dragHappened = true;\n        var mouseXY = mouse(this.node);\n        this.props.onDrag({\n          startPos: this.state.dragStartPosition,\n          mouseXY: mouseXY\n        }, e);\n      }\n    }\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      var win = d3Window(this.node);\n      select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      var e = d3Event;\n      var mouseXY = mouse(this.node);\n      var win = d3Window(this.node);\n      select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n\n      if (this.dragHappened) {\n        this.props.onDragComplete({\n          mouseXY: mouseXY\n        }, e);\n      }\n\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    }\n  }, {\n    key: \"canPan\",\n    value: function canPan() {\n      var getAllPanConditions = this.props.getAllPanConditions;\n      var initialPanEnabled = this.props.pan;\n\n      var _getAllPanConditions$ = getAllPanConditions().reduce(function (returnObj, a) {\n        return {\n          draggable: returnObj.draggable || a.draggable,\n          panEnabled: returnObj.panEnabled && a.panEnabled\n        };\n      }, {\n        draggable: false,\n        panEnabled: initialPanEnabled\n      }),\n          panEnabled = _getAllPanConditions$.panEnabled,\n          somethingSelected = _getAllPanConditions$.draggable;\n\n      return {\n        panEnabled: panEnabled,\n        somethingSelected: somethingSelected\n      };\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      if (e.button !== 0) {\n        return;\n      }\n\n      var _props6 = this.props,\n          xScale = _props6.xScale,\n          chartConfig = _props6.chartConfig,\n          onMouseDown = _props6.onMouseDown;\n      this.panHappened = false;\n      this.dragHappened = false;\n      this.focus = true;\n\n      if (!this.state.panInProgress && this.mouseInteraction) {\n        var mouseXY = mousePosition(e);\n        var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n        var _canPan = this.canPan(),\n            panEnabled = _canPan.panEnabled,\n            somethingSelected = _canPan.somethingSelected;\n\n        var pan = panEnabled && !somethingSelected;\n\n        if (pan) {\n          this.setState({\n            panInProgress: pan,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n          var win = d3Window(this.node);\n          select(win).on(MOUSEMOVE, this.handlePan).on(MOUSEUP, this.handlePanEnd);\n        } else if (somethingSelected) {\n          this.setState({\n            panInProgress: false,\n            dragInProgress: true,\n            panStart: null,\n            dragStartPosition: mouseXY\n          });\n          this.props.onDragStart({\n            startPos: mouseXY\n          }, e); // this.mouseInteraction = false;\n\n          var _win = d3Window(this.node);\n\n          select(_win).on(MOUSEMOVE, this.handleDrag).on(MOUSEUP, this.handleDragEnd);\n        }\n\n        onMouseDown(mouseXY, currentCharts, e);\n      }\n\n      e.preventDefault();\n    }\n  }, {\n    key: \"shouldPan\",\n    value: function shouldPan() {\n      var _props7 = this.props,\n          panEnabled = _props7.pan,\n          onPan = _props7.onPan;\n      return panEnabled && onPan && isDefined(this.state.panStart);\n    }\n  }, {\n    key: \"handlePan\",\n    value: function handlePan() {\n      var e = d3Event;\n\n      if (this.shouldPan()) {\n        this.panHappened = true;\n        var _state$panStart3 = this.state.panStart,\n            panStartXScale = _state$panStart3.panStartXScale,\n            panOrigin = _state$panStart3.panOrigin,\n            chartsToPan = _state$panStart3.chartsToPan;\n        var mouseXY = this.mouseInteraction ? mouse(this.node) : touches(this.node)[0];\n        this.lastNewPos = mouseXY;\n        var dx = mouseXY[0] - panOrigin[0];\n        var dy = mouseXY[1] - panOrigin[1];\n        this.dx = dx;\n        this.dy = dy;\n        this.props.onPan(mouseXY, panStartXScale, {\n          dx: dx,\n          dy: dy\n        }, chartsToPan, e);\n      }\n    }\n  }, {\n    key: \"handlePanEnd\",\n    value: function handlePanEnd() {\n      var e = d3Event;\n      var _props8 = this.props,\n          panEnabled = _props8.pan,\n          onPanEnd = _props8.onPanEnd;\n\n      if (isDefined(this.state.panStart)) {\n        var _state$panStart4 = this.state.panStart,\n            panStartXScale = _state$panStart4.panStartXScale,\n            chartsToPan = _state$panStart4.chartsToPan;\n        var win = d3Window(this.node);\n        select(win).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, null).on(TOUCHEND, null);\n\n        if (this.panHappened // && !this.contextMenuClicked\n        && panEnabled && onPanEnd) {\n          var dx = this.dx,\n              dy = this.dy; // console.log(dx, dy)\n\n          delete this.dx;\n          delete this.dy;\n          onPanEnd(this.lastNewPos, panStartXScale, {\n            dx: dx,\n            dy: dy\n          }, chartsToPan, e);\n        }\n\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(e) {\n      var onMouseMove = this.props.onMouseMove;\n      var touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n      onMouseMove(touchXY, \"touch\", e);\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(e) {\n      this.mouseInteraction = false;\n      var _props9 = this.props,\n          panEnabled = _props9.pan,\n          chartConfig = _props9.chartConfig,\n          onMouseMove = _props9.onMouseMove;\n      var _props10 = this.props,\n          xScale = _props10.xScale,\n          onPanEnd = _props10.onPanEnd;\n\n      if (e.touches.length === 1) {\n        this.panHappened = false;\n        var touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n        onMouseMove(touchXY, \"touch\", e);\n\n        if (panEnabled) {\n          var currentCharts = getCurrentCharts(chartConfig, touchXY);\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: touchXY,\n              chartsToPan: currentCharts\n            }\n          });\n          var win = d3Window(this.node);\n          select(win).on(TOUCHMOVE, this.handlePan, false).on(TOUCHEND, this.handlePanEnd, false);\n        }\n      } else if (e.touches.length === 2) {\n        // pinch zoom begin\n        // do nothing pinch zoom is handled in handleTouchMove\n        var _state = this.state,\n            panInProgress = _state.panInProgress,\n            panStart = _state.panStart;\n\n        if (panInProgress && panEnabled && onPanEnd) {\n          var panStartXScale = panStart.panStartXScale,\n              panOrigin = panStart.panOrigin,\n              chartsToPan = panStart.chartsToPan;\n\n          var _win2 = d3Window(this.node);\n\n          select(_win2).on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, this.handlePinchZoom, false).on(TOUCHEND, this.handlePinchZoomEnd, false);\n          var touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n          var touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n          if (this.panHappened // && !this.contextMenuClicked\n          && panEnabled && onPanEnd) {\n            onPanEnd(this.lastNewPos, panStartXScale, panOrigin, chartsToPan, e);\n          }\n\n          this.setState({\n            panInProgress: false,\n            pinchZoomStart: {\n              xScale: xScale,\n              touch1Pos: touch1Pos,\n              touch2Pos: touch2Pos,\n              range: xScale.range(),\n              chartsToPan: chartsToPan\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handlePinchZoom\",\n    value: function handlePinchZoom() {\n      var e = d3Event;\n\n      var _touches = touches(this.node),\n          _touches2 = _slicedToArray(_touches, 2),\n          touch1Pos = _touches2[0],\n          touch2Pos = _touches2[1];\n\n      var _props11 = this.props,\n          xScale = _props11.xScale,\n          zoomEnabled = _props11.zoom,\n          onPinchZoom = _props11.onPinchZoom; // eslint-disable-next-line no-unused-vars\n\n      var _state$pinchZoomStart = this.state.pinchZoomStart,\n          chartsToPan = _state$pinchZoomStart.chartsToPan,\n          initialPinch = _objectWithoutProperties(_state$pinchZoomStart, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoom) {\n        onPinchZoom(initialPinch, {\n          touch1Pos: touch1Pos,\n          touch2Pos: touch2Pos,\n          xScale: xScale\n        }, e);\n      }\n    }\n  }, {\n    key: \"handlePinchZoomEnd\",\n    value: function handlePinchZoomEnd() {\n      var e = d3Event;\n      var win = d3Window(this.node);\n      select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n      var _props12 = this.props,\n          zoomEnabled = _props12.zoom,\n          onPinchZoomEnd = _props12.onPinchZoomEnd; // eslint-disable-next-line no-unused-vars\n\n      var _state$pinchZoomStart2 = this.state.pinchZoomStart,\n          chartsToPan = _state$pinchZoomStart2.chartsToPan,\n          initialPinch = _objectWithoutProperties(_state$pinchZoomStart2, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoomEnd) {\n        onPinchZoomEnd(initialPinch, e);\n      }\n\n      this.setState({\n        pinchZoomStart: null\n      });\n    }\n  }, {\n    key: \"setCursorClass\",\n    value: function setCursorClass(cursorOverrideClass) {\n      if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n        this.setState({\n          cursorOverrideClass: cursorOverrideClass\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props13 = this.props,\n          height = _props13.height,\n          width = _props13.width,\n          disableInteraction = _props13.disableInteraction,\n          useCrossHairStyleCursor = _props13.useCrossHairStyleCursor;\n      var className = this.state.cursorOverrideClass != null ? this.state.cursorOverrideClass : !useCrossHairStyleCursor ? \"\" : this.state.panInProgress ? \"react-stockcharts-grabbing-cursor\" : \"react-stockcharts-crosshair-cursor\";\n      var interactionProps = disableInteraction || {\n        onWheel: this.handleWheel,\n        onMouseDown: this.handleMouseDown,\n        onClick: this.handleClick,\n        onContextMenu: this.handleRightClick,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove\n      };\n      return React.createElement(\"rect\", _extends({\n        ref: this.saveNode,\n        className: className,\n        width: width,\n        height: height,\n        style: {\n          opacity: 0\n        }\n      }, interactionProps));\n    }\n  }]);\n\n  return EventCapture;\n}(Component); // \t\t\t\tonMouseEnter={this.handleEnter}\n//\t\t\t\tonMouseLeave={this.handleLeave}\n\n\nEventCapture.propTypes = {\n  mouseMove: PropTypes.bool.isRequired,\n  zoom: PropTypes.bool.isRequired,\n  pan: PropTypes.bool.isRequired,\n  panSpeedMultiplier: PropTypes.number.isRequired,\n  focus: PropTypes.bool.isRequired,\n  useCrossHairStyleCursor: PropTypes.bool.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  chartConfig: PropTypes.array,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  disableInteraction: PropTypes.bool.isRequired,\n  getAllPanConditions: PropTypes.func.isRequired,\n  onMouseMove: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onZoom: PropTypes.func,\n  onPinchZoom: PropTypes.func,\n  onPinchZoomEnd: PropTypes.func.isRequired,\n  onPan: PropTypes.func,\n  onPanEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDragComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  children: PropTypes.node\n};\nEventCapture.defaultProps = {\n  mouseMove: false,\n  zoom: false,\n  pan: false,\n  panSpeedMultiplier: 1,\n  focus: false,\n  onDragComplete: noop,\n  disableInteraction: false\n};\nexport default EventCapture;","map":{"version":3,"sources":["../../../src/lib/EventCapture.js"],"names":["event","EventCapture","Component","panInProgress","node","select","win","d3Window","e","onMouseEnter","onMouseLeave","zoom","onZoom","yZoom","Math","mouseXY","mousePosition","zoomDir","panStartXScale","chartsToPan","dxdy","dx","dy","xScale","chartConfig","currentCharts","getCurrentCharts","panStart","panOrigin","isDefined","clearTimeout","onMouseMove","mouseMove","newPos","mouse","onClick","onDoubleClick","setTimeout","onContextMenu","onPanEnd","startPos","dragInProgress","getAllPanConditions","initialPanEnabled","panEnabled","somethingSelected","draggable","returnObj","a","onMouseDown","pan","dragStartPosition","onPan","touches","panHappened","touchXY","touchPosition","getTouchProps","touch1Pos","touch2Pos","pinchZoomStart","range","zoomEnabled","onPinchZoom","initialPinch","onPinchZoomEnd","cursorOverrideClass","height","width","disableInteraction","useCrossHairStyleCursor","className","interactionProps","onWheel","onTouchStart","onTouchMove","handleTouchMove","opacity","PropTypes","panSpeedMultiplier","focus","xAccessor","onDragStart","onDrag","onDragComplete","children"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA,KAAA,IAAA,SAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,MAAA,EAAiBA,KAAAA,IAAjB,OAAA,EAAA,KAAA,EAAA,OAAA,QAAA,cAAA;AAEA,SAAA,SAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,QAAA,SAAA;AAQA,SAAA,gBAAA,QAAA,uBAAA,C,CACA;;IAEMC,Y;;;AACL,WAAA,YAAA,CAAA,KAAA,EAAmB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAAA,QAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,CAAA,YAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,YAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAElB,IAAA,KAAA,CAAA,WAAA,GAAmB,KAAA,CAAA,WAAA,CAAA,IAAA,CAAnB,KAAmB,CAAnB;AACA,IAAA,KAAA,CAAA,WAAA,GAAmB,KAAA,CAAA,WAAA,CAAA,IAAA,CAAnB,KAAmB,CAAnB;AACA,IAAA,KAAA,CAAA,WAAA,GAAmB,KAAA,CAAA,WAAA,CAAA,IAAA,CAAnB,KAAmB,CAAnB;AACA,IAAA,KAAA,CAAA,eAAA,GAAuB,KAAA,CAAA,eAAA,CAAA,IAAA,CAAvB,KAAuB,CAAvB;AACA,IAAA,KAAA,CAAA,eAAA,GAAuB,KAAA,CAAA,eAAA,CAAA,IAAA,CAAvB,KAAuB,CAAvB;AACA,IAAA,KAAA,CAAA,YAAA,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,CAApB;AACA,IAAA,KAAA,CAAA,SAAA,GAAiB,KAAA,CAAA,SAAA,CAAA,IAAA,CAAjB,KAAiB,CAAjB;AACA,IAAA,KAAA,CAAA,gBAAA,GAAwB,KAAA,CAAA,gBAAA,CAAA,IAAA,CAAxB,KAAwB,CAAxB;AACA,IAAA,KAAA,CAAA,eAAA,GAAuB,KAAA,CAAA,eAAA,CAAA,IAAA,CAAvB,KAAuB,CAAvB;AACA,IAAA,KAAA,CAAA,eAAA,GAAuB,KAAA,CAAA,eAAA,CAAA,IAAA,CAAvB,KAAuB,CAAvB;AACA,IAAA,KAAA,CAAA,kBAAA,GAA0B,KAAA,CAAA,kBAAA,CAAA,IAAA,CAA1B,KAA0B,CAA1B;AAEA,IAAA,KAAA,CAAA,WAAA,GAAmB,KAAA,CAAA,WAAA,CAAA,IAAA,CAAnB,KAAmB,CAAnB;AAEA,IAAA,KAAA,CAAA,gBAAA,GAAwB,KAAA,CAAA,gBAAA,CAAA,IAAA,CAAxB,KAAwB,CAAxB;AACA,IAAA,KAAA,CAAA,UAAA,GAAkB,KAAA,CAAA,UAAA,CAAA,IAAA,CAAlB,KAAkB,CAAlB;AACA,IAAA,KAAA,CAAA,aAAA,GAAqB,KAAA,CAAA,aAAA,CAAA,IAAA,CAArB,KAAqB,CAArB;AAEA,IAAA,KAAA,CAAA,SAAA,GAAiB,KAAA,CAAA,SAAA,CAAA,IAAA,CAAjB,KAAiB,CAAjB;AACA,IAAA,KAAA,CAAA,MAAA,GAAc,KAAA,CAAA,MAAA,CAAA,IAAA,CAAd,KAAc,CAAd;AAEA,IAAA,KAAA,CAAA,cAAA,GAAsB,KAAA,CAAA,cAAA,CAAA,IAAA,CAAtB,KAAsB,CAAtB;AACA,IAAA,KAAA,CAAA,QAAA,GAAgB,KAAA,CAAA,QAAA,CAAA,IAAA,CAAhB,KAAgB,CAAhB;AAEA,IAAA,KAAA,CAAA,WAAA,GAAA,KAAA;AAEA,IAAA,KAAA,CAAA,gBAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACZE,MAAAA,aAAAA,EAAe;AADH,KAAb;AA7BkB,WAAA,KAAA;AAgClB;;;;6BACQC,I,EAAM;AACd,WAAA,IAAA,GAAA,IAAA;AACA;;;yCACoB;AACpB,WAAA,KAAA,GAAa,KAAA,KAAA,CAAb,KAAA;AACA;;;wCACmB;AACnB,UAAI,KAAJ,IAAA,EAAe;AACdC,QAAAA,MAAAA,CAAO,KAAPA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EACiB,KADjBA,WAAAA,EAAAA,EAAAA,CAAAA,UAAAA,EAEiB,KAFjBA,WAAAA;AAGA;AACD;;;yCACoB;AACpB,WAAA,iBAAA;AACA;;;2CACsB;AACtB,UAAI,KAAJ,IAAA,EAAe;AACdA,QAAAA,MAAAA,CAAO,KAAPA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,UAAAA,EAAAA,IAAAA;AAGA,YAAMC,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,IAAAA;AAEA;AACD;;;kCACa;AACb,UAAMG,CAAAA,GAAN,OAAA;AADa,UAGLC,YAHK,GAGY,KAHZ,KAGY,CAHZ,YAAA;AAIb,WAAA,WAAA,GAAA,IAAA;;AACA,UAAI,CAAC,KAAA,KAAA,CAAD,aAAA,IACC,CAAC,KAAA,KAAA,CADN,cAAA,EACiC;AAChC,YAAMH,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KADhBA,eAAAA;AAEA;;AACDI,MAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AACA;;;gCACWD,C,EAAG;AAAA,UACNE,YADM,GACW,KADX,KACW,CADX,YAAA;AAEd,WAAA,WAAA,GAAA,KAAA;;AACA,UAAI,CAAC,KAAA,KAAA,CAAD,aAAA,IACC,CAAC,KAAA,KAAA,CADN,cAAA,EACiC;AAChC,YAAMJ,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,IAAAA;AAEA;;AACDK,MAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AACA;;;gCACWF,C,EAAG;AAAA,UAAA,MAAA,GACW,KADX,KAAA;AAAA,UACNG,IADM,GAAA,MAAA,CAAA,IAAA;AAAA,UACAC,MADA,GAAA,MAAA,CAAA,MAAA;AAAA,UAENT,aAFM,GAEY,KAFZ,KAEY,CAFZ,aAAA;AAId,UAAMU,KAAAA,GAAQC,IAAAA,CAAAA,GAAAA,CAASN,CAAAA,CAATM,MAAAA,IAAqBA,IAAAA,CAAAA,GAAAA,CAASN,CAAAA,CAA9BM,MAAqBA,CAArBA,IAA2CA,IAAAA,CAAAA,GAAAA,CAASN,CAAAA,CAATM,MAAAA,IAAzD,CAAA,CAJc,CAKd;;AACA,UAAMC,OAAAA,GAAUC,aAAAA,CAAhB,CAAgBA,CAAhB;AACAR,MAAAA,CAAAA,CAAAA,cAAAA;;AAEA,UAAIG,IAAAA,IAAQ,KAARA,KAAAA,IAAAA,KAAAA,IAA+B,CAAnC,aAAA,EAAmD;AAClD,YAAMM,OAAAA,GAAUT,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAmB,CAAnC,CAAA;AAEAI,QAAAA,MAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAHD,OAAA,MAIO,IAAI,KAAJ,KAAA,EAAgB;AACtB,YAAI,KAAJ,SAAI,EAAJ,EAAsB;AACrB;AACA;AAFqB,cAAA,eAAA,GAMjB,KAAA,KAAA,CANiB,QAAA;AAAA,cAIpBM,cAJoB,GAAA,eAAA,CAAA,cAAA;AAAA,cAKpBC,WALoB,GAAA,eAAA,CAAA,WAAA;AAOrB,eAAA,UAAA,GAAA,OAAA;AACA,eAAA,WAAA,GAAA,IAAA;AAEA,eAAA,EAAA,IAAWX,CAAAA,CAAX,MAAA;AACA,eAAA,EAAA,IAAWA,CAAAA,CAAX,MAAA;AACA,cAAMY,IAAAA,GAAO;AAAEC,YAAAA,EAAAA,EAAI,KAAN,EAAA;AAAeC,YAAAA,EAAAA,EAAI,KAAhC;AAAa,WAAb;AAEA,eAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,cAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA;AAdD,SAAA,MAeO;AACN;AACA;AAFM,cAAA,OAAA,GAI0B,KAJ1B,KAAA;AAAA,cAIEC,MAJF,GAAA,OAAA,CAAA,MAAA;AAAA,cAIUC,WAJV,GAAA,OAAA,CAAA,WAAA;AAKN,cAAMC,aAAAA,GAAgBC,gBAAAA,CAAAA,WAAAA,EAAtB,OAAsBA,CAAtB;AAEA,eAAA,EAAA,GAAA,CAAA;AACA,eAAA,EAAA,GAAA,CAAA;AACA,eAAA,QAAA,CAAc;AACbvB,YAAAA,aAAAA,EADa,IAAA;AAEbwB,YAAAA,QAAAA,EAAU;AACTT,cAAAA,cAAAA,EADS,MAAA;AAETU,cAAAA,SAAAA,EAFS,OAAA;AAGTT,cAAAA,WAAAA,EAAaM;AAHJ;AAFG,WAAd;AAQA;;AACD,aAAA,WAAA;AACA;AACD;;;kCACa;AAAA,UAAA,MAAA,GAAA,IAAA;;AACb,UAAII,SAAAA,CAAU,KAAd,aAAIA,CAAJ,EAAmC;AAClCC,QAAAA,YAAAA,CAAa,KAAbA,aAAAA,CAAAA;AACA;;AACD,WAAA,aAAA,GAAqB,UAAA,CAAW,YAAM;AACrC,QAAA,MAAA,CAAA,YAAA;AADoB,OAAA,EAArB,GAAqB,CAArB;AAGA;;;sCACiB;AACjB,UAAMtB,CAAAA,GAAN,OAAA;AADiB,UAAA,OAAA,GAGkB,KAHlB,KAAA;AAAA,UAGTuB,WAHS,GAAA,OAAA,CAAA,WAAA;AAAA,UAGIC,SAHJ,GAAA,OAAA,CAAA,SAAA;;AAKjB,UAAI,KAAA,gBAAA,IAAA,SAAA,IAEC,CAAC,KAAA,KAAA,CAFN,aAAA,EAEgC;AAE/B,YAAMC,MAAAA,GAASC,KAAAA,CAAM,KAArB,IAAeA,CAAf;AAEAH,QAAAA,WAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AACA;AACD;;;gCACWvB,C,EAAG;AAAA,UAAA,MAAA,GAAA,IAAA;;AACd,UAAMO,OAAAA,GAAUC,aAAAA,CAAhB,CAAgBA,CAAhB;AADc,UAAA,OAAA,GAEqB,KAFrB,KAAA;AAAA,UAENmB,OAFM,GAAA,OAAA,CAAA,OAAA;AAAA,UAEGC,aAFH,GAAA,OAAA,CAAA,aAAA;;AAId,UAAI,CAAC,KAAD,WAAA,IAAqB,CAAC,KAA1B,YAAA,EAA6C;AAC5C,YAAI,KAAJ,OAAA,EAAkB;AACjBA,UAAAA,aAAAA,CAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AACA,eAAA,OAAA,GAAA,KAAA;AAFD,SAAA,MAGO;AACND,UAAAA,OAAAA,CAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AACA,eAAA,OAAA,GAAA,IAAA;AACAE,UAAAA,UAAAA,CAAW,YAAM;AAChB,gBAAI,MAAA,CAAJ,OAAA,EAAkB;AACjB,cAAA,MAAA,CAAA,OAAA,GAAA,KAAA;AACA;AAHFA,WAAAA,EAAAA,GAAAA,CAAAA;AAKA;AACD;AACD;;;qCACgB7B,C,EAAG;AACnBA,MAAAA,CAAAA,CAAAA,eAAAA;AACAA,MAAAA,CAAAA,CAAAA,cAAAA;AAFmB,UAAA,OAAA,GAGiB,KAHjB,KAAA;AAAA,UAGX8B,aAHW,GAAA,OAAA,CAAA,aAAA;AAAA,UAGIC,QAHJ,GAAA,OAAA,CAAA,QAAA;AAKnB,UAAMxB,OAAAA,GAAUC,aAAAA,CAAAA,CAAAA,EAAiB,KAAA,IAAA,CAAjC,qBAAiC,EAAjBA,CAAhB;;AAEA,UAAIa,SAAAA,CAAU,KAAA,KAAA,CAAd,QAAIA,CAAJ,EAAoC;AAAA,YAAA,gBAAA,GACgB,KAAA,KAAA,CADhB,QAAA;AAAA,YAC3BX,cAD2B,GAAA,gBAAA,CAAA,cAAA;AAAA,YACXU,SADW,GAAA,gBAAA,CAAA,SAAA;AAAA,YACAT,WADA,GAAA,gBAAA,CAAA,WAAA;;AAEnC,YAAI,KAAJ,WAAA,EAAsB;AACrBoB,UAAAA,QAAAA,CAAAA,OAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,WAAAA,EAAAA,CAAAA,CAAAA;AACA;;AACD,YAAMjC,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,IAAAA;AAIA,aAAA,QAAA,CAAc;AACbF,UAAAA,aAAAA,EADa,KAAA;AAEbwB,UAAAA,QAAAA,EAAU;AAFG,SAAd;AAIA;;AAEDW,MAAAA,aAAAA,CAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AACA;;;iCAEY;AACZ,UAAM9B,CAAAA,GAAN,OAAA;;AACA,UAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACtB,aAAA,YAAA,GAAA,IAAA;AACA,YAAMO,OAAAA,GAAUmB,KAAAA,CAAM,KAAtB,IAAgBA,CAAhB;AACA,aAAA,KAAA,CAAA,MAAA,CAAkB;AACjBM,UAAAA,QAAAA,EAAU,KAAA,KAAA,CADO,iBAAA;AAEjBzB,UAAAA,OAAAA,EAAAA;AAFiB,SAAlB,EAAA,CAAA;AAIA;AACD;;;iCACY;AACZ,UAAMT,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,MAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KAAA,WAAA,GAAmB,KAAnB,eAAA,GADhBA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,IAAAA;AAIA,WAAA,QAAA,CAAc;AACboC,QAAAA,cAAAA,EAAgB;AADH,OAAd;AAGA,WAAA,gBAAA,GAAA,IAAA;AACA;;;oCACe;AACf,UAAMjC,CAAAA,GAAN,OAAA;AACA,UAAMO,OAAAA,GAAUmB,KAAAA,CAAM,KAAtB,IAAgBA,CAAhB;AAEA,UAAM5B,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,MAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KAAA,WAAA,GAAmB,KAAnB,eAAA,GADhBA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,IAAAA;;AAIA,UAAI,KAAJ,YAAA,EAAuB;AACtB,aAAA,KAAA,CAAA,cAAA,CAA0B;AACzBU,UAAAA,OAAAA,EAAAA;AADyB,SAA1B,EAAA,CAAA;AAGA;;AAED,WAAA,QAAA,CAAc;AACb0B,QAAAA,cAAAA,EAAgB;AADH,OAAd;AAGA,WAAA,gBAAA,GAAA,IAAA;AACA;;;6BACQ;AAAA,UACAC,mBADA,GACwB,KADxB,KACwB,CADxB,mBAAA;AAAA,UAEKC,iBAFL,GAE2B,KAF3B,KAE2B,CAF3B,GAAA;;AAAA,UAAA,qBAAA,GAOJ,mBAAA,GAAA,MAAA,CACK,UAAA,SAAA,EAAA,CAAA,EAAkB;AACzB,eAAO;AACNG,UAAAA,SAAAA,EAAWC,SAAAA,CAAAA,SAAAA,IAAuBC,CAAAA,CAD5B,SAAA;AAENJ,UAAAA,UAAAA,EAAYG,SAAAA,CAAAA,UAAAA,IAAwBC,CAAAA,CAAEJ;AAFhC,SAAP;AAFE,OAAA,EAMA;AACFE,QAAAA,SAAAA,EADE,KAAA;AAEFF,QAAAA,UAAAA,EAAYD;AAFV,OANA,CAPI;AAAA,UAKPC,UALO,GAAA,qBAAA,CAAA,UAAA;AAAA,UAMIC,iBANJ,GAAA,qBAAA,CAAA,SAAA;;AAkBR,aAAO;AACND,QAAAA,UAAAA,EADM,UAAA;AAENC,QAAAA,iBAAAA,EAAAA;AAFM,OAAP;AAIA;;;oCACerC,C,EAAG;AAClB,UAAIA,CAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAoB;AACnB;AACA;;AAHiB,UAAA,OAAA,GAI2B,KAJ3B,KAAA;AAAA,UAIVe,MAJU,GAAA,OAAA,CAAA,MAAA;AAAA,UAIFC,WAJE,GAAA,OAAA,CAAA,WAAA;AAAA,UAIWyB,WAJX,GAAA,OAAA,CAAA,WAAA;AAMlB,WAAA,WAAA,GAAA,KAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,WAAA,KAAA,GAAA,IAAA;;AAEA,UAAI,CAAC,KAAA,KAAA,CAAD,aAAA,IACA,KADJ,gBAAA,EAEE;AAED,YAAMlC,OAAAA,GAAUC,aAAAA,CAAhB,CAAgBA,CAAhB;AACA,YAAMS,aAAAA,GAAgBC,gBAAAA,CAAAA,WAAAA,EAAtB,OAAsBA,CAAtB;;AAHC,YAAA,OAAA,GAMG,KANH,MAMG,EANH;AAAA,YAKAkB,UALA,GAAA,OAAA,CAAA,UAAA;AAAA,YAKYC,iBALZ,GAAA,OAAA,CAAA,iBAAA;;AAOD,YAAMK,GAAAA,GAAMN,UAAAA,IAAc,CAA1B,iBAAA;;AAEA,YAAA,GAAA,EAAS;AACR,eAAA,QAAA,CAAc;AACbzC,YAAAA,aAAAA,EADa,GAAA;AAEbwB,YAAAA,QAAAA,EAAU;AACTT,cAAAA,cAAAA,EADS,MAAA;AAETU,cAAAA,SAAAA,EAFS,OAAA;AAGTT,cAAAA,WAAAA,EAAaM;AAHJ;AAFG,WAAd;AASA,cAAMnB,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,UAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KADhBA,SAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAEc,KAFdA,YAAAA;AAXD,SAAA,MAeO,IAAA,iBAAA,EAAuB;AAC7B,eAAA,QAAA,CAAc;AACbF,YAAAA,aAAAA,EADa,KAAA;AAEbsC,YAAAA,cAAAA,EAFa,IAAA;AAGbd,YAAAA,QAAAA,EAHa,IAAA;AAIbwB,YAAAA,iBAAAA,EAAmBpC;AAJN,WAAd;AAMA,eAAA,KAAA,CAAA,WAAA,CAAuB;AAAEyB,YAAAA,QAAAA,EAAzB;AAAuB,WAAvB,EAAA,CAAA,EAP6B,CAQ7B;;AAEA,cAAMlC,IAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;;AACAF,UAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KADhBA,UAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAEc,KAFdA,aAAAA;AAGA;;AAED4C,QAAAA,WAAAA,CAAAA,OAAAA,EAAAA,aAAAA,EAAAA,CAAAA,CAAAA;AACA;;AACDzC,MAAAA,CAAAA,CAAAA,cAAAA;AACA;;;gCACW;AAAA,UAAA,OAAA,GACwB,KADxB,KAAA;AAAA,UACEoC,UADF,GAAA,OAAA,CAAA,GAAA;AAAA,UACcQ,KADd,GAAA,OAAA,CAAA,KAAA;AAEX,aAAOR,UAAAA,IAAAA,KAAAA,IAEHf,SAAAA,CAAU,KAAA,KAAA,CAFd,QAEIA,CAFJ;AAGA;;;gCACW;AACX,UAAMrB,CAAAA,GAAN,OAAA;;AAEA,UAAI,KAAJ,SAAI,EAAJ,EAAsB;AACrB,aAAA,WAAA,GAAA,IAAA;AADqB,YAAA,gBAAA,GAG8B,KAAA,KAAA,CAH9B,QAAA;AAAA,YAGbU,cAHa,GAAA,gBAAA,CAAA,cAAA;AAAA,YAGGU,SAHH,GAAA,gBAAA,CAAA,SAAA;AAAA,YAGcT,WAHd,GAAA,gBAAA,CAAA,WAAA;AAKrB,YAAMJ,OAAAA,GAAU,KAAA,gBAAA,GACbmB,KAAAA,CAAM,KADO,IACbA,CADa,GAEbmB,OAAAA,CAAQ,KAARA,IAAAA,CAAAA,CAFH,CAEGA,CAFH;AAIA,aAAA,UAAA,GAAA,OAAA;AACA,YAAMhC,EAAAA,GAAKN,OAAAA,CAAAA,CAAAA,CAAAA,GAAaa,SAAAA,CAAxB,CAAwBA,CAAxB;AACA,YAAMN,EAAAA,GAAKP,OAAAA,CAAAA,CAAAA,CAAAA,GAAaa,SAAAA,CAAxB,CAAwBA,CAAxB;AAEA,aAAA,EAAA,GAAA,EAAA;AACA,aAAA,EAAA,GAAA,EAAA;AAEA,aAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,cAAA,EAC0B;AAAEP,UAAAA,EAAAA,EAAF,EAAA;AAAMC,UAAAA,EAAAA,EADhC;AAC0B,SAD1B,EAAA,WAAA,EAAA,CAAA;AAGA;AACD;;;mCACc;AACd,UAAMd,CAAAA,GAAN,OAAA;AADc,UAAA,OAAA,GAEwB,KAFxB,KAAA;AAAA,UAEDoC,UAFC,GAAA,OAAA,CAAA,GAAA;AAAA,UAEWL,QAFX,GAAA,OAAA,CAAA,QAAA;;AAId,UAAIV,SAAAA,CAAU,KAAA,KAAA,CAAd,QAAIA,CAAJ,EAAoC;AAAA,YAAA,gBAAA,GACK,KAAA,KAAA,CADL,QAAA;AAAA,YAC3BX,cAD2B,GAAA,gBAAA,CAAA,cAAA;AAAA,YACXC,WADW,GAAA,gBAAA,CAAA,WAAA;AAGnC,YAAMb,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KAAA,WAAA,GAAmB,KAAnB,eAAA,GADhBA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,SAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,QAAAA,EAAAA,IAAAA;;AAMA,YAAI,KAAKiD,WAAL,CACF;AADE,WAAA,UAAA,IAAJ,QAAA,EAGe;AAAA,cACNjC,EADM,GAAA,KAAA,EAAA;AAAA,cACFC,EADE,GAAA,KAAA,EAAA,CAAA,CAGd;;AACA,iBAAO,KAAP,EAAA;AACA,iBAAO,KAAP,EAAA;AACAiB,UAAAA,QAAAA,CAAS,KAATA,UAAAA,EAAAA,cAAAA,EAA0C;AAAElB,YAAAA,EAAAA,EAAF,EAAA;AAAMC,YAAAA,EAAAA,EAAhDiB;AAA0C,WAA1CA,EAAAA,WAAAA,EAAAA,CAAAA,CAAAA;AACA;;AAED,aAAA,QAAA,CAAc;AACbpC,UAAAA,aAAAA,EADa,KAAA;AAEbwB,UAAAA,QAAAA,EAAU;AAFG,SAAd;AAIA;AACD;;;oCACenB,C,EAAG;AAAA,UACVuB,WADU,GACM,KADN,KACM,CADN,WAAA;AAElB,UAAMwB,OAAAA,GAAUC,aAAAA,CAAcC,aAAAA,CAAcjD,CAAAA,CAAAA,OAAAA,CAA5BgD,CAA4BhD,CAAdiD,CAAdD,EAAhB,CAAgBA,CAAhB;AACAzB,MAAAA,WAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AACA;;;qCACgBvB,C,EAAG;AACnB,WAAA,gBAAA,GAAA,KAAA;AADmB,UAAA,OAAA,GAGmC,KAHnC,KAAA;AAAA,UAGNoC,UAHM,GAAA,OAAA,CAAA,GAAA;AAAA,UAGMpB,WAHN,GAAA,OAAA,CAAA,WAAA;AAAA,UAGmBO,WAHnB,GAAA,OAAA,CAAA,WAAA;AAAA,UAAA,QAAA,GAIU,KAJV,KAAA;AAAA,UAIXR,MAJW,GAAA,QAAA,CAAA,MAAA;AAAA,UAIHgB,QAJG,GAAA,QAAA,CAAA,QAAA;;AAMnB,UAAI/B,CAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AAE3B,aAAA,WAAA,GAAA,KAAA;AACA,YAAM+C,OAAAA,GAAUC,aAAAA,CAAcC,aAAAA,CAAcjD,CAAAA,CAAAA,OAAAA,CAA5BgD,CAA4BhD,CAAdiD,CAAdD,EAAhB,CAAgBA,CAAhB;AACAzB,QAAAA,WAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;;AAEA,YAAA,UAAA,EAAgB;AACf,cAAMN,aAAAA,GAAgBC,gBAAAA,CAAAA,WAAAA,EAAtB,OAAsBA,CAAtB;AAEA,eAAA,QAAA,CAAc;AACbvB,YAAAA,aAAAA,EADa,IAAA;AAEbwB,YAAAA,QAAAA,EAAU;AACTT,cAAAA,cAAAA,EADS,MAAA;AAETU,cAAAA,SAAAA,EAFS,OAAA;AAGTT,cAAAA,WAAAA,EAAaM;AAHJ;AAFG,WAAd;AASA,cAAMnB,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,UAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KADhBA,SAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,QAAAA,EAEe,KAFfA,YAAAA,EAAAA,KAAAA;AAIA;AAvBF,OAAA,MAwBO,IAAIG,CAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AAClC;AACA;AAFkC,YAAA,MAAA,GAGE,KAHF,KAAA;AAAA,YAG1BL,aAH0B,GAAA,MAAA,CAAA,aAAA;AAAA,YAGXwB,QAHW,GAAA,MAAA,CAAA,QAAA;;AAKlC,YAAIxB,aAAAA,IAAAA,UAAAA,IAAJ,QAAA,EAA6C;AAAA,cACpCe,cADoC,GACOS,QADP,CAAA,cAAA;AAAA,cACpBC,SADoB,GACOD,QADP,CAAA,SAAA;AAAA,cACTR,WADS,GACOQ,QADP,CAAA,WAAA;;AAG5C,cAAMrB,KAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;;AACAF,UAAAA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EACgB,KAAA,WAAA,GAAmB,KAAnB,eAAA,GADhBA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,SAAAA,EAGgB,KAHhBA,eAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,QAAAA,EAIe,KAJfA,kBAAAA,EAAAA,KAAAA;AAMA,cAAMqD,SAAAA,GAAYF,aAAAA,CAAcC,aAAAA,CAAcjD,CAAAA,CAAAA,OAAAA,CAA5BgD,CAA4BhD,CAAdiD,CAAdD,EAAlB,CAAkBA,CAAlB;AACA,cAAMG,SAAAA,GAAYH,aAAAA,CAAcC,aAAAA,CAAcjD,CAAAA,CAAAA,OAAAA,CAA5BgD,CAA4BhD,CAAdiD,CAAdD,EAAlB,CAAkBA,CAAlB;;AAEA,cAAI,KAAKF,WAAL,CACF;AADE,aAAA,UAAA,IAAJ,QAAA,EAGe;AAEdf,YAAAA,QAAAA,CAAS,KAATA,UAAAA,EAAAA,cAAAA,EAAAA,SAAAA,EAAAA,WAAAA,EAAAA,CAAAA,CAAAA;AACA;;AAED,eAAA,QAAA,CAAc;AACbpC,YAAAA,aAAAA,EADa,KAAA;AAEbyD,YAAAA,cAAAA,EAAgB;AACfrC,cAAAA,MAAAA,EADe,MAAA;AAEfmC,cAAAA,SAAAA,EAFe,SAAA;AAGfC,cAAAA,SAAAA,EAHe,SAAA;AAIfE,cAAAA,KAAAA,EAAOtC,MAAAA,CAJQ,KAIRA,EAJQ;AAKfJ,cAAAA,WAAAA,EAAAA;AALe;AAFH,WAAd;AAUA;AACD;AACD;;;sCACiB;AACjB,UAAMX,CAAAA,GAAN,OAAA;;AADiB,UAAA,QAAA,GAEc6C,OAAAA,CAAQ,KAFtB,IAEcA,CAFd;AAAA,UAAA,SAAA,GAAA,cAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,UAEVK,SAFU,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,UAECC,SAFD,GAAA,SAAA,CAAA,CAAA,CAAA;;AAAA,UAAA,QAAA,GAGkC,KAHlC,KAAA;AAAA,UAGTpC,MAHS,GAAA,QAAA,CAAA,MAAA;AAAA,UAGKuC,WAHL,GAAA,QAAA,CAAA,IAAA;AAAA,UAGkBC,WAHlB,GAAA,QAAA,CAAA,WAAA,CAAA,CAKjB;;AALiB,UAAA,qBAAA,GAMwB,KAAA,KAAA,CANxB,cAAA;AAAA,UAMT5C,WANS,GAAA,qBAAA,CAAA,WAAA;AAAA,UAMO6C,YANP,GAAA,wBAAA,CAAA,qBAAA,EAAA,CAAA,aAAA,CAAA,CAAA;;AAQjB,UAAIF,WAAAA,IAAJ,WAAA,EAAgC;AAC/BC,QAAAA,WAAAA,CAAAA,YAAAA,EAA0B;AACzBL,UAAAA,SAAAA,EADyB,SAAA;AAEzBC,UAAAA,SAAAA,EAFyB,SAAA;AAGzBpC,UAAAA,MAAAA,EAAAA;AAHyB,SAA1BwC,EAAAA,CAAAA,CAAAA;AAKA;AACD;;;yCACoB;AACpB,UAAMvD,CAAAA,GAAN,OAAA;AAEA,UAAMF,GAAAA,GAAMC,QAAAA,CAAS,KAArB,IAAYA,CAAZ;AACAF,MAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,QAAAA,EAAAA,IAAAA;AAJoB,UAAA,QAAA,GAQ0B,KAR1B,KAAA;AAAA,UAQNyD,WARM,GAAA,QAAA,CAAA,IAAA;AAAA,UAQOG,cARP,GAAA,QAAA,CAAA,cAAA,CAAA,CAUpB;;AAVoB,UAAA,sBAAA,GAWqB,KAAA,KAAA,CAXrB,cAAA;AAAA,UAWZ9C,WAXY,GAAA,sBAAA,CAAA,WAAA;AAAA,UAWI6C,YAXJ,GAAA,wBAAA,CAAA,sBAAA,EAAA,CAAA,aAAA,CAAA,CAAA;;AAapB,UAAIF,WAAAA,IAAJ,cAAA,EAAmC;AAClCG,QAAAA,cAAAA,CAAAA,YAAAA,EAAAA,CAAAA,CAAAA;AACA;;AAED,WAAA,QAAA,CAAc;AACbL,QAAAA,cAAAA,EAAgB;AADH,OAAd;AAGA;;;mCACcM,mB,EAAqB;AACnC,UAAIA,mBAAAA,KAAwB,KAAA,KAAA,CAA5B,mBAAA,EAA4D;AAC3D,aAAA,QAAA,CAAc;AACbA,UAAAA,mBAAAA,EAAAA;AADa,SAAd;AAGA;AACD;;;6BACQ;AAAA,UAAA,QAAA,GAC+D,KAD/D,KAAA;AAAA,UACAC,MADA,GAAA,QAAA,CAAA,MAAA;AAAA,UACQC,KADR,GAAA,QAAA,CAAA,KAAA;AAAA,UACeC,kBADf,GAAA,QAAA,CAAA,kBAAA;AAAA,UACmCC,uBADnC,GAAA,QAAA,CAAA,uBAAA;AAER,UAAMC,SAAAA,GAAY,KAAA,KAAA,CAAA,mBAAA,IAAA,IAAA,GACf,KAAA,KAAA,CADe,mBAAA,GAEf,CAAA,uBAAA,GAAA,EAAA,GAAgC,KAAA,KAAA,CAAA,aAAA,GAAA,mCAAA,GAFnC,oCAAA;AAMA,UAAMC,gBAAAA,GAAmBH,kBAAAA,IAAsB;AAC9CI,QAAAA,OAAAA,EAAS,KADqC,WAAA;AAE9CxB,QAAAA,WAAAA,EAAa,KAFiC,eAAA;AAG9Cd,QAAAA,OAAAA,EAAS,KAHqC,WAAA;AAI9CG,QAAAA,aAAAA,EAAe,KAJ+B,gBAAA;AAK9CoC,QAAAA,YAAAA,EAAc,KALgC,gBAAA;AAM9CC,QAAAA,WAAAA,EAAa,KAAKC;AAN4B,OAA/C;AASA,aACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAM,QAAA,GAAA,EAAK,KAAX,QAAA;AACC,QAAA,SAAA,EADD,SAAA;AAEC,QAAA,KAAA,EAFD,KAAA;AAGC,QAAA,MAAA,EAHD,MAAA;AAIC,QAAA,KAAA,EAAO;AAAEC,UAAAA,OAAAA,EAAF;AAAA;AAJR,OAAA,EADD,gBACC,CAAA,CADD;AASA;;;;EAhhByB3E,S,GAmhB3B;AACA;;;AAGAD,YAAAA,CAAAA,SAAAA,GAAyB;AACxB+B,EAAAA,SAAAA,EAAW8C,SAAAA,CAAAA,IAAAA,CADa,UAAA;AAExBnE,EAAAA,IAAAA,EAAMmE,SAAAA,CAAAA,IAAAA,CAFkB,UAAA;AAGxB5B,EAAAA,GAAAA,EAAK4B,SAAAA,CAAAA,IAAAA,CAHmB,UAAA;AAIxBC,EAAAA,kBAAAA,EAAoBD,SAAAA,CAAAA,MAAAA,CAJI,UAAA;AAKxBE,EAAAA,KAAAA,EAAOF,SAAAA,CAAAA,IAAAA,CALiB,UAAA;AAMxBR,EAAAA,uBAAAA,EAAyBQ,SAAAA,CAAAA,IAAAA,CAND,UAAA;AAQxBV,EAAAA,KAAAA,EAAOU,SAAAA,CAAAA,MAAAA,CARiB,UAAA;AASxBX,EAAAA,MAAAA,EAAQW,SAAAA,CAAAA,MAAAA,CATgB,UAAA;AAUxBtD,EAAAA,WAAAA,EAAasD,SAAAA,CAVW,KAAA;AAWxBvD,EAAAA,MAAAA,EAAQuD,SAAAA,CAAAA,IAAAA,CAXgB,UAAA;AAYxBG,EAAAA,SAAAA,EAAWH,SAAAA,CAAAA,IAAAA,CAZa,UAAA;AAaxBT,EAAAA,kBAAAA,EAAoBS,SAAAA,CAAAA,IAAAA,CAbI,UAAA;AAexBpC,EAAAA,mBAAAA,EAAqBoC,SAAAA,CAAAA,IAAAA,CAfG,UAAA;AAiBxB/C,EAAAA,WAAAA,EAAa+C,SAAAA,CAjBW,IAAA;AAkBxBrE,EAAAA,YAAAA,EAAcqE,SAAAA,CAlBU,IAAA;AAmBxBpE,EAAAA,YAAAA,EAAcoE,SAAAA,CAnBU,IAAA;AAoBxBlE,EAAAA,MAAAA,EAAQkE,SAAAA,CApBgB,IAAA;AAqBxBf,EAAAA,WAAAA,EAAae,SAAAA,CArBW,IAAA;AAsBxBb,EAAAA,cAAAA,EAAgBa,SAAAA,CAAAA,IAAAA,CAtBQ,UAAA;AAuBxB1B,EAAAA,KAAAA,EAAO0B,SAAAA,CAvBiB,IAAA;AAwBxBvC,EAAAA,QAAAA,EAAUuC,SAAAA,CAxBc,IAAA;AAyBxBI,EAAAA,WAAAA,EAAaJ,SAAAA,CAzBW,IAAA;AA0BxBK,EAAAA,MAAAA,EAAQL,SAAAA,CA1BgB,IAAA;AA2BxBM,EAAAA,cAAAA,EAAgBN,SAAAA,CA3BQ,IAAA;AA6BxB3C,EAAAA,OAAAA,EAAS2C,SAAAA,CA7Be,IAAA;AA8BxB1C,EAAAA,aAAAA,EAAe0C,SAAAA,CA9BS,IAAA;AA+BxBxC,EAAAA,aAAAA,EAAewC,SAAAA,CA/BS,IAAA;AAgCxB7B,EAAAA,WAAAA,EAAa6B,SAAAA,CAhCW,IAAA;AAiCxBO,EAAAA,QAAAA,EAAUP,SAAAA,CAAU1E;AAjCI,CAAzBH;AAoCAA,YAAAA,CAAAA,YAAAA,GAA4B;AAC3B+B,EAAAA,SAAAA,EAD2B,KAAA;AAE3BrB,EAAAA,IAAAA,EAF2B,KAAA;AAG3BuC,EAAAA,GAAAA,EAH2B,KAAA;AAI3B6B,EAAAA,kBAAAA,EAJ2B,CAAA;AAK3BC,EAAAA,KAAAA,EAL2B,KAAA;AAM3BI,EAAAA,cAAAA,EAN2B,IAAA;AAO3Bf,EAAAA,kBAAAA,EAAoB;AAPO,CAA5BpE;AAUA,eAAA,YAAA","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { select, event as d3Event, mouse, touches } from \"d3-selection\";\n\nimport {\n\tisDefined, mousePosition, touchPosition, getTouchProps,\n\td3Window,\n\tMOUSEMOVE, MOUSEUP,\n\tMOUSEENTER, MOUSELEAVE,\n\tTOUCHMOVE, TOUCHEND,\n\tnoop\n} from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\";\n// import { clearTimeout, setTimeout } from \"timers\";\n\nclass EventCapture extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleEnter = this.handleEnter.bind(this);\n\t\tthis.handleLeave = this.handleLeave.bind(this);\n\t\tthis.handleWheel = this.handleWheel.bind(this);\n\t\tthis.handleMouseMove = this.handleMouseMove.bind(this);\n\t\tthis.handleMouseDown = this.handleMouseDown.bind(this);\n\t\tthis.handlePanEnd = this.handlePanEnd.bind(this);\n\t\tthis.handlePan = this.handlePan.bind(this);\n\t\tthis.handleTouchStart = this.handleTouchStart.bind(this);\n\t\tthis.handleTouchMove = this.handleTouchMove.bind(this);\n\t\tthis.handlePinchZoom = this.handlePinchZoom.bind(this);\n\t\tthis.handlePinchZoomEnd = this.handlePinchZoomEnd.bind(this);\n\n\t\tthis.handleClick = this.handleClick.bind(this);\n\n\t\tthis.handleRightClick = this.handleRightClick.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragEnd = this.handleDragEnd.bind(this);\n\n\t\tthis.shouldPan = this.shouldPan.bind(this);\n\t\tthis.canPan = this.canPan.bind(this);\n\n\t\tthis.setCursorClass = this.setCursorClass.bind(this);\n\t\tthis.saveNode = this.saveNode.bind(this);\n\n\t\tthis.mouseInside = false;\n\n\t\tthis.mouseInteraction = true;\n\t\tthis.state = {\n\t\t\tpanInProgress: false,\n\t\t};\n\t}\n\tsaveNode(node) {\n\t\tthis.node = node;\n\t}\n\tcomponentWillMount() {\n\t\tthis.focus = this.props.focus;\n\t}\n\tcomponentDidMount() {\n\t\tif (this.node) {\n\t\t\tselect(this.node)\n\t\t\t\t.on(MOUSEENTER, this.handleEnter)\n\t\t\t\t.on(MOUSELEAVE, this.handleLeave);\n\t\t}\n\t}\n\tcomponentDidUpdate() {\n\t\tthis.componentDidMount();\n\t}\n\tcomponentWillUnmount() {\n\t\tif (this.node) {\n\t\t\tselect(this.node)\n\t\t\t\t.on(MOUSEENTER, null)\n\t\t\t\t.on(MOUSELEAVE, null);\n\t\t\tconst win = d3Window(this.node);\n\t\t\tselect(win)\n\t\t\t\t.on(MOUSEMOVE, null);\n\t\t}\n\t}\n\thandleEnter() {\n\t\tconst e = d3Event;\n\n\t\tconst { onMouseEnter } = this.props;\n\t\tthis.mouseInside = true;\n\t\tif (!this.state.panInProgress\n\t\t\t\t&& !this.state.dragInProgress) {\n\t\t\tconst win = d3Window(this.node);\n\t\t\tselect(win)\n\t\t\t\t.on(MOUSEMOVE, this.handleMouseMove);\n\t\t}\n\t\tonMouseEnter(e);\n\t}\n\thandleLeave(e) {\n\t\tconst { onMouseLeave } = this.props;\n\t\tthis.mouseInside = false;\n\t\tif (!this.state.panInProgress\n\t\t\t\t&& !this.state.dragInProgress) {\n\t\t\tconst win = d3Window(this.node);\n\t\t\tselect(win)\n\t\t\t\t.on(MOUSEMOVE, null);\n\t\t}\n\t\tonMouseLeave(e);\n\t}\n\thandleWheel(e) {\n\t\tconst { zoom, onZoom } = this.props;\n\t\tconst { panInProgress } = this.state;\n\n\t\tconst yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n\t\t// const xPan = Math.abs(e.deltaY) < Math.abs(e.deltaX) && Math.abs(e.deltaX) > 0;\n\t\tconst mouseXY = mousePosition(e);\n\t\te.preventDefault();\n\n\t\tif (zoom && this.focus && yZoom && !panInProgress) {\n\t\t\tconst zoomDir = e.deltaY > 0 ? 1 : -1;\n\n\t\t\tonZoom(zoomDir, mouseXY, e);\n\t\t} else if (this.focus) {\n\t\t\tif (this.shouldPan()) {\n\t\t\t\t// console.log(\"Do pan now...\")\n\t\t\t\t// pan already in progress\n\t\t\t\tconst {\n\t\t\t\t\tpanStartXScale,\n\t\t\t\t\tchartsToPan\n\t\t\t\t} = this.state.panStart;\n\t\t\t\tthis.lastNewPos = mouseXY;\n\t\t\t\tthis.panHappened = true;\n\n\t\t\t\tthis.dx += e.deltaX;\n\t\t\t\tthis.dy += e.deltaY;\n\t\t\t\tconst dxdy = { dx: this.dx, dy: this.dy };\n\n\t\t\t\tthis.props.onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n\t\t\t} else {\n\t\t\t\t// console.log(\"Pan start...\")\n\t\t\t\t// pan start\n\n\t\t\t\tconst { xScale, chartConfig } = this.props;\n\t\t\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n\t\t\t\tthis.dx = 0;\n\t\t\t\tthis.dy = 0;\n\t\t\t\tthis.setState({\n\t\t\t\t\tpanInProgress: true,\n\t\t\t\t\tpanStart: {\n\t\t\t\t\t\tpanStartXScale: xScale,\n\t\t\t\t\t\tpanOrigin: mouseXY,\n\t\t\t\t\t\tchartsToPan: currentCharts\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.queuePanEnd();\n\t\t}\n\t}\n\tqueuePanEnd() {\n\t\tif (isDefined(this.panEndTimeout)) {\n\t\t\tclearTimeout(this.panEndTimeout);\n\t\t}\n\t\tthis.panEndTimeout = setTimeout(() => {\n\t\t\tthis.handlePanEnd();\n\t\t}, 100);\n\t}\n\thandleMouseMove() {\n\t\tconst e = d3Event;\n\n\t\tconst { onMouseMove, mouseMove } = this.props;\n\n\t\tif (this.mouseInteraction\n\t\t\t\t&& mouseMove\n\t\t\t\t&& !this.state.panInProgress) {\n\n\t\t\tconst newPos = mouse(this.node);\n\n\t\t\tonMouseMove(newPos, \"mouse\", e);\n\t\t}\n\t}\n\thandleClick(e) {\n\t\tconst mouseXY = mousePosition(e);\n\t\tconst { onClick, onDoubleClick } = this.props;\n\n\t\tif (!this.panHappened && !this.dragHappened) {\n\t\t\tif (this.clicked) {\n\t\t\t\tonDoubleClick(mouseXY, e);\n\t\t\t\tthis.clicked = false;\n\t\t\t} else {\n\t\t\t\tonClick(mouseXY, e);\n\t\t\t\tthis.clicked = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this.clicked) {\n\t\t\t\t\t\tthis.clicked = false;\n\t\t\t\t\t}\n\t\t\t\t}, 400);\n\t\t\t}\n\t\t}\n\t}\n\thandleRightClick(e) {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t\tconst { onContextMenu, onPanEnd } = this.props;\n\n\t\tconst mouseXY = mousePosition(e, this.node.getBoundingClientRect());\n\n\t\tif (isDefined(this.state.panStart)) {\n\t\t\tconst { panStartXScale, panOrigin, chartsToPan } = this.state.panStart;\n\t\t\tif (this.panHappened) {\n\t\t\t\tonPanEnd(mouseXY, panStartXScale, panOrigin, chartsToPan, e);\n\t\t\t}\n\t\t\tconst win = d3Window(this.node);\n\t\t\tselect(win)\n\t\t\t\t.on(MOUSEMOVE, null)\n\t\t\t\t.on(MOUSEUP, null);\n\n\t\t\tthis.setState({\n\t\t\t\tpanInProgress: false,\n\t\t\t\tpanStart: null,\n\t\t\t});\n\t\t}\n\n\t\tonContextMenu(mouseXY, e);\n\t}\n\n\thandleDrag() {\n\t\tconst e = d3Event;\n\t\tif (this.props.onDrag) {\n\t\t\tthis.dragHappened = true;\n\t\t\tconst mouseXY = mouse(this.node);\n\t\t\tthis.props.onDrag({\n\t\t\t\tstartPos: this.state.dragStartPosition,\n\t\t\t\tmouseXY\n\t\t\t}, e);\n\t\t}\n\t}\n\tcancelDrag() {\n\t\tconst win = d3Window(this.node);\n\t\tselect(win)\n\t\t\t.on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n\t\t\t.on(MOUSEUP, null);\n\n\t\tthis.setState({\n\t\t\tdragInProgress: false,\n\t\t});\n\t\tthis.mouseInteraction = true;\n\t}\n\thandleDragEnd() {\n\t\tconst e = d3Event;\n\t\tconst mouseXY = mouse(this.node);\n\n\t\tconst win = d3Window(this.node);\n\t\tselect(win)\n\t\t\t.on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n\t\t\t.on(MOUSEUP, null);\n\n\t\tif (this.dragHappened) {\n\t\t\tthis.props.onDragComplete({\n\t\t\t\tmouseXY\n\t\t\t}, e);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tdragInProgress: false,\n\t\t});\n\t\tthis.mouseInteraction = true;\n\t}\n\tcanPan() {\n\t\tconst { getAllPanConditions } = this.props;\n\t\tconst { pan: initialPanEnabled } = this.props;\n\n\t\tconst {\n\t\t\tpanEnabled,\n\t\t\tdraggable: somethingSelected\n\t\t} = getAllPanConditions()\n\t\t\t.reduce((returnObj, a) => {\n\t\t\t\treturn {\n\t\t\t\t\tdraggable: returnObj.draggable || a.draggable,\n\t\t\t\t\tpanEnabled: returnObj.panEnabled && a.panEnabled,\n\t\t\t\t};\n\t\t\t}, {\n\t\t\t\tdraggable: false,\n\t\t\t\tpanEnabled: initialPanEnabled,\n\t\t\t});\n\n\t\treturn {\n\t\t\tpanEnabled,\n\t\t\tsomethingSelected\n\t\t};\n\t}\n\thandleMouseDown(e) {\n\t\tif (e.button !== 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst { xScale, chartConfig, onMouseDown } = this.props;\n\n\t\tthis.panHappened = false;\n\t\tthis.dragHappened = false;\n\t\tthis.focus = true;\n\n\t\tif (!this.state.panInProgress\n\t\t\t&& this.mouseInteraction\n\t\t) {\n\n\t\t\tconst mouseXY = mousePosition(e);\n\t\t\tconst currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\t\t\tconst {\n\t\t\t\tpanEnabled, somethingSelected\n\t\t\t} = this.canPan();\n\t\t\tconst pan = panEnabled && !somethingSelected;\n\n\t\t\tif (pan) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tpanInProgress: pan,\n\t\t\t\t\tpanStart: {\n\t\t\t\t\t\tpanStartXScale: xScale,\n\t\t\t\t\t\tpanOrigin: mouseXY,\n\t\t\t\t\t\tchartsToPan: currentCharts\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tconst win = d3Window(this.node);\n\t\t\t\tselect(win)\n\t\t\t\t\t.on(MOUSEMOVE, this.handlePan)\n\t\t\t\t\t.on(MOUSEUP, this.handlePanEnd);\n\n\t\t\t} else if (somethingSelected) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tpanInProgress: false,\n\t\t\t\t\tdragInProgress: true,\n\t\t\t\t\tpanStart: null,\n\t\t\t\t\tdragStartPosition: mouseXY,\n\t\t\t\t});\n\t\t\t\tthis.props.onDragStart({ startPos: mouseXY }, e);\n\t\t\t\t// this.mouseInteraction = false;\n\n\t\t\t\tconst win = d3Window(this.node);\n\t\t\t\tselect(win)\n\t\t\t\t\t.on(MOUSEMOVE, this.handleDrag)\n\t\t\t\t\t.on(MOUSEUP, this.handleDragEnd);\n\t\t\t}\n\n\t\t\tonMouseDown(mouseXY, currentCharts, e);\n\t\t}\n\t\te.preventDefault();\n\t}\n\tshouldPan() {\n\t\tconst { pan: panEnabled, onPan } = this.props;\n\t\treturn panEnabled\n\t\t\t&& onPan\n\t\t\t&& isDefined(this.state.panStart);\n\t}\n\thandlePan() {\n\t\tconst e = d3Event;\n\n\t\tif (this.shouldPan()) {\n\t\t\tthis.panHappened = true;\n\n\t\t\tconst { panStartXScale, panOrigin, chartsToPan } = this.state.panStart;\n\n\t\t\tconst mouseXY = this.mouseInteraction\n\t\t\t\t? mouse(this.node)\n\t\t\t\t: touches(this.node)[0];\n\n\t\t\tthis.lastNewPos = mouseXY;\n\t\t\tconst dx = mouseXY[0] - panOrigin[0];\n\t\t\tconst dy = mouseXY[1] - panOrigin[1];\n\n\t\t\tthis.dx = dx;\n\t\t\tthis.dy = dy;\n\n\t\t\tthis.props.onPan(\n\t\t\t\tmouseXY, panStartXScale, { dx, dy }, chartsToPan, e\n\t\t\t);\n\t\t}\n\t}\n\thandlePanEnd() {\n\t\tconst e = d3Event;\n\t\tconst { pan: panEnabled, onPanEnd } = this.props;\n\n\t\tif (isDefined(this.state.panStart)) {\n\t\t\tconst { panStartXScale, chartsToPan } = this.state.panStart;\n\n\t\t\tconst win = d3Window(this.node);\n\t\t\tselect(win)\n\t\t\t\t.on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n\t\t\t\t.on(MOUSEUP, null)\n\t\t\t\t.on(TOUCHMOVE, null)\n\t\t\t\t.on(TOUCHEND, null);\n\n\t\t\tif (this.panHappened\n\t\t\t\t\t// && !this.contextMenuClicked\n\t\t\t\t\t&& panEnabled\n\t\t\t\t\t&& onPanEnd) {\n\t\t\t\tconst { dx, dy } = this;\n\n\t\t\t\t// console.log(dx, dy)\n\t\t\t\tdelete this.dx;\n\t\t\t\tdelete this.dy;\n\t\t\t\tonPanEnd(this.lastNewPos, panStartXScale, { dx, dy }, chartsToPan, e);\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tpanInProgress: false,\n\t\t\t\tpanStart: null,\n\t\t\t});\n\t\t}\n\t}\n\thandleTouchMove(e) {\n\t\tconst { onMouseMove } = this.props;\n\t\tconst touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n\t\tonMouseMove(touchXY, \"touch\", e);\n\t}\n\thandleTouchStart(e) {\n\t\tthis.mouseInteraction = false;\n\n\t\tconst { pan: panEnabled, chartConfig, onMouseMove } = this.props;\n\t\tconst { xScale, onPanEnd } = this.props;\n\n\t\tif (e.touches.length === 1) {\n\n\t\t\tthis.panHappened = false;\n\t\t\tconst touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n\t\t\tonMouseMove(touchXY, \"touch\", e);\n\n\t\t\tif (panEnabled) {\n\t\t\t\tconst currentCharts = getCurrentCharts(chartConfig, touchXY);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tpanInProgress: true,\n\t\t\t\t\tpanStart: {\n\t\t\t\t\t\tpanStartXScale: xScale,\n\t\t\t\t\t\tpanOrigin: touchXY,\n\t\t\t\t\t\tchartsToPan: currentCharts,\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst win = d3Window(this.node);\n\t\t\t\tselect(win)\n\t\t\t\t\t.on(TOUCHMOVE, this.handlePan, false)\n\t\t\t\t\t.on(TOUCHEND, this.handlePanEnd, false);\n\n\t\t\t}\n\t\t} else if (e.touches.length === 2) {\n\t\t\t// pinch zoom begin\n\t\t\t// do nothing pinch zoom is handled in handleTouchMove\n\t\t\tconst { panInProgress, panStart } = this.state;\n\n\t\t\tif (panInProgress && panEnabled && onPanEnd) {\n\t\t\t\tconst { panStartXScale, panOrigin, chartsToPan } = panStart;\n\n\t\t\t\tconst win = d3Window(this.node);\n\t\t\t\tselect(win)\n\t\t\t\t\t.on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n\t\t\t\t\t.on(MOUSEUP, null)\n\t\t\t\t\t.on(TOUCHMOVE, this.handlePinchZoom, false)\n\t\t\t\t\t.on(TOUCHEND, this.handlePinchZoomEnd, false);\n\n\t\t\t\tconst touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n\t\t\t\tconst touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n\t\t\t\tif (this.panHappened\n\t\t\t\t\t\t// && !this.contextMenuClicked\n\t\t\t\t\t\t&& panEnabled\n\t\t\t\t\t\t&& onPanEnd) {\n\n\t\t\t\t\tonPanEnd(this.lastNewPos, panStartXScale, panOrigin, chartsToPan, e);\n\t\t\t\t}\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tpanInProgress: false,\n\t\t\t\t\tpinchZoomStart: {\n\t\t\t\t\t\txScale,\n\t\t\t\t\t\ttouch1Pos,\n\t\t\t\t\t\ttouch2Pos,\n\t\t\t\t\t\trange: xScale.range(),\n\t\t\t\t\t\tchartsToPan,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\thandlePinchZoom() {\n\t\tconst e = d3Event;\n\t\tconst [touch1Pos, touch2Pos] = touches(this.node);\n\t\tconst { xScale, zoom: zoomEnabled, onPinchZoom } = this.props;\n\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tconst { chartsToPan, ...initialPinch } = this.state.pinchZoomStart;\n\n\t\tif (zoomEnabled && onPinchZoom) {\n\t\t\tonPinchZoom(initialPinch, {\n\t\t\t\ttouch1Pos,\n\t\t\t\ttouch2Pos,\n\t\t\t\txScale,\n\t\t\t}, e);\n\t\t}\n\t}\n\thandlePinchZoomEnd() {\n\t\tconst e = d3Event;\n\n\t\tconst win = d3Window(this.node);\n\t\tselect(win)\n\t\t\t.on(TOUCHMOVE, null)\n\t\t\t.on(TOUCHEND, null);\n\n\t\tconst { zoom: zoomEnabled, onPinchZoomEnd } = this.props;\n\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tconst { chartsToPan, ...initialPinch } = this.state.pinchZoomStart;\n\n\t\tif (zoomEnabled && onPinchZoomEnd) {\n\t\t\tonPinchZoomEnd(initialPinch, e);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tpinchZoomStart: null\n\t\t});\n\t}\n\tsetCursorClass(cursorOverrideClass) {\n\t\tif (cursorOverrideClass !== this.state.cursorOverrideClass) {\n\t\t\tthis.setState({\n\t\t\t\tcursorOverrideClass\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\tconst { height, width, disableInteraction, useCrossHairStyleCursor } = this.props;\n\t\tconst className = this.state.cursorOverrideClass != null\n\t\t\t? this.state.cursorOverrideClass\n\t\t\t: !useCrossHairStyleCursor ? \"\" : this.state.panInProgress\n\t\t\t\t? \"react-stockcharts-grabbing-cursor\"\n\t\t\t\t: \"react-stockcharts-crosshair-cursor\";\n\n\t\tconst interactionProps = disableInteraction || {\n\t\t\tonWheel: this.handleWheel,\n\t\t\tonMouseDown: this.handleMouseDown,\n\t\t\tonClick: this.handleClick,\n\t\t\tonContextMenu: this.handleRightClick,\n\t\t\tonTouchStart: this.handleTouchStart,\n\t\t\tonTouchMove: this.handleTouchMove,\n\t\t};\n\n\t\treturn (\n\t\t\t<rect ref={this.saveNode}\n\t\t\t\tclassName={className}\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t\tstyle={{ opacity: 0 }}\n\t\t\t\t{...interactionProps}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n// \t\t\t\tonMouseEnter={this.handleEnter}\n//\t\t\t\tonMouseLeave={this.handleLeave}\n\n\nEventCapture.propTypes = {\n\tmouseMove: PropTypes.bool.isRequired,\n\tzoom: PropTypes.bool.isRequired,\n\tpan: PropTypes.bool.isRequired,\n\tpanSpeedMultiplier: PropTypes.number.isRequired,\n\tfocus: PropTypes.bool.isRequired,\n\tuseCrossHairStyleCursor: PropTypes.bool.isRequired,\n\n\twidth: PropTypes.number.isRequired,\n\theight: PropTypes.number.isRequired,\n\tchartConfig: PropTypes.array,\n\txScale: PropTypes.func.isRequired,\n\txAccessor: PropTypes.func.isRequired,\n\tdisableInteraction: PropTypes.bool.isRequired,\n\n\tgetAllPanConditions: PropTypes.func.isRequired,\n\n\tonMouseMove: PropTypes.func,\n\tonMouseEnter: PropTypes.func,\n\tonMouseLeave: PropTypes.func,\n\tonZoom: PropTypes.func,\n\tonPinchZoom: PropTypes.func,\n\tonPinchZoomEnd: PropTypes.func.isRequired,\n\tonPan: PropTypes.func,\n\tonPanEnd: PropTypes.func,\n\tonDragStart: PropTypes.func,\n\tonDrag: PropTypes.func,\n\tonDragComplete: PropTypes.func,\n\n\tonClick: PropTypes.func,\n\tonDoubleClick: PropTypes.func,\n\tonContextMenu: PropTypes.func,\n\tonMouseDown: PropTypes.func,\n\tchildren: PropTypes.node,\n};\n\nEventCapture.defaultProps = {\n\tmouseMove: false,\n\tzoom: false,\n\tpan: false,\n\tpanSpeedMultiplier: 1,\n\tfocus: false,\n\tonDragComplete: noop,\n\tdisableInteraction: false,\n};\n\nexport default EventCapture;\n"]},"metadata":{},"sourceType":"module"}