{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PointAndFigureSeries = function (_Component) {\n  _inherits(PointAndFigureSeries, _Component);\n\n  function PointAndFigureSeries(props) {\n    _classCallCheck(this, PointAndFigureSeries);\n\n    var _this = _possibleConstructorReturn(this, (PointAndFigureSeries.__proto__ || Object.getPrototypeOf(PointAndFigureSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(PointAndFigureSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n      _drawOnCanvas(ctx, this.props, columns);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var _props = this.props,\n          stroke = _props.stroke,\n          fill = _props.fill,\n          strokeWidth = _props.strokeWidth,\n          className = _props.className;\n      var columns = getColumns(xScale, xAccessor, yScale, plotData);\n      return _react2.default.createElement(\"g\", {\n        className: className\n      }, columns.map(function (col, idx) {\n        return _react2.default.createElement(\"g\", {\n          key: idx,\n          className: col.className,\n          transform: \"translate(\" + col.offset[0] + \", \" + col.offset[1] + \")\"\n        }, col.boxes.map(function (box, i) {\n          if (col.direction > 0) {\n            return _react2.default.createElement(\"g\", {\n              key: idx + \"-\" + i\n            }, _react2.default.createElement(\"line\", {\n              className: \"up\",\n              strokeWidth: strokeWidth,\n              stroke: stroke.up,\n              fill: fill.up,\n              x1: 0,\n              y1: box.open,\n              x2: box.columnWidth,\n              y2: box.close\n            }), _react2.default.createElement(\"line\", {\n              className: \"up\",\n              strokeWidth: strokeWidth,\n              stroke: stroke.up,\n              fill: fill.up,\n              x1: 0,\n              y1: box.close,\n              x2: box.columnWidth,\n              y2: box.open\n            }));\n          }\n\n          return _react2.default.createElement(\"ellipse\", {\n            key: idx + \"-\" + i,\n            className: \"down\",\n            strokeWidth: strokeWidth,\n            stroke: stroke.down,\n            fill: fill.down,\n            cx: box.columnWidth / 2,\n            cy: (box.open + box.close) / 2,\n            rx: box.columnWidth / 2,\n            ry: box.boxHeight / 2\n          });\n        }));\n      }));\n    }\n  }]);\n\n  return PointAndFigureSeries;\n}(_react.Component);\n\nPointAndFigureSeries.propTypes = {\n  className: _propTypes2.default.string,\n  strokeWidth: _propTypes2.default.number.isRequired,\n  stroke: _propTypes2.default.object.isRequired,\n  fill: _propTypes2.default.object.isRequired,\n  clip: _propTypes2.default.bool.isRequired\n};\nPointAndFigureSeries.defaultProps = {\n  className: \"react-stockcharts-point-and-figure\",\n  strokeWidth: 1,\n  stroke: {\n    up: \"#6BA583\",\n    down: \"#FF0000\"\n  },\n  fill: {\n    up: \"none\",\n    down: \"none\"\n  },\n  clip: true\n};\n\nfunction _drawOnCanvas(ctx, props, columns) {\n  var stroke = props.stroke,\n      fill = props.fill,\n      strokeWidth = props.strokeWidth;\n  ctx.lineWidth = strokeWidth;\n  columns.forEach(function (col) {\n    var _col$offset = _slicedToArray(col.offset, 2),\n        offsetX = _col$offset[0],\n        offsetY = _col$offset[1];\n\n    col.boxes.forEach(function (box) {\n      if (col.direction > 0) {\n        ctx.fillStyle = fill.up;\n        ctx.strokeStyle = stroke.up;\n        ctx.beginPath();\n        ctx.moveTo(offsetX, offsetY + box.open);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n        ctx.moveTo(offsetX, offsetY + box.close);\n        ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = fill.down;\n        ctx.strokeStyle = stroke.down;\n        ctx.beginPath();\n        var x = offsetX + box.columnWidth / 2,\n            y = offsetY + box.open + box.boxHeight / 2;\n        var rx = box.columnWidth / 2,\n            ry = box.boxHeight / 2;\n        ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n      }\n    });\n  });\n  ctx.stroke();\n}\n\nfunction getColumns(xScale, xAccessor, yScale, plotData) {\n  var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n  var columnWidth = width / (plotData.length - 1);\n  var anyBox = void 0,\n      j = 0;\n\n  while ((0, _utils.isNotDefined)(anyBox)) {\n    if ((0, _utils.isDefined)(plotData[j].close)) {\n      anyBox = plotData[j].boxes[0];\n    } else {\n      break;\n    }\n\n    j++;\n  }\n\n  var boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n  var columns = plotData.filter(function (d) {\n    return (0, _utils.isDefined)(d.close);\n  }).map(function (d) {\n    var boxes = d.boxes.map(function (box) {\n      return {\n        columnWidth: columnWidth,\n        boxHeight: boxHeight,\n        open: yScale(box.open),\n        close: yScale(box.close)\n      };\n    });\n    var xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n    return {\n      boxes: boxes,\n      direction: d.direction,\n      offset: [xOffset, 0]\n    };\n  });\n  return columns;\n}\n\nexports.default = PointAndFigureSeries;","map":{"version":3,"sources":["../../../src/lib/series/PointAndFigureSeries.js"],"names":["PointAndFigureSeries","ctx","moreProps","xAccessor","xScale","yScale","plotData","columns","getColumns","drawOnCanvas","clip","stroke","fill","strokeWidth","className","col","idx","box","isRequired","up","down","props","offsetX","offsetY","x","y","rx","ry","Math","width","columnWidth","anyBox","j","boxHeight","d","boxes","open","close","xOffset","direction","offset"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport { isDefined, isNotDefined } from \"../utils\";\n\nclass PointAndFigureSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\t\tconst columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n\t\tdrawOnCanvas(ctx, this.props, columns);\n\t}\n\trender() {\n\t\tconst { clip } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tclip={clip}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tconst { stroke, fill, strokeWidth, className } = this.props;\n\n\t\tconst columns = getColumns(xScale, xAccessor, yScale, plotData);\n\n\t\treturn (\n\t\t\t<g className={className}>\n\t\t\t\t{columns.map((col, idx) => (\n\t\t\t\t\t<g key={idx} className={col.className} transform={`translate(${ col.offset[0] }, ${ col.offset[1] })`}>\n\t\t\t\t\t\t{col.boxes.map((box, i) => {\n\t\t\t\t\t\t\tif (col.direction > 0) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<g key={`${ idx }-${ i }`}>\n\t\t\t\t\t\t\t\t\t\t<line className=\"up\" strokeWidth={strokeWidth} stroke={stroke.up} fill={fill.up}\n\t\t\t\t\t\t\t\t\t\t\tx1={0} y1={box.open} x2={box.columnWidth} y2={box.close} />\n\t\t\t\t\t\t\t\t\t\t<line className=\"up\" strokeWidth={strokeWidth} stroke={stroke.up} fill={fill.up}\n\t\t\t\t\t\t\t\t\t\t\tx1={0} y1={box.close} x2={box.columnWidth} y2={box.open} />\n\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ellipse key={`${ idx }-${ i }`}\n\t\t\t\t\t\t\t\t\tclassName=\"down\" strokeWidth={strokeWidth} stroke={stroke.down} fill={fill.down}\n\t\t\t\t\t\t\t\t\tcx={box.columnWidth / 2} cy={(box.open + box.close) / 2}\n\t\t\t\t\t\t\t\t\trx={box.columnWidth / 2} ry={box.boxHeight / 2} />\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</g>\n\t\t\t\t))}\n\t\t\t</g>\n\t\t);\n\t}\n}\n\nPointAndFigureSeries.propTypes = {\n\tclassName: PropTypes.string,\n\tstrokeWidth: PropTypes.number.isRequired,\n\tstroke: PropTypes.object.isRequired,\n\tfill: PropTypes.object.isRequired,\n\tclip: PropTypes.bool.isRequired,\n};\n\nPointAndFigureSeries.defaultProps = {\n\tclassName: \"react-stockcharts-point-and-figure\",\n\tstrokeWidth: 1,\n\tstroke: {\n\t\tup: \"#6BA583\",\n\t\tdown: \"#FF0000\"\n\t},\n\tfill: {\n\t\tup: \"none\",\n\t\tdown: \"none\"\n\t},\n\tclip: true,\n};\n\nfunction drawOnCanvas(ctx, props, columns) {\n\tconst { stroke, fill, strokeWidth } = props;\n\n\tctx.lineWidth = strokeWidth;\n\n\tcolumns.forEach(col => {\n\t\tconst [offsetX, offsetY] = col.offset;\n\t\tcol.boxes.forEach(box => {\n\t\t\tif (col.direction > 0) {\n\t\t\t\tctx.fillStyle = fill.up;\n\t\t\t\tctx.strokeStyle = stroke.up;\n\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.moveTo(offsetX, offsetY + box.open);\n\t\t\t\tctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n\t\t\t\tctx.moveTo(offsetX, offsetY + box.close);\n\t\t\t\tctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n\n\t\t\t\tctx.stroke();\n\t\t\t} else {\n\t\t\t\tctx.fillStyle = fill.down;\n\t\t\t\tctx.strokeStyle = stroke.down;\n\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tconst [x, y] = [offsetX + box.columnWidth / 2, offsetY + box.open + box.boxHeight / 2];\n\t\t\t\tconst [rx, ry] = [box.columnWidth / 2, box.boxHeight / 2];\n\n\t\t\t\tctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t});\n\t});\n\n\tctx.stroke();\n}\n\nfunction getColumns(xScale, xAccessor, yScale, plotData) {\n\n\tconst width = xScale(xAccessor(plotData[plotData.length - 1]))\n\t\t- xScale(xAccessor(plotData[0]));\n\n\tconst columnWidth = (width / (plotData.length - 1));\n\n\tlet anyBox, j = 0;\n\twhile (isNotDefined(anyBox)) {\n\t\tif (isDefined(plotData[j].close)) {\n\t\t\tanyBox = plotData[j].boxes[0];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\n\tconst boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n\n\tconst columns = plotData\n\t\t.filter(d => isDefined(d.close))\n\t\t.map(d => {\n\t\t\tconst boxes = d.boxes.map((box) => ({\n\t\t\t\tcolumnWidth: columnWidth,\n\t\t\t\tboxHeight: boxHeight,\n\t\t\t\topen: yScale(box.open),\n\t\t\t\tclose: yScale(box.close),\n\t\t\t}));\n\n\t\t\tconst xOffset = (xScale(xAccessor(d)) - (columnWidth / 2));\n\t\t\treturn {\n\t\t\t\tboxes: boxes,\n\t\t\t\tdirection: d.direction,\n\t\t\t\toffset: [xOffset, 0],\n\t\t\t};\n\t\t});\n\treturn columns;\n}\n\nexport default PointAndFigureSeries;\n"]},"metadata":{},"sourceType":"script"}