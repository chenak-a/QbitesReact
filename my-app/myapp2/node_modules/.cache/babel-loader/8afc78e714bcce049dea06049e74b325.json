{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function () {\n  var base = (0, _baseIndicator2.default)().type(ALGORITHM_TYPE).accessor(function (d) {\n    return d.ha;\n  });\n  var underlyingAlgorithm = (0, _calculator.heikinAshi)();\n  var mergedAlgorithm = (0, _utils.merge)().algorithm(underlyingAlgorithm).merge(function (datum, indicator) {\n    return _extends({}, datum, indicator);\n  });\n\n  var indicator = function indicator(data) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      merge: true\n    };\n\n    if (options.merge) {\n      if (!base.accessor()) throw new Error(\"Set an accessor to \" + ALGORITHM_TYPE + \" before calculating\");\n      return mergedAlgorithm(data);\n    }\n\n    return underlyingAlgorithm(data);\n  };\n\n  (0, _utils.rebind)(indicator, base, \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\"); // rebind(indicator, underlyingAlgorithm, \"windowSize\", \"source\");\n\n  (0, _utils.rebind)(indicator, mergedAlgorithm, \"merge\");\n  return indicator;\n};\n\nvar _calculator = require(\"../calculator\");\n\nvar _baseIndicator = require(\"./baseIndicator\");\n\nvar _baseIndicator2 = _interopRequireDefault(_baseIndicator);\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ALGORITHM_TYPE = \"HeikinAshi\";","map":{"version":3,"sources":["../../../src/lib/indicator/heikinAshi.js"],"names":["ALGORITHM_TYPE","base","d","underlyingAlgorithm","mergedAlgorithm","indicator","options","merge"],"mappings":";;;;;;;;;;;;;;;;;;;;kBASe,YAAW;AAEzB,MAAMC,IAAAA,GAAO,CAAA,GAAA,eAAA,CAAA,OAAA,IAAA,IAAA,CAAA,cAAA,EAAA,QAAA,CAEF,UAAA,CAAA,EAAA;AAAA,WAAKC,CAAAA,CAAL,EAAA;AAFX,GAAa,CAAb;AAIA,MAAMC,mBAAAA,GAAsB,CAAA,GAAA,WAAA,CAA5B,UAA4B,GAA5B;AAEA,MAAMC,eAAAA,GAAkB,CAAA,GAAA,MAAA,CAAA,KAAA,IAAA,SAAA,CAAA,mBAAA,EAAA,KAAA,CAEhB,UAAA,KAAA,EAAA,SAAA,EAAsB;AAC5B,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,SAAA,CAAA;AAHF,GAAwB,CAAxB;;AAMA,MAAMC,SAAAA,GAAY,SAAZA,SAAY,CAAA,IAAA,EAA0C;AAAA,QAA3BC,OAA2B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAjB;AAAEC,MAAAA,KAAAA,EAAF;AAAA,KAAiB;;AAC3D,QAAID,OAAAA,CAAJ,KAAA,EAAmB;AAClB,UAAI,CAACL,IAAAA,CAAL,QAAKA,EAAL,EAAsB,MAAM,IAAA,KAAA,CAAA,wBAAA,cAAA,GAAN,qBAAM,CAAN;AACtB,aAAOG,eAAAA,CAAP,IAAOA,CAAP;AACA;;AACD,WAAOD,mBAAAA,CAAP,IAAOA,CAAP;AALD,GAAA;;AAQA,GAAA,GAAA,MAAA,CAAA,MAAA,EAAA,SAAA,EAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAtByB,CAuBzB;;AACA,GAAA,GAAA,MAAA,CAAA,MAAA,EAAA,SAAA,EAAA,eAAA,EAAA,OAAA;AAEA,SAAA,SAAA;;;AAjCD,IAAA,WAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;;;;;AAEA,IAAMH,cAAAA,GAAN,YAAA","sourcesContent":["\n\nimport { heikinAshi } from \"../calculator\";\nimport baseIndicator from \"./baseIndicator\";\n\nimport { rebind, merge } from \"../utils\";\n\nconst ALGORITHM_TYPE = \"HeikinAshi\";\n\nexport default function() {\n\n\tconst base = baseIndicator()\n\t\t.type(ALGORITHM_TYPE)\n\t\t.accessor(d => d.ha);\n\n\tconst underlyingAlgorithm = heikinAshi();\n\n\tconst mergedAlgorithm = merge()\n\t\t.algorithm(underlyingAlgorithm)\n\t\t.merge((datum, indicator) => {\n\t\t\treturn { ...datum, ...indicator };\n\t\t});\n\n\tconst indicator = function(data, options = { merge: true }) {\n\t\tif (options.merge) {\n\t\t\tif (!base.accessor()) throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n\t\t\treturn mergedAlgorithm(data);\n\t\t}\n\t\treturn underlyingAlgorithm(data);\n\t};\n\n\trebind(indicator, base, \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n\t// rebind(indicator, underlyingAlgorithm, \"windowSize\", \"source\");\n\trebind(indicator, mergedAlgorithm, \"merge\");\n\n\treturn indicator;\n}\n"]},"metadata":{},"sourceType":"script"}