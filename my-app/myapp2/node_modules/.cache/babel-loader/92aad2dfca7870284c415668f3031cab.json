{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotateXY = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.identityStack = identityStack;\nexports.drawOnCanvasHelper = drawOnCanvasHelper;\nexports.svgHelper = svgHelper;\nexports.getBarsSVG2 = getBarsSVG2;\nexports.drawOnCanvas2 = drawOnCanvas2;\nexports.getBars = getBars;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Collection = require(\"d3-collection\");\n\nvar _d3Array = require(\"d3-array\");\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _GenericChartComponent = require(\"../GenericChartComponent\");\n\nvar _GenericChartComponent2 = _interopRequireDefault(_GenericChartComponent);\n\nvar _GenericComponent = require(\"../GenericComponent\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar StackedBarSeries = function (_Component) {\n  _inherits(StackedBarSeries, _Component);\n\n  function StackedBarSeries(props) {\n    _classCallCheck(this, StackedBarSeries);\n\n    var _this = _possibleConstructorReturn(this, (StackedBarSeries.__proto__ || Object.getPrototypeOf(StackedBarSeries)).call(this, props));\n\n    _this.renderSVG = _this.renderSVG.bind(_this);\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_this);\n    return _this;\n  }\n\n  _createClass(StackedBarSeries, [{\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas(ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor; // var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n      drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, _d3Shape.stack);\n    }\n  }, {\n    key: \"renderSVG\",\n    value: function renderSVG(moreProps) {\n      var xAccessor = moreProps.xAccessor;\n      return _react2.default.createElement(\"g\", null, svgHelper(this.props, moreProps, xAccessor, _d3Shape.stack));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return _react2.default.createElement(_GenericChartComponent2.default, {\n        clip: clip,\n        svgDraw: this.renderSVG,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: _GenericComponent.getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return StackedBarSeries;\n}(_react.Component);\n\nStackedBarSeries.propTypes = {\n  baseAt: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]).isRequired,\n  direction: _propTypes2.default.oneOf([\"up\", \"down\"]).isRequired,\n  stroke: _propTypes2.default.bool.isRequired,\n  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]).isRequired,\n  opacity: _propTypes2.default.number.isRequired,\n  fill: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,\n  className: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,\n  clip: _propTypes2.default.bool.isRequired\n};\nStackedBarSeries.defaultProps = {\n  baseAt: function baseAt(xScale, yScale\n  /* , d*/\n  ) {\n    return (0, _utils.head)(yScale.range());\n  },\n  direction: \"up\",\n  className: \"bar\",\n  stroke: true,\n  fill: \"#4682B4\",\n  opacity: 0.5,\n  width: _utils.plotDataLengthBarWidth,\n  widthRatio: 0.8,\n  clip: true,\n  swapScales: false\n};\n\nfunction identityStack() {\n  var keys = [];\n\n  function stack(data) {\n    var response = keys.map(function (key, i) {\n      // eslint-disable-next-line prefer-const\n      var arrays = data.map(function (d) {\n        // eslint-disable-next-line prefer-const\n        var array = [0, d[key]];\n        array.data = d;\n        return array;\n      });\n      arrays.key = key;\n      arrays.index = i;\n      return arrays;\n    });\n    return response;\n  }\n\n  stack.keys = function (x) {\n    if (!arguments.length) {\n      return keys;\n    }\n\n    keys = x;\n    return stack;\n  };\n\n  return stack;\n}\n\nfunction drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn) {\n  var defaultPostAction = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _utils.identity;\n  var postRotateAction = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : rotateXY;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      plotData = moreProps.plotData;\n  var bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n  drawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n\nfunction svgHelper(props, moreProps, xAccessor, stackFn) {\n  var defaultPostAction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _utils.identity;\n  var postRotateAction = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : rotateXY;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      plotData = moreProps.plotData;\n  var bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n  return getBarsSVG2(props, bars);\n}\n\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\n  var yAccessor = props.yAccessor,\n      swapScales = props.swapScales;\n  var modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\n  var modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n  var modifiedXScale = swapScales ? yScale : xScale;\n  var modifiedYScale = swapScales ? xScale : yScale;\n  var postProcessor = swapScales ? postRotateAction : defaultPostAction;\n  var bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\n  return bars;\n}\n\nvar rotateXY = exports.rotateXY = function rotateXY(array) {\n  return array.map(function (each) {\n    return _extends({}, each, {\n      x: each.y,\n      y: each.x,\n      height: each.width,\n      width: each.height\n    });\n  });\n};\n\nfunction getBarsSVG2(props, bars) {\n  /* eslint-disable react/prop-types */\n  var opacity = props.opacity;\n  /* eslint-enable react/prop-types */\n\n  return bars.map(function (d, idx) {\n    if (d.width <= 1) {\n      return _react2.default.createElement(\"line\", {\n        key: idx,\n        className: d.className,\n        stroke: d.fill,\n        x1: d.x,\n        y1: d.y,\n        x2: d.x,\n        y2: d.y + d.height\n      });\n    }\n\n    return _react2.default.createElement(\"rect\", {\n      key: idx,\n      className: d.className,\n      stroke: d.stroke,\n      fill: d.fill,\n      x: d.x,\n      y: d.y,\n      width: d.width,\n      fillOpacity: opacity,\n      height: d.height\n    });\n  });\n}\n\nfunction drawOnCanvas2(props, ctx, bars) {\n  var stroke = props.stroke;\n  var nest = (0, _d3Collection.nest)().key(function (d) {\n    return d.fill;\n  }).entries(bars);\n  nest.forEach(function (outer) {\n    var key = outer.key,\n        values = outer.values;\n\n    if ((0, _utils.head)(values).width > 1) {\n      ctx.strokeStyle = key;\n    }\n\n    var fillStyle = (0, _utils.head)(values).width <= 1 ? key : (0, _utils.hexToRGBA)(key, props.opacity);\n    ctx.fillStyle = fillStyle;\n    values.forEach(function (d) {\n      if (d.width <= 1) {\n        /* <line key={idx} className={d.className}\n        \t\t\tstroke={stroke}\n        \t\t\tfill={fill}\n        \t\t\tx1={d.x} y1={d.y}\n        \t\t\tx2={d.x} y2={d.y + d.height} />*/\n\n        /*\n        ctx.beginPath();\n        ctx.moveTo(d.x, d.y);\n        ctx.lineTo(d.x, d.y + d.height);\n        ctx.stroke();\n        */\n        ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n      } else {\n        /* <rect key={idx} className={d.className}\n        \t\tstroke={stroke}\n        \t\tfill={fill}\n        \t\tx={d.x}\n        \t\ty={d.y}\n        \t\twidth={d.width}\n        \t\theight={d.height} /> */\n\n        /*\n        ctx.beginPath();\n        ctx.rect(d.x, d.y, d.width, d.height);\n        ctx.fill();\n        */\n        ctx.fillRect(d.x, d.y, d.width, d.height);\n        if (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n      }\n    });\n  });\n}\n\nfunction getBars(props, xAccessor, yAccessor, xScale, yScale, plotData) {\n  var stack = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : identityStack;\n  var after = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : _utils.identity;\n  var baseAt = props.baseAt,\n      className = props.className,\n      fill = props.fill,\n      stroke = props.stroke,\n      _props$spaceBetweenBa = props.spaceBetweenBar,\n      spaceBetweenBar = _props$spaceBetweenBa === undefined ? 0 : _props$spaceBetweenBa;\n  var getClassName = (0, _utils.functor)(className);\n  var getFill = (0, _utils.functor)(fill);\n  var getBase = (0, _utils.functor)(baseAt);\n  var widthFunctor = (0, _utils.functor)(props.width);\n  var width = widthFunctor(props, {\n    xScale: xScale,\n    xAccessor: xAccessor,\n    plotData: plotData\n  });\n  var barWidth = Math.round(width);\n  var eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n  var offset = barWidth === 1 ? 0 : 0.5 * width;\n  var ds = plotData.map(function (each) {\n    // eslint-disable-next-line prefer-const\n    var d = {\n      appearance: {},\n      x: xAccessor(each)\n    };\n    yAccessor.forEach(function (eachYAccessor, i) {\n      var key = \"y\" + i;\n      d[key] = eachYAccessor(each);\n      var appearance = {\n        className: getClassName(each, i),\n        stroke: stroke ? getFill(each, i) : \"none\",\n        fill: getFill(each, i)\n      };\n      d.appearance[key] = appearance;\n    });\n    return d;\n  });\n  var keys = yAccessor.map(function (_, i) {\n    return \"y\" + i;\n  }); // console.log(ds);\n\n  var data = stack().keys(keys)(ds); // console.log(data);\n\n  var newData = data.map(function (each, i) {\n    var key = each.key;\n    return each.map(function (d) {\n      // eslint-disable-next-line prefer-const\n      var array = [d[0], d[1]];\n      array.data = {\n        x: d.data.x,\n        i: i,\n        appearance: d.data.appearance[key]\n      };\n      return array;\n    });\n  }); // console.log(newData);\n  // console.log(merge(newData));\n\n  var bars = (0, _d3Array.merge)(newData) // .filter(d => isDefined(d.y))\n  .map(function (d) {\n    // let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n    var y = yScale(d[1]);\n    /* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n    \t\t? yScale(d.y0) - y\n    \t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n\n    var h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]); // console.log(d.y, yScale.domain(), yScale.range())\n    // let h = ;\n    // if (d.y < 0) h = -h;\n    // console.log(d, y, h)\n\n    if (h < 0) {\n      y = y + h;\n      h = -h;\n    } // console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n\n    /* console.log(d.series, d.datum.date, d.x,\n    \t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n\n\n    return _extends({}, d.data.appearance, {\n      // series: d.series,\n      // i: d.x,\n      x: Math.round(xScale(d.data.x) - width / 2),\n      y: y,\n      groupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\n      groupWidth: Math.round(eachBarWidth),\n      offset: Math.round(offset),\n      height: h,\n      width: barWidth\n    });\n  }).filter(function (bar) {\n    return !isNaN(bar.y);\n  });\n  return after(bars);\n}\n\nexports.default = StackedBarSeries;","map":{"version":3,"sources":["../../../src/lib/series/StackedBarSeries.js"],"names":["StackedBarSeries","ctx","moreProps","xAccessor","drawOnCanvasHelper","svgHelper","clip","baseAt","direction","stroke","width","opacity","fill","className","isRequired","yScale","widthRatio","swapScales","identityStack","keys","response","arrays","array","d","stack","arguments","defaultPostAction","postRotateAction","rotateXY","xScale","plotData","bars","doStuff","drawOnCanvas2","Array","getBarsSVG2","yAccessor","props","modifiedYAccessor","convertToArray","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","getBars","x","each","y","height","nest","key","values","outer","fillStyle","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","eachBarWidth","offset","ds","appearance","eachYAccessor","data","newData","i","h","groupOffset","groupWidth","isNaN","bar"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { nest as d3Nest } from \"d3-collection\";\nimport { merge } from \"d3-array\";\nimport { stack as d3Stack } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport { identity, hexToRGBA, head, functor, plotDataLengthBarWidth } from \"../utils\";\n\nclass StackedBarSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\t// var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tdrawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\n\t\treturn <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n\t}\n\trender() {\n\t\tconst { clip } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tclip={clip}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n}\n\nStackedBarSeries.propTypes = {\n\tbaseAt: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func,\n\t]).isRequired,\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]).isRequired,\n\tstroke: PropTypes.bool.isRequired,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func\n\t]).isRequired,\n\topacity: PropTypes.number.isRequired,\n\tfill: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclip: PropTypes.bool.isRequired,\n};\n\nStackedBarSeries.defaultProps = {\n\tbaseAt: (xScale, yScale/* , d*/) => head(yScale.range()),\n\tdirection: \"up\",\n\tclassName: \"bar\",\n\tstroke: true,\n\tfill: \"#4682B4\",\n\topacity: 0.5,\n\twidth: plotDataLengthBarWidth,\n\twidthRatio: 0.8,\n\tclip: true,\n\tswapScales: false,\n};\n\nexport function identityStack() {\n\tlet keys = [];\n\tfunction stack(data) {\n\t\tconst response = keys.map((key, i) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet arrays = data.map(d => {\n\t\t\t\t// eslint-disable-next-line prefer-const\n\t\t\t\tlet array = [0, d[key]];\n\t\t\t\tarray.data = d;\n\t\t\t\treturn array;\n\t\t\t});\n\t\t\tarrays.key = key;\n\t\t\tarrays.index = i;\n\t\t\treturn arrays;\n\t\t});\n\t\treturn response;\n\t}\n\tstack.keys = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn keys;\n\t\t}\n\t\tkeys = x;\n\t\treturn stack;\n\t};\n\treturn stack;\n}\n\n\nexport function drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\n\tdrawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n\treturn Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\treturn getBarsSVG2(props, bars);\n}\n\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\n\tconst { yAccessor, swapScales } = props;\n\n\tconst modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\n\tconst modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n\tconst modifiedXScale = swapScales ? yScale : xScale;\n\tconst modifiedYScale = swapScales ? xScale : yScale;\n\n\tconst postProcessor =  swapScales ? postRotateAction : defaultPostAction;\n\n\tconst bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\n\n\treturn bars;\n}\n\nexport const rotateXY = (array) => array.map(each => {\n\treturn {\n\t\t...each,\n\t\tx: each.y,\n\t\ty: each.x,\n\t\theight: each.width,\n\t\twidth: each.height\n\t};\n});\n\nexport function getBarsSVG2(props, bars) {\n\t/* eslint-disable react/prop-types */\n\tconst { opacity } = props;\n\t/* eslint-enable react/prop-types */\n\n\treturn bars.map((d, idx) => {\n\t\tif (d.width <= 1) {\n\t\t\treturn <line key={idx} className={d.className}\n\t\t\t\tstroke={d.fill}\n\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\tx2={d.x} y2={d.y + d.height} />;\n\t\t}\n\t\treturn <rect key={idx} className={d.className}\n\t\t\tstroke={d.stroke}\n\t\t\tfill={d.fill}\n\t\t\tx={d.x}\n\t\t\ty={d.y}\n\t\t\twidth={d.width}\n\t\t\tfillOpacity={opacity}\n\t\t\theight={d.height} />;\n\t});\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n\tconst { stroke } = props;\n\n\tconst nest = d3Nest()\n\t\t.key(d => d.fill)\n\t\t.entries(bars);\n\n\tnest.forEach(outer => {\n\t\tconst { key, values } = outer;\n\t\tif (head(values).width > 1) {\n\t\t\tctx.strokeStyle = key;\n\t\t}\n\t\tconst fillStyle = head(values).width <= 1\n\t\t\t? key\n\t\t\t: hexToRGBA(key, props.opacity);\n\t\tctx.fillStyle = fillStyle;\n\n\t\tvalues.forEach(d => {\n\t\t\tif (d.width <= 1) {\n\t\t\t\t/* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n\t\t\t} else {\n\t\t\t\t/* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x, d.y, d.width, d.height);\n\t\t\t\tif (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n\t\t\t}\n\n\t\t});\n\t});\n}\n\nexport function getBars(props, xAccessor, yAccessor, xScale, yScale, plotData, stack = identityStack, after = identity) {\n\tconst { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n\tconst getClassName = functor(className);\n\tconst getFill = functor(fill);\n\tconst getBase = functor(baseAt);\n\n\tconst widthFunctor = functor(props.width);\n\tconst width = widthFunctor(props, {\n\t\txScale,\n\t\txAccessor,\n\t\tplotData\n\t});\n\n\tconst barWidth = Math.round(width);\n\n\tconst eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n\tconst offset = (barWidth === 1 ? 0 : 0.5 * width);\n\n\tconst ds = plotData\n\t\t.map(each => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet d = {\n\t\t\t\tappearance: {\n\t\t\t\t},\n\t\t\t\tx: xAccessor(each),\n\t\t\t};\n\t\t\tyAccessor.forEach((eachYAccessor, i) => {\n\t\t\t\tconst key = `y${i}`;\n\t\t\t\td[key] = eachYAccessor(each);\n\t\t\t\tconst appearance = {\n\t\t\t\t\tclassName: getClassName(each, i),\n\t\t\t\t\tstroke: stroke ? getFill(each, i) : \"none\",\n\t\t\t\t\tfill: getFill(each, i),\n\t\t\t\t};\n\t\t\t\td.appearance[key] = appearance;\n\t\t\t});\n\t\t\treturn d;\n\t\t});\n\n\tconst keys = yAccessor.map((_, i) => `y${i}`);\n\n\t// console.log(ds);\n\n\tconst data = stack().keys(keys)(ds);\n\n\t// console.log(data);\n\n\tconst newData = data.map((each, i) => {\n\t\tconst key = each.key;\n\t\treturn each.map((d) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet array = [d[0], d[1]];\n\t\t\tarray.data = {\n\t\t\t\tx: d.data.x,\n\t\t\t\ti,\n\t\t\t\tappearance: d.data.appearance[key]\n\t\t\t};\n\t\t\treturn array;\n\t\t});\n\t});\n\t// console.log(newData);\n\t// console.log(merge(newData));\n\n\tconst bars = merge(newData)\n\t\t// .filter(d => isDefined(d.y))\n\t\t.map(d => {\n\t\t\t// let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n\t\t\tlet y = yScale(d[1]);\n\t\t\t/* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n\t\t\tlet h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n\t\t\t// console.log(d.y, yScale.domain(), yScale.range())\n\t\t\t// let h = ;\n\t\t\t// if (d.y < 0) h = -h;\n\t\t\t// console.log(d, y, h)\n\t\t\tif (h < 0) {\n\t\t\t\ty = y + h;\n\t\t\t\th = -h;\n\t\t\t}\n\t\t\t// console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n\t\t\t/* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n\t\t\treturn {\n\t\t\t\t...d.data.appearance,\n\t\t\t\t// series: d.series,\n\t\t\t\t// i: d.x,\n\t\t\t\tx: Math.round(xScale(d.data.x) - width / 2),\n\t\t\t\ty: y,\n\t\t\t\tgroupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\n\t\t\t\tgroupWidth: Math.round(eachBarWidth),\n\t\t\t\toffset: Math.round(offset),\n\t\t\t\theight: h,\n\t\t\t\twidth: barWidth,\n\t\t\t};\n\t\t})\n\t\t.filter(bar => !isNaN(bar.y));\n\n\treturn after(bars);\n}\n\nexport default StackedBarSeries;\n"]},"metadata":{},"sourceType":"script"}