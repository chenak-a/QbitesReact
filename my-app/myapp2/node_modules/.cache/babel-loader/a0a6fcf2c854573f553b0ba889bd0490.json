{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.Kagi;\n\n  var dateAccessor = function dateAccessor(d) {\n    return d.date;\n  };\n\n  var dateMutator = function dateMutator(d, date) {\n    d.date = date;\n  };\n\n  function calculator(data) {\n    var _options = options,\n        reversalType = _options.reversalType,\n        windowSize = _options.windowSize,\n        reversal = _options.reversal,\n        sourcePath = _options.sourcePath;\n    var source = (0, _utils.path)(sourcePath);\n    var reversalThreshold = void 0;\n\n    if (reversalType === \"ATR\") {\n      // calculateATR(rawData, period);\n      var atrAlgorithm = (0, _atr2.default)().options({\n        windowSize: windowSize\n      });\n      var atrCalculator = (0, _utils.merge)().algorithm(atrAlgorithm).merge(function (d, c) {\n        d[\"atr\" + windowSize] = c;\n      });\n      atrCalculator(data);\n\n      reversalThreshold = function reversalThreshold(d) {\n        return d[\"atr\" + windowSize];\n      };\n    } else {\n      reversalThreshold = (0, _utils.functor)(reversal);\n    }\n\n    var kagiData = [];\n    var prevPeak = void 0,\n        prevTrough = void 0,\n        direction = void 0;\n    var line = {};\n    data.forEach(function (d) {\n      if ((0, _utils.isNotDefined)(line.from)) {\n        dateMutator(line, dateAccessor(d));\n        line.from = dateAccessor(d);\n        if (!line.open) line.open = d.open;\n        line.high = d.high;\n        line.low = d.low;\n        if (!line.close) line.close = source(d);\n        line.startOfYear = d.startOfYear;\n        line.startOfQuarter = d.startOfQuarter;\n        line.startOfMonth = d.startOfMonth;\n        line.startOfWeek = d.startOfWeek;\n      }\n\n      if (!line.startOfYear) {\n        line.startOfYear = d.startOfYear;\n\n        if (line.startOfYear) {\n          line.date = d.date; // line.displayDate = d.displayDate;\n        }\n      }\n\n      if (!line.startOfQuarter) {\n        line.startOfQuarter = d.startOfQuarter;\n\n        if (line.startOfQuarter && !line.startOfYear) {\n          line.date = d.date; // line.displayDate = d.displayDate;\n        }\n      }\n\n      if (!line.startOfMonth) {\n        line.startOfMonth = d.startOfMonth;\n\n        if (line.startOfMonth && !line.startOfQuarter) {\n          line.date = d.date; // line.displayDate = d.displayDate;\n        }\n      }\n\n      if (!line.startOfWeek) {\n        line.startOfWeek = d.startOfWeek;\n\n        if (line.startOfWeek && !line.startOfMonth) {\n          line.date = d.date; // line.displayDate = d.displayDate;\n        }\n      }\n\n      line.volume = (line.volume || 0) + d.volume;\n      line.high = Math.max(line.high, d.high);\n      line.low = Math.min(line.low, d.low);\n      line.to = dateAccessor(d);\n      var priceMovement = source(d) - line.close; // console.log(source(d), priceMovement)\n\n      if (line.close >= line.open\n      /* going up */\n      && priceMovement > 0\n      /* and moving in same direction */\n      || line.close < line.open\n      /* going down */\n      && priceMovement < 0\n      /* and moving in same direction */\n      ) {\n          line.close = source(d);\n\n          if (prevTrough && line.close < prevTrough) {\n            // going below the prevTrough, so change from yang to yin\n            // A yin line forms when a Kagi line breaks below the prior trough.\n            line.changePoint = prevTrough;\n\n            if (line.startAs !== \"yin\") {\n              line.changeTo = \"yin\"; // line.startAs = \"yang\";\n            }\n          }\n\n          if (prevPeak && line.close > prevPeak) {\n            // going above the prevPeak, so change from yin to yang\n            // A yang line forms when a Kagi line breaks above the prior peak\n            line.changePoint = prevPeak;\n\n            if (line.startAs !== \"yang\") {\n              line.changeTo = \"yang\"; // line.startAs = \"yin\";\n            }\n          }\n        } else if (line.close >= line.open\n      /* going up */\n      && priceMovement < 0\n      /* and moving in other direction */\n      && Math.abs(priceMovement) > reversalThreshold(d)\n      /* and the movement is big enough for reversal */\n      || line.close < line.open\n      /* going down */\n      && priceMovement > 0\n      /* and moving in other direction */\n      && Math.abs(priceMovement) > reversalThreshold(d)\n      /* and the movement is big enough for reversal */\n      ) {\n          // reverse direction\n          var nextLineOpen = line.close;\n          direction = (line.close - line.open) / Math.abs(line.close - line.open);\n          var nextChangePoint = void 0,\n              nextChangeTo = void 0;\n\n          if (direction < 0\n          /* if direction so far has been -ve*/\n          ) {\n              // compare with line.close becomes prevTrough\n              if ((0, _utils.isNotDefined)(prevPeak)) prevPeak = line.open;\n              prevTrough = line.close;\n\n              if (source(d) > prevPeak) {\n                nextChangePoint = prevPeak;\n                nextChangeTo = \"yang\";\n              }\n            } else {\n            if ((0, _utils.isNotDefined)(prevTrough)) prevTrough = line.open;\n            prevPeak = line.close;\n\n            if (source(d) < prevTrough) {\n              nextChangePoint = prevTrough;\n              nextChangeTo = \"yin\";\n            }\n          }\n\n          if ((0, _utils.isNotDefined)(line.startAs)) {\n            line.startAs = direction > 0 ? \"yang\" : \"yin\";\n          }\n\n          var startAs = line.changeTo || line.startAs;\n          line.added = true;\n          kagiData.push(line);\n          direction = -1 * direction; // direction is reversed\n\n          line = _extends({}, line);\n          line.open = nextLineOpen;\n          line.close = source(d);\n          line.startAs = startAs;\n          line.changePoint = nextChangePoint;\n          line.changeTo = nextChangeTo;\n          line.added = false;\n          line.from = undefined;\n          line.volume = 0;\n        } else {// console.log(\"MOVING IN REV DIR BUT..\", line.open, line.close, source(d));\n      }\n\n      line.current = source(d);\n      var dir = line.close - line.open;\n      dir = dir === 0 ? 1 : dir / Math.abs(dir);\n      line.reverseAt = dir > 0 ? line.close - reversalThreshold(d) : line.open - reversalThreshold(d);\n    });\n    if (!line.added) kagiData.push(line);\n    return kagiData;\n  }\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.Kagi, x);\n    return calculator;\n  };\n\n  calculator.dateMutator = function (x) {\n    if (!arguments.length) return dateMutator;\n    dateMutator = x;\n    return calculator;\n  };\n\n  calculator.dateAccessor = function (x) {\n    if (!arguments.length) return dateAccessor;\n    dateAccessor = x;\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _atr = require(\"./atr\");\n\nvar _atr2 = _interopRequireDefault(_atr);\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","map":{"version":3,"sources":["../../../src/lib/calculator/kagi.js"],"names":["options","dateAccessor","d","dateMutator","reversalType","windowSize","reversal","sourcePath","source","reversalThreshold","atrAlgorithm","atrCalculator","kagiData","prevPeak","prevTrough","direction","line","data","Math","priceMovement","nextLineOpen","nextChangePoint","nextChangeTo","startAs","dir","calculator","arguments"],"mappings":"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","sourcesContent":["\n\nimport { merge, isNotDefined, path, functor } from \"../utils\";\nimport atr from \"./atr\";\n\nimport { Kagi as defaultOptions } from \"./defaultOptionsForComputation\";\n\nexport default function() {\n\n\tlet options = defaultOptions;\n\tlet dateAccessor = d => d.date;\n\tlet dateMutator = (d, date) => { d.date = date; };\n\n\tfunction calculator(data) {\n\t\tconst { reversalType, windowSize, reversal, sourcePath } = options;\n\n\t\tconst source = path(sourcePath);\n\t\tlet reversalThreshold;\n\n\t\tif (reversalType === \"ATR\") {\n\t\t\t// calculateATR(rawData, period);\n\t\t\tconst atrAlgorithm = atr().options({ windowSize });\n\n\t\t\tconst atrCalculator = merge()\n\t\t\t\t.algorithm(atrAlgorithm)\n\t\t\t\t.merge((d, c) => { d[\"atr\" + windowSize] = c; } );\n\n\t\t\tatrCalculator(data);\n\t\t\treversalThreshold = d => d[\"atr\" + windowSize];\n\t\t} else {\n\t\t\treversalThreshold = functor(reversal);\n\t\t}\n\n\t\tconst kagiData = [];\n\n\t\tlet prevPeak, prevTrough, direction;\n\t\tlet line = {};\n\n\t\tdata.forEach(function(d) {\n\t\t\tif (isNotDefined(line.from)) {\n\t\t\t\tdateMutator(line, dateAccessor(d));\n\t\t\t\tline.from = dateAccessor(d);\n\n\t\t\t\tif (!line.open) line.open = d.open;\n\t\t\t\tline.high = d.high;\n\t\t\t\tline.low = d.low;\n\t\t\t\tif (!line.close) line.close = source(d);\n\t\t\t\tline.startOfYear = d.startOfYear;\n\t\t\t\tline.startOfQuarter = d.startOfQuarter;\n\t\t\t\tline.startOfMonth = d.startOfMonth;\n\t\t\t\tline.startOfWeek = d.startOfWeek;\n\t\t\t}\n\n\t\t\tif (!line.startOfYear) {\n\t\t\t\tline.startOfYear = d.startOfYear;\n\t\t\t\tif (line.startOfYear) {\n\t\t\t\t\tline.date = d.date;\n\t\t\t\t\t// line.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!line.startOfQuarter) {\n\t\t\t\tline.startOfQuarter = d.startOfQuarter;\n\t\t\t\tif (line.startOfQuarter && !line.startOfYear) {\n\t\t\t\t\tline.date = d.date;\n\t\t\t\t\t// line.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!line.startOfMonth) {\n\t\t\t\tline.startOfMonth = d.startOfMonth;\n\t\t\t\tif (line.startOfMonth && !line.startOfQuarter) {\n\t\t\t\t\tline.date = d.date;\n\t\t\t\t\t// line.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line.startOfWeek) {\n\t\t\t\tline.startOfWeek = d.startOfWeek;\n\t\t\t\tif (line.startOfWeek && !line.startOfMonth) {\n\t\t\t\t\tline.date = d.date;\n\t\t\t\t\t// line.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tline.volume = (line.volume || 0) + d.volume;\n\t\t\tline.high = Math.max(line.high, d.high);\n\t\t\tline.low = Math.min(line.low, d.low);\n\t\t\tline.to = dateAccessor(d);\n\n\t\t\tconst priceMovement = (source(d) - line.close);\n\n\t\t\t// console.log(source(d), priceMovement)\n\t\t\tif ((line.close >= line.open /* going up */ && priceMovement > 0 /* and moving in same direction */)\n\t\t\t\t\t|| (line.close < line.open /* going down */ && priceMovement < 0 /* and moving in same direction */)) {\n\t\t\t\tline.close = source(d);\n\t\t\t\tif (prevTrough && line.close < prevTrough) {\n\t\t\t\t\t// going below the prevTrough, so change from yang to yin\n\t\t\t\t\t// A yin line forms when a Kagi line breaks below the prior trough.\n\t\t\t\t\tline.changePoint = prevTrough;\n\t\t\t\t\tif (line.startAs !== \"yin\") {\n\t\t\t\t\t\tline.changeTo = \"yin\";\n\t\t\t\t\t\t// line.startAs = \"yang\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (prevPeak && line.close > prevPeak) {\n\t\t\t\t\t// going above the prevPeak, so change from yin to yang\n\t\t\t\t\t// A yang line forms when a Kagi line breaks above the prior peak\n\t\t\t\t\tline.changePoint = prevPeak;\n\t\t\t\t\tif (line.startAs !== \"yang\") {\n\t\t\t\t\t\tline.changeTo = \"yang\";\n\t\t\t\t\t\t// line.startAs = \"yin\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ((line.close >= line.open /* going up */\n\t\t\t\t\t\t\t&& priceMovement < 0 /* and moving in other direction */\n\t\t\t\t\t\t\t&& Math.abs(priceMovement) > reversalThreshold(d) /* and the movement is big enough for reversal */)\n\t\t\t\t\t|| (line.close < line.open /* going down */\n\t\t\t\t\t\t\t&& priceMovement > 0 /* and moving in other direction */\n\t\t\t\t\t\t\t&& Math.abs(priceMovement) > reversalThreshold(d) /* and the movement is big enough for reversal */)) {\n\t\t\t\t// reverse direction\n\t\t\t\tconst nextLineOpen = line.close;\n\n\t\t\t\tdirection = (line.close - line.open) / Math.abs(line.close - line.open);\n\n\t\t\t\tlet nextChangePoint, nextChangeTo;\n\t\t\t\tif (direction < 0 /* if direction so far has been -ve*/) {\n\t\t\t\t\t// compare with line.close becomes prevTrough\n\t\t\t\t\tif (isNotDefined(prevPeak)) prevPeak = line.open;\n\t\t\t\t\tprevTrough = line.close;\n\t\t\t\t\tif (source(d) > prevPeak) {\n\t\t\t\t\t\tnextChangePoint = prevPeak;\n\t\t\t\t\t\tnextChangeTo = \"yang\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isNotDefined(prevTrough)) prevTrough = line.open;\n\t\t\t\t\tprevPeak = line.close;\n\t\t\t\t\tif (source(d) < prevTrough) {\n\t\t\t\t\t\tnextChangePoint = prevTrough;\n\t\t\t\t\t\tnextChangeTo = \"yin\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isNotDefined(line.startAs)) {\n\t\t\t\t\tline.startAs = direction > 0 ? \"yang\" : \"yin\";\n\t\t\t\t}\n\n\t\t\t\tconst startAs = line.changeTo || line.startAs;\n\t\t\t\tline.added = true;\n\t\t\t\tkagiData.push(line);\n\t\t\t\tdirection = -1 * direction; // direction is reversed\n\n\t\t\t\tline = { ...line };\n\t\t\t\tline.open = nextLineOpen;\n\t\t\t\tline.close = source(d);\n\t\t\t\tline.startAs = startAs;\n\t\t\t\tline.changePoint = nextChangePoint;\n\t\t\t\tline.changeTo = nextChangeTo;\n\t\t\t\tline.added = false;\n\t\t\t\tline.from = undefined;\n\t\t\t\tline.volume = 0;\n\t\t\t} else {\n\t\t\t\t// console.log(\"MOVING IN REV DIR BUT..\", line.open, line.close, source(d));\n\t\t\t}\n\t\t\tline.current = source(d);\n\t\t\tlet dir = line.close - line.open;\n\t\t\tdir = dir === 0 ? 1 : dir / Math.abs(dir);\n\t\t\tline.reverseAt = dir > 0 ? line.close - reversalThreshold(d) : line.open - reversalThreshold(d);\n\t\t});\n\t\tif (!line.added) kagiData.push(line);\n\n\t\treturn kagiData;\n\t}\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\tcalculator.dateMutator = function(x) {\n\t\tif (!arguments.length) return dateMutator;\n\t\tdateMutator = x;\n\t\treturn calculator;\n\t};\n\tcalculator.dateAccessor = function(x) {\n\t\tif (!arguments.length) return dateAccessor;\n\t\tdateAccessor = x;\n\t\treturn calculator;\n\t};\n\treturn calculator;\n}\n"]},"metadata":{},"sourceType":"script"}