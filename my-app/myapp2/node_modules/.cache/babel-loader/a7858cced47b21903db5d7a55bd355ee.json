{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.getNewXY = getNewXY;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require(\"../../utils\");\n\nvar _ChartDataUtil = require(\"../../utils/ChartDataUtil\");\n\nvar _utils2 = require(\"../utils\");\n\nvar _HoverTextNearMouse = require(\"../components/HoverTextNearMouse\");\n\nvar _HoverTextNearMouse2 = _interopRequireDefault(_HoverTextNearMouse);\n\nvar _LinearRegressionChannelWithArea = require(\"../components/LinearRegressionChannelWithArea\");\n\nvar _LinearRegressionChannelWithArea2 = _interopRequireDefault(_LinearRegressionChannelWithArea);\n\nvar _ClickableCircle = require(\"../components/ClickableCircle\");\n\nvar _ClickableCircle2 = _interopRequireDefault(_ClickableCircle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EachLinearRegressionChannel = function (_Component) {\n  _inherits(EachLinearRegressionChannel, _Component);\n\n  function EachLinearRegressionChannel(props) {\n    _classCallCheck(this, EachLinearRegressionChannel);\n\n    var _this = _possibleConstructorReturn(this, (EachLinearRegressionChannel.__proto__ || Object.getPrototypeOf(EachLinearRegressionChannel)).call(this, props));\n\n    _this.handleEdge1Drag = _this.handleEdge1Drag.bind(_this);\n    _this.handleEdge2Drag = _this.handleEdge2Drag.bind(_this);\n    _this.handleHover = _this.handleHover.bind(_this);\n    _this.isHover = _utils2.isHover.bind(_this);\n    _this.saveNodeType = _utils2.saveNodeType.bind(_this);\n    _this.nodes = {};\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachLinearRegressionChannel, [{\n    key: \"handleEdge1Drag\",\n    value: function handleEdge1Drag(moreProps) {\n      var _props = this.props,\n          index = _props.index,\n          onDrag = _props.onDrag,\n          snapTo = _props.snapTo;\n      var x2Value = this.props.x2Value;\n\n      var _getNewXY = getNewXY(moreProps, snapTo),\n          _getNewXY2 = _slicedToArray(_getNewXY, 1),\n          x1Value = _getNewXY2[0];\n\n      onDrag(index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    }\n  }, {\n    key: \"handleEdge2Drag\",\n    value: function handleEdge2Drag(moreProps) {\n      var _props2 = this.props,\n          index = _props2.index,\n          onDrag = _props2.onDrag,\n          snapTo = _props2.snapTo;\n      var x1Value = this.props.x1Value;\n\n      var _getNewXY3 = getNewXY(moreProps, snapTo),\n          _getNewXY4 = _slicedToArray(_getNewXY3, 1),\n          x2Value = _getNewXY4[0];\n\n      onDrag(index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(moreProps) {\n      if (this.state.hover !== moreProps.hovering) {\n        this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          x1Value = _props3.x1Value,\n          x2Value = _props3.x2Value,\n          appearance = _props3.appearance,\n          edgeInteractiveCursor = _props3.edgeInteractiveCursor,\n          hoverText = _props3.hoverText,\n          interactive = _props3.interactive,\n          selected = _props3.selected,\n          onDragComplete = _props3.onDragComplete;\n      var stroke = appearance.stroke,\n          strokeWidth = appearance.strokeWidth,\n          strokeOpacity = appearance.strokeOpacity,\n          fill = appearance.fill,\n          fillOpacity = appearance.fillOpacity,\n          r = appearance.r,\n          edgeStrokeWidth = appearance.edgeStrokeWidth,\n          edgeFill = appearance.edgeFill,\n          edgeStroke = appearance.edgeStroke;\n      var hover = this.state.hover;\n      var hoverHandler = interactive ? {\n        onHover: this.handleHover,\n        onUnHover: this.handleHover\n      } : {};\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = _objectWithoutProperties(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      return _react2.default.createElement(\"g\", null, _react2.default.createElement(_LinearRegressionChannelWithArea2.default, _extends({\n        ref: this.saveNodeType(\"area\"),\n        selected: selected || hover\n      }, hoverHandler, {\n        x1Value: x1Value,\n        x2Value: x2Value,\n        fill: fill,\n        stroke: stroke,\n        strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth,\n        strokeOpacity: strokeOpacity,\n        fillOpacity: fillOpacity\n      })), _react2.default.createElement(_ClickableCircle2.default, {\n        ref: this.saveNodeType(\"edge1\"),\n        show: selected || hover,\n        xyProvider: (0, _LinearRegressionChannelWithArea.edge1Provider)(this.props),\n        r: r,\n        fill: edgeFill,\n        stroke: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge1Drag,\n        onDragComplete: onDragComplete\n      }), _react2.default.createElement(_ClickableCircle2.default, {\n        ref: this.saveNodeType(\"edge2\"),\n        show: selected || hover,\n        xyProvider: (0, _LinearRegressionChannelWithArea.edge2Provider)(this.props),\n        r: r,\n        fill: edgeFill,\n        stroke: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge2Drag,\n        onDragComplete: onDragComplete\n      }), _react2.default.createElement(_HoverTextNearMouse2.default, _extends({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachLinearRegressionChannel;\n}(_react.Component);\n\nfunction getNewXY(moreProps, snapTo) {\n  var xScale = moreProps.xScale,\n      xAccessor = moreProps.xAccessor,\n      plotData = moreProps.plotData,\n      mouseXY = moreProps.mouseXY;\n  var currentItem = (0, _ChartDataUtil.getCurrentItem)(xScale, xAccessor, mouseXY, plotData);\n  var x = xAccessor(currentItem);\n  var y = snapTo(currentItem);\n  return [x, y];\n}\n\nEachLinearRegressionChannel.propTypes = {\n  defaultClassName: _propTypes2.default.string,\n  x1Value: _propTypes2.default.any.isRequired,\n  x2Value: _propTypes2.default.any.isRequired,\n  index: _propTypes2.default.number,\n  appearance: _propTypes2.default.shape({\n    stroke: _propTypes2.default.string.isRequired,\n    fillOpacity: _propTypes2.default.number.isRequired,\n    strokeOpacity: _propTypes2.default.number.isRequired,\n    strokeWidth: _propTypes2.default.number.isRequired,\n    fill: _propTypes2.default.string.isRequired,\n    edgeStrokeWidth: _propTypes2.default.number.isRequired,\n    edgeStroke: _propTypes2.default.string.isRequired,\n    edgeFill: _propTypes2.default.string.isRequired,\n    r: _propTypes2.default.number.isRequired\n  }).isRequired,\n  edgeInteractiveCursor: _propTypes2.default.string,\n  onDrag: _propTypes2.default.func.isRequired,\n  onDragComplete: _propTypes2.default.func.isRequired,\n  snapTo: _propTypes2.default.func,\n  interactive: _propTypes2.default.bool.isRequired,\n  selected: _propTypes2.default.bool.isRequired,\n  hoverText: _propTypes2.default.object.isRequired\n};\nEachLinearRegressionChannel.defaultProps = {\n  onDrag: _utils.noop,\n  onDragComplete: _utils.noop,\n  appearance: {\n    stroke: \"#000000\",\n    fillOpacity: 0.7,\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  interactive: true,\n  selected: false,\n  hoverText: _extends({}, _HoverTextNearMouse2.default.defaultProps, {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 175,\n    text: \"Click and drag the edge circles\"\n  })\n};\nexports.default = EachLinearRegressionChannel;","map":{"version":3,"sources":["../../../../src/lib/interactive/wrapper/EachLinearRegressionChannel.js"],"names":["EachLinearRegressionChannel","hover","moreProps","index","onDrag","snapTo","x2Value","x1Value","getNewXY","hovering","appearance","edgeInteractiveCursor","hoverText","interactive","selected","onDragComplete","stroke","strokeWidth","strokeOpacity","fill","fillOpacity","r","edgeStrokeWidth","edgeFill","edgeStroke","hoverHandler","onHover","onUnHover","hoverTextEnabled","hoverTextSelected","hoverTextUnselected","restHoverTextProps","xScale","xAccessor","plotData","mouseXY","currentItem","x","y","defaultClassName","isRequired","enable","bgHeight","bgWidth","text"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { noop } from \"../../utils\";\nimport { getCurrentItem } from \"../../utils/ChartDataUtil\";\nimport { saveNodeType, isHover } from \"../utils\";\n\nimport HoverTextNearMouse from \"../components/HoverTextNearMouse\";\nimport {\n\tdefault as LinearRegressionChannelWithArea,\n\tedge1Provider,\n\tedge2Provider\n} from \"../components/LinearRegressionChannelWithArea\";\n\nimport ClickableCircle from \"../components/ClickableCircle\";\n\nclass EachLinearRegressionChannel extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleEdge1Drag = this.handleEdge1Drag.bind(this);\n\t\tthis.handleEdge2Drag = this.handleEdge2Drag.bind(this);\n\n\t\tthis.handleHover = this.handleHover.bind(this);\n\n\t\tthis.isHover = isHover.bind(this);\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.nodes = {};\n\n\t\tthis.state = {\n\t\t\thover: false,\n\t\t};\n\t}\n\thandleEdge1Drag(moreProps) {\n\t\tconst { index, onDrag, snapTo } = this.props;\n\t\tconst {\n\t\t\tx2Value,\n\t\t} = this.props;\n\n\t\tconst [x1Value] = getNewXY(moreProps, snapTo);\n\n\t\tonDrag(index, {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t});\n\t}\n\thandleEdge2Drag(moreProps) {\n\t\tconst { index, onDrag, snapTo } = this.props;\n\t\tconst {\n\t\t\tx1Value,\n\t\t} = this.props;\n\n\t\tconst [x2Value] = getNewXY(moreProps, snapTo);\n\n\t\tonDrag(index, {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t});\n\t}\n\thandleHover(moreProps) {\n\t\tif (this.state.hover !== moreProps.hovering) {\n\t\t\tthis.setState({\n\t\t\t\thover: moreProps.hovering\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\tconst {\n\t\t\tx1Value,\n\t\t\tx2Value,\n\t\t\tappearance,\n\t\t\tedgeInteractiveCursor,\n\t\t\thoverText,\n\t\t\tinteractive,\n\t\t\tselected,\n\t\t\tonDragComplete,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tstroke,\n\t\t\tstrokeWidth,\n\t\t\tstrokeOpacity,\n\t\t\tfill,\n\t\t\tfillOpacity,\n\t\t\tr,\n\t\t\tedgeStrokeWidth,\n\t\t\tedgeFill,\n\t\t\tedgeStroke,\n\t\t} = appearance;\n\t\tconst { hover } = this.state;\n\n\t\tconst hoverHandler = interactive\n\t\t\t? { onHover: this.handleHover, onUnHover: this.handleHover }\n\t\t\t: {};\n\n\t\tconst {\n\t\t\tenable: hoverTextEnabled,\n\t\t\tselectedText: hoverTextSelected,\n\t\t\ttext: hoverTextUnselected,\n\t\t\t...restHoverTextProps\n\t\t} = hoverText;\n\n\t\treturn <g>\n\t\t\t<LinearRegressionChannelWithArea\n\t\t\t\tref={this.saveNodeType(\"area\")}\n\t\t\t\tselected={selected || hover}\n\t\t\t\t{...hoverHandler}\n\n\t\t\t\tx1Value={x1Value}\n\t\t\t\tx2Value={x2Value}\n\t\t\t\tfill={fill}\n\t\t\t\tstroke={stroke}\n\t\t\t\tstrokeWidth={(hover || selected) ? strokeWidth + 1 : strokeWidth}\n\t\t\t\tstrokeOpacity={strokeOpacity}\n\t\t\t\tfillOpacity={fillOpacity} />\n\t\t\t<ClickableCircle\n\t\t\t\tref={this.saveNodeType(\"edge1\")}\n\t\t\t\tshow={selected || hover}\n\t\t\t\txyProvider={edge1Provider(this.props)}\n\t\t\t\tr={r}\n\t\t\t\tfill={edgeFill}\n\t\t\t\tstroke={edgeStroke}\n\t\t\t\tstrokeWidth={edgeStrokeWidth}\n\t\t\t\tinteractiveCursorClass={edgeInteractiveCursor}\n\t\t\t\tonDrag={this.handleEdge1Drag}\n\t\t\t\tonDragComplete={onDragComplete} />\n\t\t\t<ClickableCircle\n\t\t\t\tref={this.saveNodeType(\"edge2\")}\n\t\t\t\tshow={selected || hover}\n\t\t\t\txyProvider={edge2Provider(this.props)}\n\t\t\t\tr={r}\n\t\t\t\tfill={edgeFill}\n\t\t\t\tstroke={edgeStroke}\n\t\t\t\tstrokeWidth={edgeStrokeWidth}\n\t\t\t\tinteractiveCursorClass={edgeInteractiveCursor}\n\t\t\t\tonDrag={this.handleEdge2Drag}\n\t\t\t\tonDragComplete={onDragComplete} />\n\t\t\t<HoverTextNearMouse\n\t\t\t\tshow={hoverTextEnabled && hover}\n\t\t\t\t{...restHoverTextProps}\n\t\t\t\ttext={selected ? hoverTextSelected : hoverTextUnselected}\n\t\t\t/>\n\t\t</g>;\n\t}\n}\n\nexport function getNewXY(moreProps, snapTo) {\n\tconst { xScale, xAccessor, plotData, mouseXY } = moreProps;\n\n\tconst currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n\tconst x = xAccessor(currentItem);\n\tconst y = snapTo(currentItem);\n\n\treturn [x, y];\n}\n\nEachLinearRegressionChannel.propTypes = {\n\tdefaultClassName: PropTypes.string,\n\n\tx1Value: PropTypes.any.isRequired,\n\tx2Value: PropTypes.any.isRequired,\n\n\tindex: PropTypes.number,\n\n\tappearance: PropTypes.shape({\n\t\tstroke: PropTypes.string.isRequired,\n\t\tfillOpacity: PropTypes.number.isRequired,\n\t\tstrokeOpacity: PropTypes.number.isRequired,\n\t\tstrokeWidth: PropTypes.number.isRequired,\n\t\tfill: PropTypes.string.isRequired,\n\t\tedgeStrokeWidth: PropTypes.number.isRequired,\n\t\tedgeStroke: PropTypes.string.isRequired,\n\t\tedgeFill: PropTypes.string.isRequired,\n\t\tr: PropTypes.number.isRequired,\n\t}).isRequired,\n\n\tedgeInteractiveCursor: PropTypes.string,\n\tonDrag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tsnapTo: PropTypes.func,\n\tinteractive: PropTypes.bool.isRequired,\n\tselected: PropTypes.bool.isRequired,\n\n\thoverText: PropTypes.object.isRequired,\n};\n\nEachLinearRegressionChannel.defaultProps = {\n\tonDrag: noop,\n\tonDragComplete: noop,\n\n\tappearance: {\n\t\tstroke: \"#000000\",\n\t\tfillOpacity: 0.7,\n\t\tstrokeOpacity: 1,\n\t\tstrokeWidth: 1,\n\t\tfill: \"#8AAFE2\",\n\t\tedgeStrokeWidth: 2,\n\t\tedgeStroke: \"#000000\",\n\t\tedgeFill: \"#FFFFFF\",\n\t\tr: 5,\n\t},\n\tinteractive: true,\n\tselected: false,\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: 18,\n\t\tbgWidth: 175,\n\t\ttext: \"Click and drag the edge circles\",\n\t}\n};\n\nexport default EachLinearRegressionChannel;"]},"metadata":{},"sourceType":"script"}