{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.ForceIndex;\n\n  function calculator(data) {\n    var _options = options,\n        sourcePath = _options.sourcePath,\n        volumePath = _options.volumePath;\n    var source = (0, _utils.path)(sourcePath);\n    var volume = (0, _utils.path)(volumePath);\n    var forceIndexCalulator = (0, _utils.slidingWindow)().windowSize(2).accumulator(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          curr = _ref2[1];\n\n      return (source(curr) - source(prev)) * volume(curr);\n    });\n    var forceIndex = forceIndexCalulator(data);\n    return forceIndex;\n  }\n\n  calculator.undefinedLength = function () {\n    return 2;\n  };\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.ForceIndex, x);\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");","map":{"version":3,"sources":["../../../src/lib/calculator/forceIndex.js"],"names":["options","sourcePath","volumePath","source","volume","forceIndexCalulator","prev","curr","forceIndex","calculator","arguments"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAKe,YAAW;AAEzB,MAAIA,OAAAA,GAAAA,6BAAAA,CAAJ,UAAA;;AAEA,WAAA,UAAA,CAAA,IAAA,EAA0B;AAAA,QAAA,QAAA,GAAA,OAAA;AAAA,QACjBC,UADiB,GAAA,QAAA,CAAA,UAAA;AAAA,QACLC,UADK,GAAA,QAAA,CAAA,UAAA;AAGzB,QAAMC,MAAAA,GAAS,CAAA,GAAA,MAAA,CAAA,IAAA,EAAf,UAAe,CAAf;AACA,QAAMC,MAAAA,GAAS,CAAA,GAAA,MAAA,CAAA,IAAA,EAAf,UAAe,CAAf;AAEA,QAAMC,mBAAAA,GAAsB,CAAA,GAAA,MAAA,CAAA,aAAA,IAAA,UAAA,CAAA,CAAA,EAAA,WAAA,CAEd,UAAA,IAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAEC,IAAF,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,UAAQC,IAAR,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAkB,CAACJ,MAAAA,CAAAA,IAAAA,CAAAA,GAAeA,MAAAA,CAAhB,IAAgBA,CAAhB,IAAgCC,MAAAA,CAAlD,IAAkDA,CAAlD;AAFd,KAA4B,CAA5B;AAIA,QAAMI,UAAAA,GAAaH,mBAAAA,CAAnB,IAAmBA,CAAnB;AAEA,WAAA,UAAA;AACA;;AACDI,EAAAA,UAAAA,CAAAA,eAAAA,GAA6B,YAAW;AACvC,WAAA,CAAA;AADDA,GAAAA;;AAGAA,EAAAA,UAAAA,CAAAA,OAAAA,GAAqB,UAAA,CAAA,EAAY;AAChC,QAAI,CAACC,SAAAA,CAAL,MAAA,EAAuB;AACtB,aAAA,OAAA;AACA;;AACDV,IAAAA,OAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,6BAAAA,CAAAA,UAAAA,EAAAA,CAAAA,CAAAA;AACA,WAAA,UAAA;AALDS,GAAAA;;AAQA,SAAA,UAAA;;;AAhCD,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA","sourcesContent":["\n\nimport { slidingWindow, path } from \"../utils\";\nimport { ForceIndex as defaultOptions } from \"./defaultOptionsForComputation\";\n\nexport default function() {\n\n\tlet options = defaultOptions;\n\n\tfunction calculator(data) {\n\t\tconst { sourcePath, volumePath } = options;\n\n\t\tconst source = path(sourcePath);\n\t\tconst volume = path(volumePath);\n\n\t\tconst forceIndexCalulator = slidingWindow()\n\t\t\t.windowSize(2)\n\t\t\t.accumulator(([prev, curr]) => (source(curr) - source(prev)) * volume(curr));\n\n\t\tconst forceIndex = forceIndexCalulator(data);\n\n\t\treturn forceIndex;\n\t}\n\tcalculator.undefinedLength = function() {\n\t\treturn 2;\n\t};\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\n\treturn calculator;\n}\n"]},"metadata":{},"sourceType":"script"}