{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function () {\n  var options = _defaultOptionsForComputation.Renko;\n\n  var dateAccessor = function dateAccessor(d) {\n    return d.date;\n  };\n\n  var dateMutator = function dateMutator(d, date) {\n    d.date = date;\n  };\n\n  function calculator(rawData) {\n    var _options = options,\n        reversalType = _options.reversalType,\n        fixedBrickSize = _options.fixedBrickSize,\n        sourcePath = _options.sourcePath,\n        windowSize = _options.windowSize;\n    var source = sourcePath === \"high/low\" ? function (d) {\n      return {\n        high: d.high,\n        low: d.low\n      };\n    } : function (d) {\n      return {\n        high: d.close,\n        low: d.close\n      };\n    };\n    var pricingMethod = source;\n    var brickSize = void 0;\n\n    if (reversalType === \"ATR\") {\n      // calculateATR(rawData, period);\n      var atrAlgorithm = (0, _atr2.default)().options({\n        windowSize: windowSize\n      });\n      var atrCalculator = (0, _utils.merge)().algorithm(atrAlgorithm).merge(function (d, c) {\n        d[\"atr\" + windowSize] = c;\n      });\n      atrCalculator(rawData);\n\n      brickSize = function brickSize(d) {\n        return d[\"atr\" + windowSize];\n      };\n    } else {\n      brickSize = (0, _utils.functor)(fixedBrickSize);\n    }\n\n    var renkoData = [];\n    var index = 0,\n        prevBrickClose = rawData[index].open,\n        prevBrickOpen = rawData[index].open;\n    var brick = {},\n        direction = 0;\n    rawData.forEach(function (d, idx) {\n      if ((0, _utils.isNotDefined)(brick.from)) {\n        brick.high = d.high;\n        brick.low = d.low;\n        brick.startOfYear = d.startOfYear;\n        brick.startOfQuarter = d.startOfQuarter;\n        brick.startOfMonth = d.startOfMonth;\n        brick.startOfWeek = d.startOfWeek;\n        brick.from = idx;\n        brick.fromDate = dateAccessor(d); // indexMutator(brick, index++);\n\n        dateMutator(brick, dateAccessor(d));\n      }\n\n      brick.volume = (brick.volume || 0) + d.volume;\n      var prevCloseToHigh = prevBrickClose - pricingMethod(d).high,\n          prevCloseToLow = prevBrickClose - pricingMethod(d).low,\n          prevOpenToHigh = prevBrickOpen - pricingMethod(d).high,\n          prevOpenToLow = prevBrickOpen - pricingMethod(d).low,\n          priceMovement = Math.min(Math.abs(prevCloseToHigh), Math.abs(prevCloseToLow), Math.abs(prevOpenToHigh), Math.abs(prevOpenToLow));\n      brick.high = Math.max(brick.high, d.high);\n      brick.low = Math.min(brick.low, d.low);\n\n      if (!brick.startOfYear) {\n        brick.startOfYear = d.startOfYear;\n\n        if (brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d)); // brick.displayDate = d.displayDate;\n        }\n      }\n\n      if (!brick.startOfQuarter) {\n        brick.startOfQuarter = d.startOfQuarter;\n\n        if (brick.startOfQuarter && !brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d)); // brick.displayDate = d.displayDate;\n        }\n      }\n\n      if (!brick.startOfMonth) {\n        brick.startOfMonth = d.startOfMonth;\n\n        if (brick.startOfMonth && !brick.startOfQuarter) {\n          dateMutator(brick, dateAccessor(d)); // brick.displayDate = d.displayDate;\n        }\n      }\n\n      if (!brick.startOfWeek) {\n        brick.startOfWeek = d.startOfWeek;\n\n        if (brick.startOfWeek && !brick.startOfMonth) {\n          dateMutator(brick, dateAccessor(d)); // brick.displayDate = d.displayDate;\n        }\n      } // d.brick = JSON.stringify(brick);\n\n\n      if (brickSize(d)) {\n        var noOfBricks = Math.floor(priceMovement / brickSize(d));\n        brick.open = Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh) || Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow) ? prevBrickClose : prevBrickOpen;\n\n        if (noOfBricks >= 1) {\n          var j = 0;\n\n          for (j = 0; j < noOfBricks; j++) {\n            brick.close = brick.open < pricingMethod(d).high ? // if brick open is less than current price it means it is green/hollow brick\n            brick.open + brickSize(d) : brick.open - brickSize(d);\n            direction = brick.close > brick.open ? 1 : -1;\n            brick.direction = direction;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d); // brick.diff = brick.open - brick.close;\n            // brick.atr = d.atr;\n\n            brick.fullyFormed = true;\n            renkoData.push(brick);\n            prevBrickClose = brick.close;\n            prevBrickOpen = brick.open;\n            var newBrick = {\n              high: brick.high,\n              low: brick.low,\n              open: brick.close,\n              startOfYear: false,\n              startOfMonth: false,\n              startOfQuarter: false,\n              startOfWeek: false\n            };\n            brick = newBrick;\n            brick.from = idx;\n            brick.fromDate = dateAccessor(d); // indexMutator(brick, index + j);\n\n            dateMutator(brick, dateAccessor(d));\n            brick.volume = (brick.volume || 0) + d.volume;\n          }\n\n          index = index + j - 1;\n          brick = {};\n        } else {\n          if (idx === rawData.length - 1) {\n            brick.close = direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            dateMutator(brick, dateAccessor(d));\n            brick.fullyFormed = false;\n            renkoData.push(brick);\n          }\n        }\n      }\n    });\n    return renkoData;\n  }\n\n  calculator.options = function (x) {\n    if (!arguments.length) {\n      return options;\n    }\n\n    options = _extends({}, _defaultOptionsForComputation.Renko, x);\n    return calculator;\n  };\n\n  calculator.dateMutator = function (x) {\n    if (!arguments.length) return dateMutator;\n    dateMutator = x;\n    return calculator;\n  };\n\n  calculator.dateAccessor = function (x) {\n    if (!arguments.length) return dateAccessor;\n    dateAccessor = x;\n    return calculator;\n  };\n\n  return calculator;\n};\n\nvar _utils = require(\"../utils\");\n\nvar _atr = require(\"./atr\");\n\nvar _atr2 = _interopRequireDefault(_atr);\n\nvar _defaultOptionsForComputation = require(\"./defaultOptionsForComputation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","map":{"version":3,"sources":["../../../src/lib/calculator/renko.js"],"names":["options","dateAccessor","d","dateMutator","reversalType","fixedBrickSize","sourcePath","windowSize","source","high","low","pricingMethod","brickSize","atrAlgorithm","atrCalculator","renkoData","index","prevBrickClose","rawData","prevBrickOpen","brick","direction","prevCloseToHigh","prevCloseToLow","prevOpenToHigh","prevOpenToLow","priceMovement","Math","noOfBricks","j","newBrick","open","startOfYear","startOfMonth","startOfQuarter","startOfWeek","idx","calculator","arguments"],"mappings":"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","sourcesContent":["\n\nimport { merge, isNotDefined, functor } from \"../utils\";\n\nimport atr from \"./atr\";\n\nimport { Renko as defaultOptions } from \"./defaultOptionsForComputation\";\n\nexport default function() {\n\tlet options = defaultOptions;\n\n\tlet dateAccessor = d => d.date;\n\tlet dateMutator = (d, date) => { d.date = date; };\n\n\tfunction calculator(rawData) {\n\t\tconst { reversalType, fixedBrickSize, sourcePath, windowSize } = options;\n\n\t\tconst source = sourcePath === \"high/low\"\n\t\t\t? d => { return { high: d.high, low: d.low }; }\n\t\t\t: d => { return { high: d.close, low: d.close }; };\n\n\t\tconst pricingMethod = source;\n\t\tlet brickSize;\n\n\t\tif (reversalType === \"ATR\") {\n\t\t\t// calculateATR(rawData, period);\n\t\t\tconst atrAlgorithm = atr().options({ windowSize });\n\n\t\t\tconst atrCalculator = merge()\n\t\t\t\t.algorithm(atrAlgorithm)\n\t\t\t\t.merge((d, c) => { d[\"atr\" + windowSize] = c; } );\n\n\t\t\tatrCalculator(rawData);\n\t\t\tbrickSize = d => d[\"atr\" + windowSize];\n\t\t} else {\n\t\t\tbrickSize = functor(fixedBrickSize);\n\t\t}\n\n\t\tconst renkoData = [];\n\n\t\tlet index = 0, prevBrickClose = rawData[index].open, prevBrickOpen = rawData[index].open;\n\t\tlet brick = {}, direction = 0;\n\n\t\trawData.forEach(function(d, idx) {\n\t\t\tif (isNotDefined(brick.from)) {\n\t\t\t\tbrick.high = d.high;\n\t\t\t\tbrick.low = d.low;\n\t\t\t\tbrick.startOfYear = d.startOfYear;\n\t\t\t\tbrick.startOfQuarter = d.startOfQuarter;\n\t\t\t\tbrick.startOfMonth = d.startOfMonth;\n\t\t\t\tbrick.startOfWeek = d.startOfWeek;\n\n\t\t\t\tbrick.from = idx;\n\t\t\t\tbrick.fromDate = dateAccessor(d);\n\t\t\t\t// indexMutator(brick, index++);\n\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t}\n\t\t\tbrick.volume = (brick.volume || 0) + d.volume;\n\n\t\t\tconst prevCloseToHigh = (prevBrickClose - pricingMethod(d).high),\n\t\t\t\tprevCloseToLow = (prevBrickClose - pricingMethod(d).low),\n\t\t\t\tprevOpenToHigh = (prevBrickOpen - pricingMethod(d).high),\n\t\t\t\tprevOpenToLow = (prevBrickOpen - pricingMethod(d).low),\n\t\t\t\tpriceMovement = Math.min(\n\t\t\t\t\tMath.abs(prevCloseToHigh),\n\t\t\t\t\tMath.abs(prevCloseToLow),\n\t\t\t\t\tMath.abs(prevOpenToHigh),\n\t\t\t\t\tMath.abs(prevOpenToLow));\n\n\n\t\t\tbrick.high = Math.max(brick.high, d.high);\n\t\t\tbrick.low = Math.min(brick.low, d.low);\n\n\t\t\tif (!brick.startOfYear) {\n\t\t\t\tbrick.startOfYear = d.startOfYear;\n\t\t\t\tif (brick.startOfYear) {\n\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t// brick.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!brick.startOfQuarter) {\n\t\t\t\tbrick.startOfQuarter = d.startOfQuarter;\n\t\t\t\tif (brick.startOfQuarter && !brick.startOfYear) {\n\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t// brick.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!brick.startOfMonth) {\n\t\t\t\tbrick.startOfMonth = d.startOfMonth;\n\t\t\t\tif (brick.startOfMonth && !brick.startOfQuarter) {\n\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t// brick.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!brick.startOfWeek) {\n\t\t\t\tbrick.startOfWeek = d.startOfWeek;\n\t\t\t\tif (brick.startOfWeek && !brick.startOfMonth) {\n\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t// brick.displayDate = d.displayDate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// d.brick = JSON.stringify(brick);\n\t\t\tif (brickSize(d)) {\n\t\t\t\tconst noOfBricks = Math.floor(priceMovement / brickSize(d));\n\n\t\t\t\tbrick.open = (Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh)\n\t\t\t\t\t|| Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow))\n\t\t\t\t\t? prevBrickClose\n\t\t\t\t\t: prevBrickOpen;\n\n\t\t\t\tif (noOfBricks >= 1) {\n\t\t\t\t\tlet j = 0;\n\t\t\t\t\tfor (j = 0; j < noOfBricks; j++) {\n\t\t\t\t\t\tbrick.close = (brick.open < pricingMethod(d).high)\n\t\t\t\t\t\t\t// if brick open is less than current price it means it is green/hollow brick\n\t\t\t\t\t\t\t? brick.open + brickSize(d)\n\t\t\t\t\t\t\t: brick.open - brickSize(d);\n\t\t\t\t\t\tdirection = brick.close > brick.open ? 1 : -1;\n\t\t\t\t\t\tbrick.direction = direction;\n\t\t\t\t\t\tbrick.to = idx;\n\t\t\t\t\t\tbrick.toDate = dateAccessor(d);\n\t\t\t\t\t\t// brick.diff = brick.open - brick.close;\n\t\t\t\t\t\t// brick.atr = d.atr;\n\t\t\t\t\t\tbrick.fullyFormed = true;\n\t\t\t\t\t\trenkoData.push(brick);\n\n\t\t\t\t\t\tprevBrickClose = brick.close;\n\t\t\t\t\t\tprevBrickOpen = brick.open;\n\n\t\t\t\t\t\tconst newBrick = {\n\t\t\t\t\t\t\thigh: brick.high,\n\t\t\t\t\t\t\tlow: brick.low,\n\t\t\t\t\t\t\topen: brick.close,\n\t\t\t\t\t\t\tstartOfYear: false,\n\t\t\t\t\t\t\tstartOfMonth: false,\n\t\t\t\t\t\t\tstartOfQuarter: false,\n\t\t\t\t\t\t\tstartOfWeek: false\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbrick = newBrick;\n\t\t\t\t\t\tbrick.from = idx;\n\t\t\t\t\t\tbrick.fromDate = dateAccessor(d);\n\t\t\t\t\t\t// indexMutator(brick, index + j);\n\t\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t\tbrick.volume = (brick.volume || 0) + d.volume;\n\t\t\t\t\t}\n\t\t\t\t\tindex = index + j - 1;\n\t\t\t\t\tbrick = {};\n\t\t\t\t} else {\n\t\t\t\t\tif (idx === rawData.length - 1) {\n\t\t\t\t\t\tbrick.close = direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n\t\t\t\t\t\tbrick.to = idx;\n\t\t\t\t\t\tbrick.toDate = dateAccessor(d);\n\t\t\t\t\t\tdateMutator(brick, dateAccessor(d));\n\t\t\t\t\t\tbrick.fullyFormed = false;\n\t\t\t\t\t\trenkoData.push(brick);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t\treturn renkoData;\n\n\t}\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\n\tcalculator.dateMutator = function(x) {\n\t\tif (!arguments.length) return dateMutator;\n\t\tdateMutator = x;\n\t\treturn calculator;\n\t};\n\tcalculator.dateAccessor = function(x) {\n\t\tif (!arguments.length) return dateAccessor;\n\t\tdateAccessor = x;\n\t\treturn calculator;\n\t};\n\n\treturn calculator;\n}\n"]},"metadata":{},"sourceType":"script"}